(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __defProps = Object.defineProperties;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a3, b3) => {
    for (var prop in b3 || (b3 = {}))
      if (__hasOwnProp.call(b3, prop))
        __defNormalProp(a3, prop, b3[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b3)) {
        if (__propIsEnum.call(b3, prop))
          __defNormalProp(a3, prop, b3[prop]);
      }
    return a3;
  };
  var __spreadProps = (a3, b3) => __defProps(a3, __getOwnPropDescs(b3));
  var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
  var __objRest = (source, exclude) => {
    var target = {};
    for (var prop in source)
      if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
        target[prop] = source[prop];
    if (source != null && __getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(source)) {
        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
          target[prop] = source[prop];
      }
    return target;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __reExport = (target, module, desc) => {
    if (module && typeof module === "object" || typeof module === "function") {
      for (let key of __getOwnPropNames(module))
        if (!__hasOwnProp.call(target, key) && key !== "default")
          __defProp(target, key, { get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable });
    }
    return target;
  };
  var __toModule = (module) => {
    return __reExport(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", module && module.__esModule && "default" in module ? { get: () => module.default, enumerable: true } : { value: module, enumerable: true })), module);
  };

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "node_modules/object-assign/index.js"(exports, module) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty2 = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject2(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i3 = 0; i3 < 10; i3++) {
            test2["_" + String.fromCharCode(i3)] = i3;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n2) {
            return test2[n2];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from3;
        var to2 = toObject2(target);
        var symbols;
        for (var s3 = 1; s3 < arguments.length; s3++) {
          from3 = Object(arguments[s3]);
          for (var key in from3) {
            if (hasOwnProperty2.call(from3, key)) {
              to2[key] = from3[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from3);
            for (var i3 = 0; i3 < symbols.length; i3++) {
              if (propIsEnumerable.call(from3, symbols[i3])) {
                to2[symbols[i3]] = from3[symbols[i3]];
              }
            }
          }
        }
        return to2;
      };
    }
  });

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var _assign = require_object_assign();
          var ReactVersion = "17.0.2";
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          exports.Fragment = 60107;
          exports.StrictMode = 60108;
          exports.Profiler = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          exports.Suspense = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            exports.Fragment = symbolFor("react.fragment");
            exports.StrictMode = symbolFor("react.strict_mode");
            exports.Profiler = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            exports.Suspense = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: 0
          };
          var ReactCurrentOwner = {
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var IsSomeRendererActing = {
            current: false
          };
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner,
            IsSomeRendererActing,
            assign: _assign
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          }
          function warn(format) {
            {
              for (var _len = arguments.length, args2 = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args2[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args2);
            }
          }
          function error2(format) {
            {
              for (var _len2 = arguments.length, args2 = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args2[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args2);
            }
          }
          function printWarning(level, format, args2) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args2 = args2.concat([stack]);
              }
              var argsWithFormat = args2.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error2("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            isMounted: function(publicInstance) {
              return false;
            },
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component.prototype.isReactComponent = {};
          Component.prototype.setState = function(partialState, callback) {
            if (!(typeof partialState === "object" || typeof partialState === "function" || partialState == null)) {
              {
                throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
              }
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          _assign(pureComponentPrototype, Component.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error2("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case exports.Fragment:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case exports.Profiler:
                return "Profiler";
              case exports.StrictMode:
                return "StrictMode";
              case exports.Suspense:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider2 = type;
                  return getContextName(provider2._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentName(init(payload));
                  } catch (x3) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty2.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty2.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error2("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error2("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentName(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error2('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element2 = {
              $$typeof: REACT_ELEMENT_TYPE,
              type,
              key,
              ref,
              props,
              _owner: owner
            };
            {
              element2._store = {};
              Object.defineProperty(element2._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element2, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element2, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element2.props);
                Object.freeze(element2);
              }
            }
            return element2;
          };
          function createElement5(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i3 = 0; i3 < childrenLength; i3++) {
                childArray[i3] = arguments[i3 + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement(element2, config, children) {
            if (!!(element2 === null || element2 === void 0)) {
              {
                throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element2 + ".");
              }
            }
            var propName;
            var props = _assign({}, element2.props);
            var key = element2.key;
            var ref = element2.ref;
            var self2 = element2._self;
            var source = element2._source;
            var owner = element2._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                key = "" + config.key;
              }
              var defaultProps;
              if (element2.type && element2.type.defaultProps) {
                defaultProps = element2.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i3 = 0; i3 < childrenLength; i3++) {
                childArray[i3] = arguments[i3 + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element2.type, key, ref, self2, source, owner, props);
          }
          function isValidElement(object4) {
            return typeof object4 === "object" && object4 !== null && object4.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape2(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match2) {
              return escaperLookup[match2];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text2) {
            return text2.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element2, index) {
            if (typeof element2 === "object" && element2 !== null && element2.key != null) {
              return escape2("" + element2.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array3, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (Array.isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array3, escapedChildKey, "", function(c3) {
                  return c3;
                });
              } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                  mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
                }
                array3.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (Array.isArray(children)) {
              for (var i3 = 0; i3 < children.length; i3++) {
                child = children[i3];
                nextName = nextNamePrefix + getElementKey(child, i3);
                subtreeCount += mapIntoArray(child, array3, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator2 = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator2.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array3, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = "" + children;
                {
                  {
                    throw Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
                  }
                }
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n2 = 0;
            mapChildren(children, function() {
              n2++;
            });
            return n2;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement(children)) {
              {
                throw Error("React.Children.only expected to receive a single React element child.");
              }
            }
            return children;
          }
          function createContext(defaultValue, calculateChangedBits) {
            if (calculateChangedBits === void 0) {
              calculateChangedBits = null;
            } else {
              {
                if (calculateChangedBits !== null && typeof calculateChangedBits !== "function") {
                  error2("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
                }
              }
            }
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              _calculateChangedBits: calculateChangedBits,
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              _threadCount: 0,
              Provider: null,
              Consumer: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context,
                _calculateChangedBits: context._calculateChangedBits
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error2("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error2("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              var pending = payload;
              pending._status = Pending;
              pending._result = thenable;
              thenable.then(function(moduleObject) {
                if (payload._status === Pending) {
                  var defaultExport = moduleObject.default;
                  {
                    if (defaultExport === void 0) {
                      error2("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                    }
                  }
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = defaultExport;
                }
              }, function(error3) {
                if (payload._status === Pending) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error3;
                }
              });
            }
            if (payload._status === Resolved) {
              return payload._result;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              _status: -1,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error2("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error2("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef3(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error2("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error2("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error2("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error2("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name2) {
                  ownName = name2;
                  if (render.displayName == null) {
                    render.displayName = name2;
                  }
                }
              });
            }
            return elementType;
          }
          var enableScopeAPI = false;
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
                return true;
              }
            }
            return false;
          }
          function memo(type, compare) {
            {
              if (!isValidElementType(type)) {
                error2("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name2) {
                  ownName = name2;
                  if (type.displayName == null) {
                    type.displayName = name2;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            if (!(dispatcher !== null)) {
              {
                throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext(Context, unstable_observedBits) {
            var dispatcher = resolveDispatcher();
            {
              if (unstable_observedBits !== void 0) {
                error2("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === "number" && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks" : "");
              }
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error2("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error2("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context, unstable_observedBits);
          }
          function useState3(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer2(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef2(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect3(create8, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create8, deps);
          }
          function useLayoutEffect(create8, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create8, deps);
          }
          function useCallback(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo(create8, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create8, deps);
          }
          function useImperativeHandle(ref, create8, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create8, deps);
          }
          function useDebugValue(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name2, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x3) {
                  var match2 = x3.stack.trim().match(/\n( *(at )?)/);
                  prefix = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix + name2;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn2, construct) {
            if (!fn2 || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn2);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x3) {
                    control = x3;
                  }
                  Reflect.construct(fn2, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x3) {
                    control = x3;
                  }
                  fn2.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x3) {
                  control = x3;
                }
                fn2();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s3 = sampleLines.length - 1;
                var c3 = controlLines.length - 1;
                while (s3 >= 1 && c3 >= 0 && sampleLines[s3] !== controlLines[c3]) {
                  c3--;
                }
                for (; s3 >= 1 && c3 >= 0; s3--, c3--) {
                  if (sampleLines[s3] !== controlLines[c3]) {
                    if (s3 !== 1 || c3 !== 1) {
                      do {
                        s3--;
                        c3--;
                        if (c3 < 0 || sampleLines[s3] !== controlLines[c3]) {
                          var _frame = "\n" + sampleLines[s3].replace(" at new ", " at ");
                          {
                            if (typeof fn2 === "function") {
                              componentFrameCache.set(fn2, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s3 >= 1 && c3 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name2 = fn2 ? fn2.displayName || fn2.name : "";
            var syntheticFrame = name2 ? describeBuiltInComponentFrame(name2) : "";
            {
              if (typeof fn2 === "function") {
                componentFrameCache.set(fn2, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn2, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn2, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case exports.Suspense:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x3) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element2) {
            {
              if (element2) {
                var owner = element2._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element2.type, element2._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values2, location2, componentName, element2) {
            {
              var has2 = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element2);
                    error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element2);
                    error2("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element2) {
            {
              if (element2) {
                var owner = element2._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element2.type, element2._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name2 = getComponentName(ReactCurrentOwner.current.type);
              if (name2) {
                return "\n\nCheck the render method of `" + name2 + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element2, parentType) {
            if (!element2._store || element2._store.validated || element2.key != null) {
              return;
            }
            element2._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element2 && element2._owner && element2._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentName(element2._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element2);
              error2('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (Array.isArray(node)) {
              for (var i3 = 0; i3 < node.length; i3++) {
                var child = node[i3];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator2 = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator2.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element2) {
            {
              var type = element2.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name2 = getComponentName(type);
                checkPropTypes(propTypes, element2.props, "prop", name2, element2);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentName(type);
                error2("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error2("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys5 = Object.keys(fragment.props);
              for (var i3 = 0; i3 < keys5.length; i3++) {
                var key = keys5[i3];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error2("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error2("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (Array.isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error2("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element2 = createElement5.apply(this, arguments);
            if (element2 == null) {
              return element2;
            }
            if (validType) {
              for (var i3 = 2; i3 < arguments.length; i3++) {
                validateChildKeys(arguments[i3], type);
              }
            }
            if (type === exports.Fragment) {
              validateFragmentProps(element2);
            } else {
              validatePropTypes(element2);
            }
            return element2;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element2, props, children) {
            var newElement = cloneElement.apply(this, arguments);
            for (var i3 = 2; i3 < arguments.length; i3++) {
              validateChildKeys(arguments[i3], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          {
            try {
              var frozenObject = Object.freeze({});
              new Map([[frozenObject, null]]);
              new Set([frozenObject]);
            } catch (e4) {
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children;
          exports.Component = Component;
          exports.PureComponent = PureComponent;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef3;
          exports.isValidElement = isValidElement;
          exports.lazy = lazy;
          exports.memo = memo;
          exports.useCallback = useCallback;
          exports.useContext = useContext;
          exports.useDebugValue = useDebugValue;
          exports.useEffect = useEffect3;
          exports.useImperativeHandle = useImperativeHandle;
          exports.useLayoutEffect = useLayoutEffect;
          exports.useMemo = useMemo;
          exports.useReducer = useReducer2;
          exports.useRef = useRef2;
          exports.useState = useState3;
          exports.version = ReactVersion;
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var requestHostCallback;
          var requestHostTimeout;
          var cancelHostTimeout;
          var requestPaint;
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          if (typeof window === "undefined" || typeof MessageChannel !== "function") {
            var _callback = null;
            var _timeoutID = null;
            var _flushCallback = function() {
              if (_callback !== null) {
                try {
                  var currentTime = exports.unstable_now();
                  var hasRemainingTime = true;
                  _callback(hasRemainingTime, currentTime);
                  _callback = null;
                } catch (e4) {
                  setTimeout(_flushCallback, 0);
                  throw e4;
                }
              }
            };
            requestHostCallback = function(cb) {
              if (_callback !== null) {
                setTimeout(requestHostCallback, 0, cb);
              } else {
                _callback = cb;
                setTimeout(_flushCallback, 0);
              }
            };
            requestHostTimeout = function(cb, ms) {
              _timeoutID = setTimeout(cb, ms);
            };
            cancelHostTimeout = function() {
              clearTimeout(_timeoutID);
            };
            exports.unstable_shouldYield = function() {
              return false;
            };
            requestPaint = exports.unstable_forceFrameRate = function() {
            };
          } else {
            var _setTimeout = window.setTimeout;
            var _clearTimeout = window.clearTimeout;
            if (typeof console !== "undefined") {
              var requestAnimationFrame2 = window.requestAnimationFrame;
              var cancelAnimationFrame2 = window.cancelAnimationFrame;
              if (typeof requestAnimationFrame2 !== "function") {
                console["error"]("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }
              if (typeof cancelAnimationFrame2 !== "function") {
                console["error"]("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }
            }
            var isMessageLoopRunning = false;
            var scheduledHostCallback = null;
            var taskTimeoutID = -1;
            var yieldInterval = 5;
            var deadline = 0;
            {
              exports.unstable_shouldYield = function() {
                return exports.unstable_now() >= deadline;
              };
              requestPaint = function() {
              };
            }
            exports.unstable_forceFrameRate = function(fps) {
              if (fps < 0 || fps > 125) {
                console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
                return;
              }
              if (fps > 0) {
                yieldInterval = Math.floor(1e3 / fps);
              } else {
                yieldInterval = 5;
              }
            };
            var performWorkUntilDeadline = function() {
              if (scheduledHostCallback !== null) {
                var currentTime = exports.unstable_now();
                deadline = currentTime + yieldInterval;
                var hasTimeRemaining = true;
                try {
                  var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                  if (!hasMoreWork) {
                    isMessageLoopRunning = false;
                    scheduledHostCallback = null;
                  } else {
                    port.postMessage(null);
                  }
                } catch (error2) {
                  port.postMessage(null);
                  throw error2;
                }
              } else {
                isMessageLoopRunning = false;
              }
            };
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            requestHostCallback = function(callback) {
              scheduledHostCallback = callback;
              if (!isMessageLoopRunning) {
                isMessageLoopRunning = true;
                port.postMessage(null);
              }
            };
            requestHostTimeout = function(callback, ms) {
              taskTimeoutID = _setTimeout(function() {
                callback(exports.unstable_now());
              }, ms);
            };
            cancelHostTimeout = function() {
              _clearTimeout(taskTimeoutID);
              taskTimeoutID = -1;
            };
          }
          function push2(heap, node) {
            var index = heap.length;
            heap.push(node);
            siftUp(heap, node, index);
          }
          function peek(heap) {
            var first = heap[0];
            return first === void 0 ? null : first;
          }
          function pop(heap) {
            var first = heap[0];
            if (first !== void 0) {
              var last2 = heap.pop();
              if (last2 !== first) {
                heap[0] = last2;
                siftDown(heap, last2, 0);
              }
              return first;
            } else {
              return null;
            }
          }
          function siftUp(heap, node, i3) {
            var index = i3;
            while (true) {
              var parentIndex = index - 1 >>> 1;
              var parent = heap[parentIndex];
              if (parent !== void 0 && compare(parent, node) > 0) {
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i3) {
            var index = i3;
            var length3 = heap.length;
            while (index < length3) {
              var leftIndex = (index + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (left !== void 0 && compare(left, node) < 0) {
                if (right !== void 0 && compare(right, left) < 0) {
                  heap[index] = right;
                  heap[rightIndex] = node;
                  index = rightIndex;
                } else {
                  heap[index] = left;
                  heap[leftIndex] = node;
                  index = leftIndex;
                }
              } else if (right !== void 0 && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a3, b3) {
            var diff = a3.sortIndex - b3.sortIndex;
            return diff !== 0 ? diff : a3.id - b3.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push2(taskQueue, timer);
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error2) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error2;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime = currentTime + delay;
              } else {
                startTime = currentTime;
              }
            } else {
              startTime = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime,
              expirationTime,
              sortIndex: -1
            };
            if (startTime > currentTime) {
              newTask.sortIndex = startTime;
              push2(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push2(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_wrapCallback = unstable_wrapCallback;
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler-tracing.development.js
  var require_scheduler_tracing_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler-tracing.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var DEFAULT_THREAD_ID = 0;
          var interactionIDCounter = 0;
          var threadIDCounter = 0;
          exports.__interactionsRef = null;
          exports.__subscriberRef = null;
          {
            exports.__interactionsRef = {
              current: new Set()
            };
            exports.__subscriberRef = {
              current: null
            };
          }
          function unstable_clear(callback) {
            var prevInteractions = exports.__interactionsRef.current;
            exports.__interactionsRef.current = new Set();
            try {
              return callback();
            } finally {
              exports.__interactionsRef.current = prevInteractions;
            }
          }
          function unstable_getCurrent() {
            {
              return exports.__interactionsRef.current;
            }
          }
          function unstable_getThreadID() {
            return ++threadIDCounter;
          }
          function unstable_trace(name2, timestamp, callback) {
            var threadID = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : DEFAULT_THREAD_ID;
            var interaction = {
              __count: 1,
              id: interactionIDCounter++,
              name: name2,
              timestamp
            };
            var prevInteractions = exports.__interactionsRef.current;
            var interactions = new Set(prevInteractions);
            interactions.add(interaction);
            exports.__interactionsRef.current = interactions;
            var subscriber = exports.__subscriberRef.current;
            var returnValue;
            try {
              if (subscriber !== null) {
                subscriber.onInteractionTraced(interaction);
              }
            } finally {
              try {
                if (subscriber !== null) {
                  subscriber.onWorkStarted(interactions, threadID);
                }
              } finally {
                try {
                  returnValue = callback();
                } finally {
                  exports.__interactionsRef.current = prevInteractions;
                  try {
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(interactions, threadID);
                    }
                  } finally {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  }
                }
              }
            }
            return returnValue;
          }
          function unstable_wrap(callback) {
            var threadID = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_THREAD_ID;
            var wrappedInteractions = exports.__interactionsRef.current;
            var subscriber = exports.__subscriberRef.current;
            if (subscriber !== null) {
              subscriber.onWorkScheduled(wrappedInteractions, threadID);
            }
            wrappedInteractions.forEach(function(interaction) {
              interaction.__count++;
            });
            var hasRun = false;
            function wrapped() {
              var prevInteractions = exports.__interactionsRef.current;
              exports.__interactionsRef.current = wrappedInteractions;
              subscriber = exports.__subscriberRef.current;
              try {
                var returnValue;
                try {
                  if (subscriber !== null) {
                    subscriber.onWorkStarted(wrappedInteractions, threadID);
                  }
                } finally {
                  try {
                    returnValue = callback.apply(void 0, arguments);
                  } finally {
                    exports.__interactionsRef.current = prevInteractions;
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(wrappedInteractions, threadID);
                    }
                  }
                }
                return returnValue;
              } finally {
                if (!hasRun) {
                  hasRun = true;
                  wrappedInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  });
                }
              }
            }
            wrapped.cancel = function cancel() {
              subscriber = exports.__subscriberRef.current;
              try {
                if (subscriber !== null) {
                  subscriber.onWorkCanceled(wrappedInteractions, threadID);
                }
              } finally {
                wrappedInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                });
              }
            };
            return wrapped;
          }
          var subscribers = null;
          {
            subscribers = new Set();
          }
          function unstable_subscribe(subscriber) {
            {
              subscribers.add(subscriber);
              if (subscribers.size === 1) {
                exports.__subscriberRef.current = {
                  onInteractionScheduledWorkCompleted,
                  onInteractionTraced,
                  onWorkCanceled,
                  onWorkScheduled,
                  onWorkStarted,
                  onWorkStopped
                };
              }
            }
          }
          function unstable_unsubscribe(subscriber) {
            {
              subscribers.delete(subscriber);
              if (subscribers.size === 0) {
                exports.__subscriberRef.current = null;
              }
            }
          }
          function onInteractionTraced(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onInteractionTraced(interaction);
              } catch (error2) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error2;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onInteractionScheduledWorkCompleted(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              } catch (error2) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error2;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkScheduled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkScheduled(interactions, threadID);
              } catch (error2) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error2;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkStarted(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error2) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error2;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkStopped(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkStopped(interactions, threadID);
              } catch (error2) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error2;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkCanceled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkCanceled(interactions, threadID);
              } catch (error2) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error2;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          exports.unstable_clear = unstable_clear;
          exports.unstable_getCurrent = unstable_getCurrent;
          exports.unstable_getThreadID = unstable_getThreadID;
          exports.unstable_subscribe = unstable_subscribe;
          exports.unstable_trace = unstable_trace;
          exports.unstable_unsubscribe = unstable_unsubscribe;
          exports.unstable_wrap = unstable_wrap;
        })();
      }
    }
  });

  // node_modules/scheduler/tracing.js
  var require_tracing = __commonJS({
    "node_modules/scheduler/tracing.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_tracing_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React10 = require_react();
          var _assign = require_object_assign();
          var Scheduler = require_scheduler();
          var tracing = require_tracing();
          var ReactSharedInternals = React10.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function warn(format) {
            {
              for (var _len = arguments.length, args2 = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args2[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args2);
            }
          }
          function error2(format) {
            {
              for (var _len2 = arguments.length, args2 = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args2[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args2);
            }
          }
          function printWarning(level, format, args2) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args2 = args2.concat([stack]);
              }
              var argsWithFormat = args2.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          if (!React10) {
            {
              throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var FundamentalComponent = 20;
          var ScopeComponent = 21;
          var Block = 22;
          var OffscreenComponent = 23;
          var LegacyHiddenComponent = 24;
          var enableProfilerTimer = true;
          var enableFundamentalAPI = false;
          var enableNewReconciler = false;
          var warnAboutStringRefs = false;
          var allNativeEvents = new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error2("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i3 = 0; i3 < dependencies.length; i3++) {
              allNativeEvents.add(dependencies[i3]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var ROOT_ATTRIBUTE_NAME = "data-reactroot";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error2("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name2, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name2.length > 2 && (name2[0] === "o" || name2[0] === "O") && (name2[1] === "n" || name2[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name2, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name2.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name2, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name2, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name2) {
            return properties.hasOwnProperty(name2) ? properties[name2] : null;
          }
          function PropertyInfoRecord(name2, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name2;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name2) {
            properties[name2] = new PropertyInfoRecord(name2, RESERVED, false, name2, null, false, false);
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name2 = _ref[0], attributeName = _ref[1];
            properties[name2] = new PropertyInfoRecord(name2, STRING, false, attributeName, null, false, false);
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name2) {
            properties[name2] = new PropertyInfoRecord(name2, BOOLEANISH_STRING, false, name2.toLowerCase(), null, false, false);
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name2) {
            properties[name2] = new PropertyInfoRecord(name2, BOOLEANISH_STRING, false, name2, null, false, false);
          });
          [
            "allowFullScreen",
            "async",
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            "itemScope"
          ].forEach(function(name2) {
            properties[name2] = new PropertyInfoRecord(name2, BOOLEAN, false, name2.toLowerCase(), null, false, false);
          });
          [
            "checked",
            "multiple",
            "muted",
            "selected"
          ].forEach(function(name2) {
            properties[name2] = new PropertyInfoRecord(name2, BOOLEAN, true, name2, null, false, false);
          });
          [
            "capture",
            "download"
          ].forEach(function(name2) {
            properties[name2] = new PropertyInfoRecord(name2, OVERLOADED_BOOLEAN, false, name2, null, false, false);
          });
          [
            "cols",
            "rows",
            "size",
            "span"
          ].forEach(function(name2) {
            properties[name2] = new PropertyInfoRecord(name2, POSITIVE_NUMERIC, false, name2, null, false, false);
          });
          ["rowSpan", "start"].forEach(function(name2) {
            properties[name2] = new PropertyInfoRecord(name2, NUMERIC, false, name2.toLowerCase(), null, false, false);
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
          ].forEach(function(attributeName) {
            var name2 = attributeName.replace(CAMELIZE, capitalize);
            properties[name2] = new PropertyInfoRecord(name2, STRING, false, attributeName, null, false, false);
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
          ].forEach(function(attributeName) {
            var name2 = attributeName.replace(CAMELIZE, capitalize);
            properties[name2] = new PropertyInfoRecord(name2, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
          ].forEach(function(attributeName) {
            var name2 = attributeName.replace(CAMELIZE, capitalize);
            properties[name2] = new PropertyInfoRecord(name2, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url2) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url2)) {
                didWarn = true;
                error2("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url2));
              }
            }
          }
          function getValueForProperty(node, name2, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name2, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name2, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name2, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name2, expected) {
            {
              if (!isAttributeNameSafe(name2)) {
                return;
              }
              if (isOpaqueHydratingObject(expected)) {
                return expected;
              }
              if (!node.hasAttribute(name2)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name2);
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node, name2, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name2);
            if (shouldIgnoreAttribute(name2, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name2, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name2)) {
                var _attributeName = name2;
                if (value === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          var REACT_FRAGMENT_TYPE = 60107;
          var REACT_STRICT_MODE_TYPE = 60108;
          var REACT_PROFILER_TYPE = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          var REACT_SUSPENSE_TYPE = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
            REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
            REACT_PROFILER_TYPE = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name2, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x3) {
                  var match2 = x3.stack.trim().match(/\n( *(at )?)/);
                  prefix = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix + name2;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn2, construct) {
            if (!fn2 || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn2);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x3) {
                    control = x3;
                  }
                  Reflect.construct(fn2, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x3) {
                    control = x3;
                  }
                  fn2.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x3) {
                  control = x3;
                }
                fn2();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s3 = sampleLines.length - 1;
                var c3 = controlLines.length - 1;
                while (s3 >= 1 && c3 >= 0 && sampleLines[s3] !== controlLines[c3]) {
                  c3--;
                }
                for (; s3 >= 1 && c3 >= 0; s3--, c3--) {
                  if (sampleLines[s3] !== controlLines[c3]) {
                    if (s3 !== 1 || c3 !== 1) {
                      do {
                        s3--;
                        c3--;
                        if (c3 < 0 || sampleLines[s3] !== controlLines[c3]) {
                          var _frame = "\n" + sampleLines[s3].replace(" at new ", " at ");
                          {
                            if (typeof fn2 === "function") {
                              componentFrameCache.set(fn2, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s3 >= 1 && c3 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name2 = fn2 ? fn2.displayName || fn2.name : "";
            var syntheticFrame = name2 ? describeBuiltInComponentFrame(name2) : "";
            {
              if (typeof fn2 === "function") {
                componentFrameCache.set(fn2, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn2, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn2, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x3) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case Block:
                return describeFunctionComponentFrame(fiber.type._render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node = workInProgress2;
              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);
              return info;
            } catch (x3) {
              return "\nError generating stack: " + x3.message + "\n" + x3.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error2("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider2 = type;
                  return getContextName(provider2._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentName(init(payload));
                  } catch (x3) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current2 = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current2 === null) {
                return null;
              }
              var owner = current2._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentName(owner.type);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current2 === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current2);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current2 = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
              current2 = fiber;
              isRendering = false;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function getIsRendering() {
            {
              return isRendering;
            }
          }
          function toString3(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "object":
              case "string":
              case "undefined":
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error2("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error2("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value = "";
            if (!node) {
              return value;
            }
            if (isCheckable(node)) {
              value = node.checked ? "true" : "false";
            } else {
              value = node.value;
            }
            return value;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get3 = descriptor.get, set5 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get3.call(this);
              },
              set: function(value) {
                currentValue = "" + value;
                set5.call(this, value);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc3) {
            doc3 = doc3 || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc3 === "undefined") {
              return null;
            }
            try {
              return doc3.activeElement || doc3.body;
            } catch (e4) {
              return doc3.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element2, props) {
            var node = element2;
            var checked = props.checked;
            var hostProps = _assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element2, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error2("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error2("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element2;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element2, props) {
            var node = element2;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          function updateWrapper(element2, props) {
            var node = element2;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error2("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error2("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element2, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node.value === "" || node.value != value) {
                  node.value = toString3(value);
                }
              } else if (node.value !== toString3(value)) {
                node.value = toString3(value);
              }
            } else if (type === "submit" || type === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element2, props, isHydrating2) {
            var node = element2;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString3(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name2 = node.name;
            if (name2 !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name2 !== "") {
              node.name = name2;
            }
          }
          function restoreControlledState(element2, props) {
            var node = element2;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name2 = props.name;
            if (props.type === "radio" && name2 != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name2) + '][type="radio"]');
              for (var i3 = 0; i3 < group.length; i3++) {
                var otherNode = group[i3];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  {
                    throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                  }
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node, type, value) {
            if (type !== "number" || getActiveElement(node.ownerDocument) !== node) {
              if (value == null) {
                node.defaultValue = toString3(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString3(value)) {
                node.defaultValue = toString3(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          function flattenChildren(children) {
            var content = "";
            React10.Children.forEach(children, function(child) {
              if (child == null) {
                return;
              }
              content += child;
            });
            return content;
          }
          function validateProps(element2, props) {
            {
              if (typeof props.children === "object" && props.children !== null) {
                React10.Children.forEach(props.children, function(child) {
                  if (child == null) {
                    return;
                  }
                  if (typeof child === "string" || typeof child === "number") {
                    return;
                  }
                  if (typeof child.type !== "string") {
                    return;
                  }
                  if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error2("Only strings and numbers are supported as <option> children.");
                  }
                });
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error2("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element2, props) {
            if (props.value != null) {
              element2.setAttribute("value", toString3(getToStringValue(props.value)));
            }
          }
          function getHostProps$1(element2, props) {
            var hostProps = _assign({
              children: void 0
            }, props);
            var content = flattenChildren(props.children);
            if (content) {
              hostProps.children = content;
            }
            return hostProps;
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i3 = 0; i3 < valuePropNames.length; i3++) {
                var propName = valuePropNames[i3];
                if (props[propName] == null) {
                  continue;
                }
                var isArray5 = Array.isArray(props[propName]);
                if (props.multiple && !isArray5) {
                  error2("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && isArray5) {
                  error2("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options2 = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i3 = 0; i3 < selectedValues.length; i3++) {
                selectedValue["$" + selectedValues[i3]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString3(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$2(element2, props) {
            return _assign({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element2, props) {
            var node = element2;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error2("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element2, props) {
            var node = element2;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element2, props) {
            var node = element2;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element2, props) {
            var node = element2;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$3(element2, props) {
            var node = element2;
            if (!(props.dangerouslySetInnerHTML == null)) {
              {
                throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
              }
            }
            var hostProps = _assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString3(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element2, props) {
            var node = element2;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error2("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error2("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (!(defaultValue == null)) {
                    {
                      throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                    }
                  }
                  if (Array.isArray(children)) {
                    if (!(children.length <= 1)) {
                      {
                        throw Error("<textarea> can only have at most one child.");
                      }
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element2, props) {
            var node = element2;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString3(value);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString3(defaultValue);
            }
          }
          function postMountWrapper$3(element2, props) {
            var node = element2;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element2, props) {
            updateWrapper$1(element2, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          var Namespaces = {
            html: HTML_NAMESPACE,
            mathml: MATH_NAMESPACE,
            svg: SVG_NAMESPACE
          };
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html2) {
            if (node.namespaceURI === Namespaces.svg) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html2.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html2;
          });
          var ELEMENT_NODE2 = 1;
          var TEXT_NODE2 = 3;
          var COMMENT_NODE2 = 8;
          var DOCUMENT_NODE2 = 9;
          var DOCUMENT_FRAGMENT_NODE2 = 11;
          var setTextContent = function(node, text2) {
            if (text2) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE2) {
                firstChild.nodeValue = text2;
                return;
              }
            }
            node.textContent = text2;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name2, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name2) && isUnitlessNumber[name2])) {
              return value + "px";
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name2) {
            return name2.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string5) {
              return string5.replace(hyphenPattern, function(_2, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name2) {
              if (warnedStyleNames.hasOwnProperty(name2) && warnedStyleNames[name2]) {
                return;
              }
              warnedStyleNames[name2] = true;
              error2("Unsupported style property %s. Did you mean %s?", name2, camelize(name2.replace(msPattern$1, "ms-")));
            };
            var warnBadVendoredStyleName = function(name2) {
              if (warnedStyleNames.hasOwnProperty(name2) && warnedStyleNames[name2]) {
                return;
              }
              warnedStyleNames[name2] = true;
              error2("Unsupported vendor-prefixed style property %s. Did you mean %s?", name2, name2.charAt(0).toUpperCase() + name2.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name2, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error2(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name2, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name2, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error2("`NaN` is an invalid value for the `%s` css style property.", name2);
            };
            var warnStyleValueIsInfinity = function(name2, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error2("`Infinity` is an invalid value for the `%s` css style property.", name2);
            };
            warnValidStyle = function(name2, value) {
              if (name2.indexOf("-") > -1) {
                warnHyphenatedStyleName(name2);
              } else if (badVendoredStyleNamePattern.test(name2)) {
                warnBadVendoredStyleName(name2);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name2, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name2, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name2, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles) {
            var style2 = node.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key in styles) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i3 = 0; i3 < longhands.length; i3++) {
                expanded[longhands[i3]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error2("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
          };
          var voidElementTags = _assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
                {
                  throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                }
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (!(props.children == null)) {
                {
                  throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
                }
              }
              if (!(typeof props.dangerouslySetInnerHTML === "object" && HTML in props.dangerouslySetInnerHTML)) {
                {
                  throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
                }
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error2("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (!(props.style == null || typeof props.style === "object")) {
              {
                throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
              }
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            "aria-hidden": 0,
            "aria-invalid": 0,
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
          function validateProperty(tagName, name2) {
            {
              if (hasOwnProperty$1.call(warnedProperties, name2) && warnedProperties[name2]) {
                return true;
              }
              if (rARIACamel.test(name2)) {
                var ariaName = "aria-" + name2.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error2("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name2);
                  warnedProperties[name2] = true;
                  return true;
                }
                if (name2 !== correctName) {
                  error2("Invalid ARIA attribute `%s`. Did you mean `%s`?", name2, correctName);
                  warnedProperties[name2] = true;
                  return true;
                }
              }
              if (rARIA.test(name2)) {
                var lowerCasedName = name2.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name2] = true;
                  return false;
                }
                if (name2 !== standardName) {
                  error2("Unknown ARIA attribute `%s`. Did you mean `%s`?", name2, standardName);
                  warnedProperties[name2] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error2("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error2("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error2("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error2("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var _hasOwnProperty = Object.prototype.hasOwnProperty;
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name2, value, eventRegistry) {
              if (_hasOwnProperty.call(warnedProperties$1, name2) && warnedProperties$1[name2]) {
                return true;
              }
              var lowerCasedName = name2.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error2("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name2] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name2)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error2("Invalid event handler property `%s`. Did you mean `%s`?", name2, registrationName);
                  warnedProperties$1[name2] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name2)) {
                  error2("Unknown event handler property `%s`. It will be ignored.", name2);
                  warnedProperties$1[name2] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name2)) {
                if (INVALID_EVENT_NAME_REGEX.test(name2)) {
                  error2("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name2);
                }
                warnedProperties$1[name2] = true;
                return true;
              }
              if (rARIA$1.test(name2) || rARIACamel$1.test(name2)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error2("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name2] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error2("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name2] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error2("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name2] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error2("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name2);
                warnedProperties$1[name2] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name2);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name2) {
                  error2("Invalid DOM property `%s`. Did you mean `%s`?", name2, standardName);
                  warnedProperties$1[name2] = true;
                  return true;
                }
              } else if (!isReserved && name2 !== lowerCasedName) {
                error2("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name2, lowerCasedName);
                warnedProperties$1[name2] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name2, value, propertyInfo, false)) {
                if (value) {
                  error2('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name2, name2, value, name2);
                } else {
                  error2('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name2, name2, value, name2, name2, name2);
                }
                warnedProperties$1[name2] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name2, value, propertyInfo, false)) {
                warnedProperties$1[name2] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error2("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name2, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name2, value);
                warnedProperties$1[name2] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error2("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error2("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var IS_REPLAYED = 1 << 4;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE2 ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (!(typeof restoreImpl === "function")) {
              {
                throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i3 = 0; i3 < queuedTargets.length; i3++) {
                restoreStateOfTarget(queuedTargets[i3]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn2, bookkeeping) {
            return fn2(bookkeeping);
          };
          var discreteUpdatesImpl = function(fn2, a3, b3, c3, d4) {
            return fn2(a3, b3, c3, d4);
          };
          var flushDiscreteUpdatesImpl = function() {
          };
          var batchedEventUpdatesImpl = batchedUpdatesImpl;
          var isInsideEventHandler = false;
          var isBatchingEventUpdates = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushDiscreteUpdatesImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn2, bookkeeping) {
            if (isInsideEventHandler) {
              return fn2(bookkeeping);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn2, bookkeeping);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function batchedEventUpdates(fn2, a3, b3) {
            if (isBatchingEventUpdates) {
              return fn2(a3, b3);
            }
            isBatchingEventUpdates = true;
            try {
              return batchedEventUpdatesImpl(fn2, a3, b3);
            } finally {
              isBatchingEventUpdates = false;
              finishEventHandler();
            }
          }
          function discreteUpdates(fn2, a3, b3, c3, d4) {
            var prevIsInsideEventHandler = isInsideEventHandler;
            isInsideEventHandler = true;
            try {
              return discreteUpdatesImpl(fn2, a3, b3, c3, d4);
            } finally {
              isInsideEventHandler = prevIsInsideEventHandler;
              if (!isInsideEventHandler) {
                finishEventHandler();
              }
            }
          }
          function flushDiscreteUpdatesIfNeeded(timeStamp) {
            {
              if (!isInsideEventHandler) {
                flushDiscreteUpdatesImpl();
              }
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            discreteUpdatesImpl = _discreteUpdatesImpl;
            flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
            batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name2, type, props) {
            switch (name2) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (!(!listener || typeof listener === "function")) {
              {
                throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
              }
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e4) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name2, func, context, a3, b3, c3, d4, e4, f5) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error3) {
              this.onError(error3);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name2, func, context, a3, b3, c3, d4, e4, f5) {
                if (!(typeof document !== "undefined")) {
                  {
                    throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                  }
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error3;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error3 = event.error;
                  didSetError = true;
                  if (error3 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error3 != null && typeof error3 === "object") {
                      try {
                        error3._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name2 ? name2 : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error3 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error3 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error3);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error3) {
              hasError = true;
              caughtError = error3;
            }
          };
          function invokeGuardedCallback(name2, func, context, a3, b3, c3, d4, e4, f5) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name2, func, context, a3, b3, c3, d4, e4, f5) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error3 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error3;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error3 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error3;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error3 = caughtError;
              hasError = false;
              caughtError = null;
              return error3;
            } else {
              {
                {
                  throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
          }
          function get2(key) {
            return key._reactInternals;
          }
          function has2(key) {
            return key._reactInternals !== void 0;
          }
          function set4(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = 0;
          var PerformedWork = 1;
          var Placement = 2;
          var Update = 4;
          var PlacementAndUpdate = 6;
          var Deletion = 8;
          var ContentReset = 16;
          var Callback = 32;
          var DidCapture = 64;
          var Ref = 128;
          var Snapshot2 = 256;
          var Passive = 512;
          var PassiveUnmountPendingDev = 8192;
          var Hydrating = 1024;
          var HydratingAndUpdate = 1028;
          var LifecycleEffectMask = 932;
          var HostEffectMask = 2047;
          var Incomplete = 2048;
          var ShouldCapture = 4096;
          var ForceUpdateForLegacySuspense = 16384;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current3 = fiber.alternate;
                if (current3 !== null) {
                  suspenseState = current3.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error2("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get2(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (!(getNearestMountedFiber(fiber) === fiber)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (!(nearestMounted !== null)) {
                {
                  throw Error("Unable to find node on an unmounted component.");
                }
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a3 = fiber;
            var b3 = alternate;
            while (true) {
              var parentA = a3.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a3 = b3 = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a3) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b3) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                {
                  {
                    throw Error("Unable to find node on an unmounted component.");
                  }
                }
              }
              if (a3.return !== b3.return) {
                a3 = parentA;
                b3 = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a3) {
                    didFindChild = true;
                    a3 = parentA;
                    b3 = parentB;
                    break;
                  }
                  if (_child === b3) {
                    didFindChild = true;
                    b3 = parentA;
                    a3 = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a3) {
                      didFindChild = true;
                      a3 = parentB;
                      b3 = parentA;
                      break;
                    }
                    if (_child === b3) {
                      didFindChild = true;
                      b3 = parentB;
                      a3 = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    {
                      throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                    }
                  }
                }
              }
              if (!(a3.alternate === b3)) {
                {
                  throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            if (!(a3.tag === HostRoot)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
            if (a3.stateNode.current === a3) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            if (!currentParent) {
              return null;
            }
            var node = currentParent;
            while (true) {
              if (node.tag === HostComponent || node.tag === HostText) {
                return node;
              } else if (node.child) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === currentParent) {
                return null;
              }
              while (!node.sibling) {
                if (!node.return || node.return === currentParent) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            if (!currentParent) {
              return null;
            }
            var node = currentParent;
            while (true) {
              if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) {
                return node;
              } else if (node.child && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === currentParent) {
                return null;
              }
              while (!node.sibling) {
                if (!node.return || node.return === currentParent) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          function doesFiberContain(parentFiber, childFiber) {
            var node = childFiber;
            var parentFiberAlternate = parentFiber.alternate;
            while (node !== null) {
              if (node === parentFiber || node === parentFiberAlternate) {
                return true;
              }
              node = node.return;
            }
            return false;
          }
          var attemptUserBlockingHydration;
          function setAttemptUserBlockingHydration(fn2) {
            attemptUserBlockingHydration = fn2;
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn2) {
            attemptContinuousHydration = fn2;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn2) {
            attemptHydrationAtCurrentPriority = fn2;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn2) {
            attemptHydrationAtPriority = fn2;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = new Map();
          var queuedPointerCaptures = new Map();
          var queuedExplicitHydrationTargets = [];
          function hasQueuedDiscreteEvents() {
            return queuedDiscreteEvents.length > 0;
          }
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isReplayableDiscreteEvent(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags: eventSystemFlags | IS_REPLAYED,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            queuedDiscreteEvents.push(queuedEvent);
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.lanePriority, function() {
                      Scheduler.unstable_runWithPriority(queuedTarget.priority, function() {
                        attemptHydrationAtCurrentPriority(nearestMounted);
                      });
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (root2.hydrate) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn !== null) {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map10) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map10.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            while (queuedDiscreteEvents.length > 0) {
              var nextDiscreteEvent = queuedDiscreteEvents[0];
              if (nextDiscreteEvent.blockedOn !== null) {
                var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);
                if (_fiber4 !== null) {
                  attemptUserBlockingHydration(_fiber4);
                }
                break;
              }
              var targetContainers = nextDiscreteEvent.targetContainers;
              while (targetContainers.length > 0) {
                var targetContainer = targetContainers[0];
                var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);
                if (nextBlockedOn !== null) {
                  nextDiscreteEvent.blockedOn = nextBlockedOn;
                  break;
                }
                targetContainers.shift();
              }
              if (nextDiscreteEvent.blockedOn === null) {
                queuedDiscreteEvents.shift();
              }
            }
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i3 = 1; i3 < queuedDiscreteEvents.length; i3++) {
                var queuedEvent = queuedDiscreteEvents[i3];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var DiscreteEvent = 0;
          var UserBlockingEvent = 1;
          var ContinuousEvent = 2;
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = new Map();
          var eventPriorities = new Map();
          var discreteEventPairsForSimpleEventPlugin = [
            "cancel",
            "cancel",
            "click",
            "click",
            "close",
            "close",
            "contextmenu",
            "contextMenu",
            "copy",
            "copy",
            "cut",
            "cut",
            "auxclick",
            "auxClick",
            "dblclick",
            "doubleClick",
            "dragend",
            "dragEnd",
            "dragstart",
            "dragStart",
            "drop",
            "drop",
            "focusin",
            "focus",
            "focusout",
            "blur",
            "input",
            "input",
            "invalid",
            "invalid",
            "keydown",
            "keyDown",
            "keypress",
            "keyPress",
            "keyup",
            "keyUp",
            "mousedown",
            "mouseDown",
            "mouseup",
            "mouseUp",
            "paste",
            "paste",
            "pause",
            "pause",
            "play",
            "play",
            "pointercancel",
            "pointerCancel",
            "pointerdown",
            "pointerDown",
            "pointerup",
            "pointerUp",
            "ratechange",
            "rateChange",
            "reset",
            "reset",
            "seeked",
            "seeked",
            "submit",
            "submit",
            "touchcancel",
            "touchCancel",
            "touchend",
            "touchEnd",
            "touchstart",
            "touchStart",
            "volumechange",
            "volumeChange"
          ];
          var otherDiscreteEvents = ["change", "selectionchange", "textInput", "compositionstart", "compositionend", "compositionupdate"];
          var userBlockingPairsForSimpleEventPlugin = ["drag", "drag", "dragenter", "dragEnter", "dragexit", "dragExit", "dragleave", "dragLeave", "dragover", "dragOver", "mousemove", "mouseMove", "mouseout", "mouseOut", "mouseover", "mouseOver", "pointermove", "pointerMove", "pointerout", "pointerOut", "pointerover", "pointerOver", "scroll", "scroll", "toggle", "toggle", "touchmove", "touchMove", "wheel", "wheel"];
          var continuousPairsForSimpleEventPlugin = ["abort", "abort", ANIMATION_END, "animationEnd", ANIMATION_ITERATION, "animationIteration", ANIMATION_START, "animationStart", "canplay", "canPlay", "canplaythrough", "canPlayThrough", "durationchange", "durationChange", "emptied", "emptied", "encrypted", "encrypted", "ended", "ended", "error", "error", "gotpointercapture", "gotPointerCapture", "load", "load", "loadeddata", "loadedData", "loadedmetadata", "loadedMetadata", "loadstart", "loadStart", "lostpointercapture", "lostPointerCapture", "playing", "playing", "progress", "progress", "seeking", "seeking", "stalled", "stalled", "suspend", "suspend", "timeupdate", "timeUpdate", TRANSITION_END, "transitionEnd", "waiting", "waiting"];
          function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
            for (var i3 = 0; i3 < eventTypes.length; i3 += 2) {
              var topEvent = eventTypes[i3];
              var event = eventTypes[i3 + 1];
              var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
              var reactName = "on" + capitalizedEvent;
              eventPriorities.set(topEvent, priority);
              topLevelEventsToReactNames.set(topEvent, reactName);
              registerTwoPhaseEvent(reactName, [topEvent]);
            }
          }
          function setEventPriorities(eventTypes, priority) {
            for (var i3 = 0; i3 < eventTypes.length; i3++) {
              eventPriorities.set(eventTypes[i3], priority);
            }
          }
          function getEventPriorityForPluginSystem(domEventName) {
            var priority = eventPriorities.get(domEventName);
            return priority === void 0 ? ContinuousEvent : priority;
          }
          function registerSimpleEvents() {
            registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
            registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
            registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
            setEventPriorities(otherDiscreteEvents, DiscreteEvent);
          }
          var Scheduler_now = Scheduler.unstable_now;
          {
            if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
              {
                throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
              }
            }
          }
          var ImmediatePriority = 99;
          var UserBlockingPriority = 98;
          var NormalPriority = 97;
          var LowPriority = 96;
          var IdlePriority = 95;
          var NoPriority = 90;
          var initialTimeMs = Scheduler_now();
          var SyncLanePriority = 15;
          var SyncBatchedLanePriority = 14;
          var InputDiscreteHydrationLanePriority = 13;
          var InputDiscreteLanePriority = 12;
          var InputContinuousHydrationLanePriority = 11;
          var InputContinuousLanePriority = 10;
          var DefaultHydrationLanePriority = 9;
          var DefaultLanePriority = 8;
          var TransitionHydrationPriority = 7;
          var TransitionPriority = 6;
          var RetryLanePriority = 5;
          var SelectiveHydrationLanePriority = 4;
          var IdleHydrationLanePriority = 3;
          var IdleLanePriority = 2;
          var OffscreenLanePriority = 1;
          var NoLanePriority = 0;
          var TotalLanes = 31;
          var NoLanes = 0;
          var NoLane = 0;
          var SyncLane = 1;
          var SyncBatchedLane = 2;
          var InputDiscreteHydrationLane = 4;
          var InputDiscreteLanes = 24;
          var InputContinuousHydrationLane = 32;
          var InputContinuousLanes = 192;
          var DefaultHydrationLane = 256;
          var DefaultLanes = 3584;
          var TransitionHydrationLane = 4096;
          var TransitionLanes = 4186112;
          var RetryLanes = 62914560;
          var SomeRetryLane = 33554432;
          var SelectiveHydrationLane = 67108864;
          var NonIdleLanes = 134217727;
          var IdleHydrationLane = 134217728;
          var IdleLanes = 805306368;
          var OffscreenLane = 1073741824;
          var NoTimestamp = -1;
          function setCurrentUpdateLanePriority(newLanePriority) {
          }
          var return_highestLanePriority = DefaultLanePriority;
          function getHighestPriorityLanes(lanes) {
            if ((SyncLane & lanes) !== NoLanes) {
              return_highestLanePriority = SyncLanePriority;
              return SyncLane;
            }
            if ((SyncBatchedLane & lanes) !== NoLanes) {
              return_highestLanePriority = SyncBatchedLanePriority;
              return SyncBatchedLane;
            }
            if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
              return_highestLanePriority = InputDiscreteHydrationLanePriority;
              return InputDiscreteHydrationLane;
            }
            var inputDiscreteLanes = InputDiscreteLanes & lanes;
            if (inputDiscreteLanes !== NoLanes) {
              return_highestLanePriority = InputDiscreteLanePriority;
              return inputDiscreteLanes;
            }
            if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
              return_highestLanePriority = InputContinuousHydrationLanePriority;
              return InputContinuousHydrationLane;
            }
            var inputContinuousLanes = InputContinuousLanes & lanes;
            if (inputContinuousLanes !== NoLanes) {
              return_highestLanePriority = InputContinuousLanePriority;
              return inputContinuousLanes;
            }
            if ((lanes & DefaultHydrationLane) !== NoLanes) {
              return_highestLanePriority = DefaultHydrationLanePriority;
              return DefaultHydrationLane;
            }
            var defaultLanes = DefaultLanes & lanes;
            if (defaultLanes !== NoLanes) {
              return_highestLanePriority = DefaultLanePriority;
              return defaultLanes;
            }
            if ((lanes & TransitionHydrationLane) !== NoLanes) {
              return_highestLanePriority = TransitionHydrationPriority;
              return TransitionHydrationLane;
            }
            var transitionLanes = TransitionLanes & lanes;
            if (transitionLanes !== NoLanes) {
              return_highestLanePriority = TransitionPriority;
              return transitionLanes;
            }
            var retryLanes = RetryLanes & lanes;
            if (retryLanes !== NoLanes) {
              return_highestLanePriority = RetryLanePriority;
              return retryLanes;
            }
            if (lanes & SelectiveHydrationLane) {
              return_highestLanePriority = SelectiveHydrationLanePriority;
              return SelectiveHydrationLane;
            }
            if ((lanes & IdleHydrationLane) !== NoLanes) {
              return_highestLanePriority = IdleHydrationLanePriority;
              return IdleHydrationLane;
            }
            var idleLanes = IdleLanes & lanes;
            if (idleLanes !== NoLanes) {
              return_highestLanePriority = IdleLanePriority;
              return idleLanes;
            }
            if ((OffscreenLane & lanes) !== NoLanes) {
              return_highestLanePriority = OffscreenLanePriority;
              return OffscreenLane;
            }
            {
              error2("Should have found matching lanes. This is a bug in React.");
            }
            return_highestLanePriority = DefaultLanePriority;
            return lanes;
          }
          function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
            switch (schedulerPriorityLevel) {
              case ImmediatePriority:
                return SyncLanePriority;
              case UserBlockingPriority:
                return InputContinuousLanePriority;
              case NormalPriority:
              case LowPriority:
                return DefaultLanePriority;
              case IdlePriority:
                return IdleLanePriority;
              default:
                return NoLanePriority;
            }
          }
          function lanePriorityToSchedulerPriority(lanePriority) {
            switch (lanePriority) {
              case SyncLanePriority:
              case SyncBatchedLanePriority:
                return ImmediatePriority;
              case InputDiscreteHydrationLanePriority:
              case InputDiscreteLanePriority:
              case InputContinuousHydrationLanePriority:
              case InputContinuousLanePriority:
                return UserBlockingPriority;
              case DefaultHydrationLanePriority:
              case DefaultLanePriority:
              case TransitionHydrationPriority:
              case TransitionPriority:
              case SelectiveHydrationLanePriority:
              case RetryLanePriority:
                return NormalPriority;
              case IdleHydrationLanePriority:
              case IdleLanePriority:
              case OffscreenLanePriority:
                return IdlePriority;
              case NoLanePriority:
                return NoPriority;
              default: {
                {
                  throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
                }
              }
            }
          }
          function getNextLanes(root2, wipLanes) {
            var pendingLanes = root2.pendingLanes;
            if (pendingLanes === NoLanes) {
              return_highestLanePriority = NoLanePriority;
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var nextLanePriority = NoLanePriority;
            var expiredLanes = root2.expiredLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            if (expiredLanes !== NoLanes) {
              nextLanes = expiredLanes;
              nextLanePriority = return_highestLanePriority = SyncLanePriority;
            } else {
              var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
              if (nonIdlePendingLanes !== NoLanes) {
                var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
                if (nonIdleUnblockedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
                  nextLanePriority = return_highestLanePriority;
                } else {
                  var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                  if (nonIdlePingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                    nextLanePriority = return_highestLanePriority;
                  }
                }
              } else {
                var unblockedLanes = pendingLanes & ~suspendedLanes;
                if (unblockedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(unblockedLanes);
                  nextLanePriority = return_highestLanePriority;
                } else {
                  if (pingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(pingedLanes);
                    nextLanePriority = return_highestLanePriority;
                  }
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes);
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
              getHighestPriorityLanes(wipLanes);
              var wipLanePriority = return_highestLanePriority;
              if (nextLanePriority <= wipLanePriority) {
                return wipLanes;
              } else {
                return_highestLanePriority = nextLanePriority;
              }
            }
            var entangledLanes = root2.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root2.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index2;
                nextLanes |= entanglements[index2];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root2, lanes) {
            var eventTimes = root2.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var eventTime = eventTimes[index2];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            getHighestPriorityLanes(lane);
            var priority = return_highestLanePriority;
            if (priority >= InputContinuousLanePriority) {
              return currentTime + 250;
            } else if (priority >= TransitionPriority) {
              return currentTime + 5e3;
            } else {
              return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root2, currentTime) {
            var pendingLanes = root2.pendingLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var expirationTime = expirationTimes[index2];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root2.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getLanesToRetrySynchronouslyOnError(root2) {
            var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function returnNextLanesPriority() {
            return return_highestLanePriority;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function findUpdateLane(lanePriority, wipLanes) {
            switch (lanePriority) {
              case NoLanePriority:
                break;
              case SyncLanePriority:
                return SyncLane;
              case SyncBatchedLanePriority:
                return SyncBatchedLane;
              case InputDiscreteLanePriority: {
                var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);
                if (_lane === NoLane) {
                  return findUpdateLane(InputContinuousLanePriority, wipLanes);
                }
                return _lane;
              }
              case InputContinuousLanePriority: {
                var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);
                if (_lane2 === NoLane) {
                  return findUpdateLane(DefaultLanePriority, wipLanes);
                }
                return _lane2;
              }
              case DefaultLanePriority: {
                var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);
                if (_lane3 === NoLane) {
                  _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);
                  if (_lane3 === NoLane) {
                    _lane3 = pickArbitraryLane(DefaultLanes);
                  }
                }
                return _lane3;
              }
              case TransitionPriority:
              case RetryLanePriority:
                break;
              case IdleLanePriority:
                var lane = pickArbitraryLane(IdleLanes & ~wipLanes);
                if (lane === NoLane) {
                  lane = pickArbitraryLane(IdleLanes);
                }
                return lane;
            }
            {
              {
                throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
              }
            }
          }
          function findTransitionLane(wipLanes, pendingLanes) {
            var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);
            if (lane === NoLane) {
              lane = pickArbitraryLane(TransitionLanes & ~wipLanes);
              if (lane === NoLane) {
                lane = pickArbitraryLane(TransitionLanes);
              }
            }
            return lane;
          }
          function findRetryLane(wipLanes) {
            var lane = pickArbitraryLane(RetryLanes & ~wipLanes);
            if (lane === NoLane) {
              lane = pickArbitraryLane(RetryLanes);
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function getLowestPriorityLane(lanes) {
            var index2 = 31 - clz32(lanes);
            return index2 < 0 ? NoLanes : 1 << index2;
          }
          function getEqualOrHigherPriorityLanes(lanes) {
            return (getLowestPriorityLane(lanes) << 1) - 1;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a3, b3) {
            return (a3 & b3) !== NoLanes;
          }
          function isSubsetOfLanes(set5, subset) {
            return (set5 & subset) === subset;
          }
          function mergeLanes(a3, b3) {
            return a3 | b3;
          }
          function removeLanes(set5, subset) {
            return set5 & ~subset;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a3, b3) {
            return a3 !== NoLane && a3 < b3 ? a3 : b3;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i3 = 0; i3 < TotalLanes; i3++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root2, updateLane, eventTime) {
            root2.pendingLanes |= updateLane;
            var higherPriorityLanes = updateLane - 1;
            root2.suspendedLanes &= higherPriorityLanes;
            root2.pingedLanes &= higherPriorityLanes;
            var eventTimes = root2.eventTimes;
            var index2 = laneToIndex(updateLane);
            eventTimes[index2] = eventTime;
          }
          function markRootSuspended(root2, suspendedLanes) {
            root2.suspendedLanes |= suspendedLanes;
            root2.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root2, pingedLanes, eventTime) {
            root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
          }
          function markDiscreteUpdatesExpired(root2) {
            root2.expiredLanes |= InputDiscreteLanes & root2.pendingLanes;
          }
          function hasDiscreteLanes(lanes) {
            return (lanes & InputDiscreteLanes) !== NoLanes;
          }
          function markRootMutableRead(root2, updateLane) {
            root2.mutableReadLanes |= updateLane & root2.pendingLanes;
          }
          function markRootFinished(root2, remainingLanes) {
            var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
            root2.pendingLanes = remainingLanes;
            root2.suspendedLanes = 0;
            root2.pingedLanes = 0;
            root2.expiredLanes &= remainingLanes;
            root2.mutableReadLanes &= remainingLanes;
            root2.entangledLanes &= remainingLanes;
            var entanglements = root2.entanglements;
            var eventTimes = root2.eventTimes;
            var expirationTimes = root2.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] = NoLanes;
              eventTimes[index2] = NoTimestamp;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root2, entangledLanes) {
            root2.entangledLanes |= entangledLanes;
            var entanglements = root2.entanglements;
            var lanes = entangledLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] |= entangledLanes;
              lanes &= ~lane;
            }
          }
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(lanes) {
            if (lanes === 0) {
              return 32;
            }
            return 31 - (log(lanes) / LN2 | 0) | 0;
          }
          var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriorityForPluginSystem(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEvent:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case UserBlockingEvent:
                listenerWrapper = dispatchUserBlockingUpdate;
                break;
              case ContinuousEvent:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            {
              flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
            }
            discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
          }
          function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
            {
              runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            var allowReplay = true;
            {
              allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
            }
            if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
              queueDiscreteEvent(null, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              return;
            }
            var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              if (allowReplay) {
                clearIfContinuousEvent(domEventName, nativeEvent);
              }
              return;
            }
            if (allowReplay) {
              if (isReplayableDiscreteEvent(domEventName)) {
                queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
                return;
              }
              if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
                return;
              }
              clearIfContinuousEvent(domEventName, nativeEvent);
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (root2.hydrate) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer);
            return null;
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root) {
              return root.value;
            }
            return root.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize2 = Interface[_propName];
                if (normalize2) {
                  this[_propName] = normalize2(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            _assign(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              persist: function() {
              },
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = _assign({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = _assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = _assign({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = _assign({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = _assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = _assign({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = _assign({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = _assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = _assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = _assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = _assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = _assign({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
            },
            deltaZ: 0,
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element2 = document.createElement("div");
              element2.setAttribute(eventName, "return;");
              isSupported = typeof element2[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state2 = node._wrapperState;
            if (!state2 || !state2.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc3 = nativeEventTarget.ownerDocument;
              if (doc3) {
                win = doc3.defaultView || doc3.parentWindow;
              } else {
                win = window;
              }
            }
            var from3;
            var to2;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from3 = targetInst;
              to2 = _related ? getClosestInstanceFromNode(_related) : null;
              if (to2 !== null) {
                var nearestMounted = getNearestMountedFiber(to2);
                if (to2 !== nearestMounted || to2.tag !== HostComponent && to2.tag !== HostText) {
                  to2 = null;
                }
              }
            } else {
              from3 = null;
              to2 = targetInst;
            }
            if (from3 === to2) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from3 == null ? win : getNodeFromInstance(from3);
            var toNode = to2 == null ? win : getNodeFromInstance(to2);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from3, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to2, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from3, to2);
          }
          function is(x3, y2) {
            return x3 === y2 && (x3 !== 0 || 1 / x3 === 1 / y2) || x3 !== x3 && y2 !== y2;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i3 = 0; i3 < keysA.length; i3++) {
              if (!hasOwnProperty$2.call(objB, keysA[i3]) || !objectIs(objA[keysA[i3]], objB[keysA[i3]])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root2, offset) {
            var node = getLeafNode(root2);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE2) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e4) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length3 = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next2 = null;
                while (true) {
                  if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE2)) {
                    start = length3 + anchorOffset;
                  }
                  if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE2)) {
                    end = length3 + focusOffset;
                  }
                  if (node.nodeType === TEXT_NODE2) {
                    length3 += node.nodeValue.length;
                  }
                  if ((next2 = node.firstChild) === null) {
                    break;
                  }
                  parentNode = node;
                  node = next2;
                }
                while (true) {
                  if (node === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length3;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length3;
                  }
                  if ((next2 = node.nextSibling) !== null) {
                    break;
                  }
                  node = parentNode;
                  parentNode = node.parentNode;
                }
                node = next2;
              }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node, offsets) {
            var doc3 = node.ownerDocument || document;
            var win = doc3 && doc3.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length3 = node.textContent.length;
            var start = Math.min(offsets.start, length3);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length3);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc3.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE2;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element2 = getActiveElement();
            while (element2 instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element2)) {
                win = element2.contentWindow;
              } else {
                return element2;
              }
              element2 = getActiveElement(win.document);
            }
            return element2;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE2) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i3 = 0; i3 < ancestors.length; i3++) {
                var info = ancestors[i3];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE2 ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc3 = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc3)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i3 = dispatchListeners.length - 1; i3 >= 0; i3--) {
                var _dispatchListeners$i = dispatchListeners[i3], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i3 = 0; i3 < dispatchQueue.length; i3++) {
              var _dispatchQueue$i = dispatchQueue[i3], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            {
              if (rootContainerElement[listeningMarker]) {
                return;
              }
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (!nonDelegatedEvents.has(domEventName)) {
                  listenToNativeEvent(domEventName, false, rootContainerElement, null);
                }
                listenToNativeEvent(domEventName, true, rootContainerElement, null);
              });
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
            var eventSystemFlags = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
            var target = rootContainerElement;
            if (domEventName === "selectionchange" && rootContainerElement.nodeType !== DOCUMENT_NODE2) {
              target = rootContainerElement.ownerDocument;
            }
            if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
              if (domEventName !== "scroll") {
                return;
              }
              eventSystemFlags |= IS_NON_DELEGATED;
              target = targetElement;
            }
            var listenerSet = getEventListenerSet(target);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              if (isCapturePhaseListener) {
                eventSystemFlags |= IS_CAPTURE_PHASE;
              }
              addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE2 && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop:
                  while (true) {
                    if (node === null) {
                      return;
                    }
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container = node.stateNode.containerInfo;
                      if (isMatchingRootContainer(container, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container !== null) {
                        var parentNode = getClosestInstanceFromNode(container);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container = container.parentNode;
                      }
                    }
                    node = node.return;
                  }
              }
            }
            batchedEventUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from3, to2) {
            var common = from3 && to2 ? getLowestCommonAncestor(from3, to2) : null;
            if (from3 !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from3, common, false);
            }
            if (to2 !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to2, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var HTML_NAMESPACE$1 = Namespaces.html;
          var warnedUnknownTags;
          var suppressHydrationWarning;
          var validatePropertiesInDevelopment;
          var warnForTextDifference;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeMarkupForTextOrAttribute;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              dialog: true,
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
            var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
            normalizeMarkupForTextOrAttribute = function(markup) {
              var markupString = typeof markup === "string" ? markup : "" + markup;
              return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
            };
            warnForTextDifference = function(serverText, clientText) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
              var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
              if (normalizedServerText === normalizedClientText) {
                return;
              }
              didWarnInvalidHydration = true;
              error2('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
            };
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error2("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name2) {
                names.push(name2);
              });
              error2("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error2("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error2("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html2) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html2;
              return testElement.innerHTML;
            };
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE2 ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i3 = 0; i3 < updatePayload.length; i3 += 2) {
              var propKey = updatePayload[i3];
              var propValue = updatePayload[i3 + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement5(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE$1) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE$1) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error2("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE$1) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error2("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text2, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text2);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i3 = 0; i3 < mediaEventTypes.length; i3++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i3], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$3(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "option":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$3(domElement, lastRawProps);
                nextProps = getHostProps$3(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else if (typeof nextProp === "object" && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) {
                nextProp.toString();
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i3 = 0; i3 < mediaEventTypes.length; i3++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i3], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name2 = attributes[_i].name.toLowerCase();
                switch (name2) {
                  case "data-reactroot":
                    break;
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (!suppressHydrationWarning) {
                      warnForTextDifference(domElement.textContent, nextProp);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (!suppressHydrationWarning) {
                      warnForTextDifference(domElement.textContent, nextProp);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = getPropertyInfo(propKey);
                if (suppressHydrationWarning)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE$1) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE$1) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
                warnForExtraAttributes(extraAttributeNames);
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text2) {
            var isDifferent = textNode.nodeValue !== text2;
            return isDifferent;
          }
          function warnForUnmatchedText(textNode, text2) {
            {
              warnForTextDifference(textNode.nodeValue, text2);
            }
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error2("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error2('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error2("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text2) {
            {
              if (text2 === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error2('Expected server HTML to contain a matching text node for "%s" in <%s>.', text2, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error2("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error2("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error2("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1;
          {
            SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          }
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function shouldAutoFocusHostComponent(type, props) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
            }
            return false;
          }
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE2:
              case DOCUMENT_FRAGMENT_NODE2: {
                type = nodeType === DOCUMENT_NODE2 ? "#document" : "#fragment";
                var root2 = rootContainerInstance.documentElement;
                namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE2 ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string5 = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string5, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement5(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            return shouldAutoFocusHostComponent(type, props);
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string5 = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string5, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "option" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text2, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text2, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text2, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            if (shouldAutoFocusHostComponent(type, newProps)) {
              domElement.focus();
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateFiberProps(domElement, newProps);
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE2) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE2) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE2) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text2) {
            textInstance.nodeValue = text2;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE2) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE2) {
              var body = container.body;
              if (body != null) {
                body.textContent = "";
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE2 || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text2) {
            if (text2 === "" || instance.nodeType !== TEXT_NODE2) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE2 || nodeType === TEXT_NODE2) {
                break;
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            return diffHydratedProperties(instance, type, props, parentNamespace);
          }
          function hydrateTextInstance(textInstance, text2, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            return diffHydratedText(textInstance, text2);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE2) {
                var data2 = node.data;
                if (data2 === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data2 === SUSPENSE_START_DATA || data2 === SUSPENSE_FALLBACK_START_DATA || data2 === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE2) {
                var data2 = node.data;
                if (data2 === SUSPENSE_START_DATA || data2 === SUSPENSE_FALLBACK_START_DATA || data2 === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data2 === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text2) {
            {
              warnForUnmatchedText(textInstance, text2);
            }
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text2) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForUnmatchedText(textInstance, text2);
            }
          }
          function didNotHydrateContainerInstance(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE2) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE2)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              if (instance.nodeType === ELEMENT_NODE2) {
                warnForDeletedHydratableElement(parentInstance, instance);
              } else if (instance.nodeType === COMMENT_NODE2)
                ;
              else {
                warnForDeletedHydratableText(parentInstance, instance);
              }
            }
          }
          function didNotFindHydratableContainerInstance(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableContainerTextInstance(parentContainer, text2) {
            {
              warnForInsertedHydratedText(parentContainer, text2);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedElement(parentInstance, type);
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text2) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedText(parentInstance, text2);
            }
          }
          function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true)
              ;
          }
          var clientId = 0;
          function makeClientIdInDEV(warnOnAccessInDEV) {
            var id2 = "r:" + (clientId++).toString(36);
            return {
              toString: function() {
                warnOnAccessInDEV();
                return id2;
              },
              valueOf: function() {
                warnOnAccessInDEV();
                return id2;
              }
            };
          }
          function isOpaqueHydratingObject(value) {
            return value !== null && typeof value === "object" && value.$$typeof === REACT_OPAQUE_ID_TYPE;
          }
          function makeOpaqueHydratingObject(attemptToReadValue) {
            return {
              $$typeof: REACT_OPAQUE_ID_TYPE,
              toString: attemptToReadValue,
              valueOf: attemptToReadValue
            };
          }
          function preparePortalMount(portalInstance) {
            {
              listenToAllSupportedEvents(portalInstance);
            }
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            {
              {
                throw Error("getNodeFromInstance: Invalid argument.");
              }
            }
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element2) {
            {
              if (element2) {
                var owner = element2._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element2.type, element2._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values2, location2, componentName, element2) {
            {
              var has3 = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has3(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element2);
                    error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element2);
                    error2("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index < 0) {
              {
                error2("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error2("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          function push2(cursor, value, fiber) {
            index++;
            valueStack[index] = cursor.current;
            {
              fiberStack[index] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name2 = getComponentName(type) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name2);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (!(contextStackCursor.current === emptyContextObject)) {
                {
                  throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              push2(contextStackCursor, context, fiber);
              push2(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentName(type) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error2("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  {
                    throw Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                  }
                }
              }
              {
                var name2 = getComponentName(type) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name2);
              }
              return _assign({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push2(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push2(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                {
                  throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push2(contextStackCursor, mergedContext, workInProgress2);
                push2(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push2(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
                {
                  throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component = node.type;
                    if (isContextProvider(Component)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              {
                {
                  throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
          }
          var LegacyRoot = 0;
          var BlockingRoot = 1;
          var ConcurrentRoot = 2;
          var rendererID = null;
          var injectedHook = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error2("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error2("React instrumentation encountered an error: %s.", err);
              }
            }
            return true;
          }
          function onScheduleRoot(root2, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root2, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error2("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root2, priorityLevel) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root2.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  injectedHook.onCommitFiberRoot(rendererID, root2, priorityLevel, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error2("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error2("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now$1 = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
          {
            if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
              {
                throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
              }
            }
          }
          var fakeCallbackNode = {};
          var ImmediatePriority$1 = 99;
          var UserBlockingPriority$2 = 98;
          var NormalPriority$1 = 97;
          var LowPriority$1 = 96;
          var IdlePriority$1 = 95;
          var NoPriority$1 = 90;
          var shouldYield = Scheduler_shouldYield;
          var requestPaint = Scheduler_requestPaint !== void 0 ? Scheduler_requestPaint : function() {
          };
          var syncQueue = null;
          var immediateQueueCallbackNode = null;
          var isFlushingSyncQueue = false;
          var initialTimeMs$1 = Scheduler_now$1();
          var now = initialTimeMs$1 < 1e4 ? Scheduler_now$1 : function() {
            return Scheduler_now$1() - initialTimeMs$1;
          };
          function getCurrentPriorityLevel() {
            switch (Scheduler_getCurrentPriorityLevel()) {
              case Scheduler_ImmediatePriority:
                return ImmediatePriority$1;
              case Scheduler_UserBlockingPriority:
                return UserBlockingPriority$2;
              case Scheduler_NormalPriority:
                return NormalPriority$1;
              case Scheduler_LowPriority:
                return LowPriority$1;
              case Scheduler_IdlePriority:
                return IdlePriority$1;
              default: {
                {
                  throw Error("Unknown priority level.");
                }
              }
            }
          }
          function reactPriorityToSchedulerPriority(reactPriorityLevel) {
            switch (reactPriorityLevel) {
              case ImmediatePriority$1:
                return Scheduler_ImmediatePriority;
              case UserBlockingPriority$2:
                return Scheduler_UserBlockingPriority;
              case NormalPriority$1:
                return Scheduler_NormalPriority;
              case LowPriority$1:
                return Scheduler_LowPriority;
              case IdlePriority$1:
                return Scheduler_IdlePriority;
              default: {
                {
                  throw Error("Unknown priority level.");
                }
              }
            }
          }
          function runWithPriority$1(reactPriorityLevel, fn2) {
            var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
            return Scheduler_runWithPriority(priorityLevel, fn2);
          }
          function scheduleCallback(reactPriorityLevel, callback, options2) {
            var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
            return Scheduler_scheduleCallback(priorityLevel, callback, options2);
          }
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
              immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
            } else {
              syncQueue.push(callback);
            }
            return fakeCallbackNode;
          }
          function cancelCallback(callbackNode) {
            if (callbackNode !== fakeCallbackNode) {
              Scheduler_cancelCallback(callbackNode);
            }
          }
          function flushSyncCallbackQueue() {
            if (immediateQueueCallbackNode !== null) {
              var node = immediateQueueCallbackNode;
              immediateQueueCallbackNode = null;
              Scheduler_cancelCallback(node);
            }
            flushSyncCallbackQueueImpl();
          }
          function flushSyncCallbackQueueImpl() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i3 = 0;
              {
                try {
                  var _isSync2 = true;
                  var _queue = syncQueue;
                  runWithPriority$1(ImmediatePriority$1, function() {
                    for (; i3 < _queue.length; i3++) {
                      var callback = _queue[i3];
                      do {
                        callback = callback(_isSync2);
                      } while (callback !== null);
                    }
                  });
                  syncQueue = null;
                } catch (error3) {
                  if (syncQueue !== null) {
                    syncQueue = syncQueue.slice(i3 + 1);
                  }
                  Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                  throw error3;
                } finally {
                  isFlushingSyncQueue = false;
                }
              }
            }
          }
          var ReactVersion = "17.0.2";
          var NoMode = 0;
          var StrictMode = 1;
          var BlockingMode = 2;
          var ConcurrentMode = 4;
          var ProfileMode = 8;
          var DebugTracingMode = 16;
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = 0;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set5) {
              var array3 = [];
              set5.forEach(function(value) {
                array3.push(value);
              });
              return array3.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error2("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error2("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error2("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = new Map();
            var didWarnAboutLegacyContext = new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error2("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error2("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = new Map();
            };
          }
          function resolveDefaultProps(Component, baseProps) {
            if (Component && Component.defaultProps) {
              var props = _assign({}, baseProps);
              var defaultProps = Component.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var MAX_SIGNED_31_BIT_INT = 1073741823;
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastContextWithAllBitsObserved = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastContextWithAllBitsObserved = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, nextValue) {
            var context = providerFiber.type._context;
            {
              push2(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error2("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            var context = providerFiber.type._context;
            {
              context._currentValue = currentValue;
            }
          }
          function calculateChangedBits(context, newValue, oldValue) {
            if (objectIs(oldValue, newValue)) {
              return 0;
            } else {
              var changedBits = typeof context._calculateChangedBits === "function" ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
              {
                if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
                  error2("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
                }
              }
              return changedBits | 0;
            }
          }
          function scheduleWorkOnParentPath(parent, renderLanes2) {
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              } else {
                break;
              }
              node = node.return;
            }
          }
          function propagateContextChange(workInProgress2, context, changedBits, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                    if (fiber.tag === ClassComponent) {
                      var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes2));
                      update.tag = ForceUpdate;
                      enqueueUpdate(fiber, update);
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleWorkOnParentPath(fiber.return, renderLanes2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastContextWithAllBitsObserved = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              var firstContext = dependencies.firstContext;
              if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                  markWorkInProgressReceivedUpdate();
                }
                dependencies.firstContext = null;
              }
            }
          }
          function readContext(context, observedBits) {
            {
              if (isDisallowedContextReadInDEV) {
                error2("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            if (lastContextWithAllBitsObserved === context)
              ;
            else if (observedBits === false || observedBits === 0)
              ;
            else {
              var resolvedObservedBits;
              if (typeof observedBits !== "number" || observedBits === MAX_SIGNED_31_BIT_INT) {
                lastContextWithAllBitsObserved = context;
                resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
              } else {
                resolvedObservedBits = observedBits;
              }
              var contextItem = {
                context,
                observedBits: resolvedObservedBits,
                next: null
              };
              if (lastContextDependency === null) {
                if (!(currentlyRenderingFiber !== null)) {
                  {
                    throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                  }
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem,
                  responders: null
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return context._currentValue;
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current3, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current3.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            var pending = sharedQueue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            sharedQueue.pending = update;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error2("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current3 = workInProgress2.alternate;
            if (current3 !== null) {
              var currentQueue = current3.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictMode) {
                      disableLogs();
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        reenableLogs();
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictMode) {
                      disableLogs();
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        reenableLogs();
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return _assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current3 = workInProgress2.alternate;
              if (current3 !== null) {
                var currentQueue = current3.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (!(typeof callback === "function")) {
              {
                throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
              }
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i3 = 0; i3 < effects.length; i3++) {
                var effect = effects[i3];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var isArray4 = Array.isArray;
          var emptyRefsObject = new React10.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = new Set();
            didWarnAboutUninitializedState = new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
            didWarnAboutDirectlyAssigningPropsToState = new Set();
            didWarnAboutUndefinedDerivedState = new Set();
            didWarnAboutContextTypeAndContextTypes = new Set();
            didWarnAboutInvalidateContextType = new Set();
            var didWarnOnInvalidCallback = new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error2("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentName(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error2("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                {
                  {
                    throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
                  }
                }
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  reenableLogs();
                }
              }
            }
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : _assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get2(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get2(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get2(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              {
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    reenableLogs();
                  }
                }
              }
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (shouldUpdate === void 0) {
                  error2("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name2 = getComponentName(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error2("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name2);
                } else {
                  error2("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name2);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error2("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name2);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error2("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name2);
              }
              if (instance.propTypes) {
                error2("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name2);
              }
              if (instance.contextType) {
                error2("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name2);
              }
              {
                if (instance.contextTypes) {
                  error2("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name2);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error2("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name2);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error2("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name2);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error2("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error2("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name2);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error2("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name2);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error2("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name2);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error2("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name2);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error2("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name2, name2);
              }
              if (instance.defaultProps) {
                error2("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name2, name2);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error2("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error2("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name2);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error2("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name2);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error2("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name2);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray4(_state))) {
                error2("%s.state: must be set to an object or null", name2);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error2("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name2);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set4(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error2("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  new ctor(props, context);
                } finally {
                  reenableLogs();
                }
              }
            }
            var instance = new ctor(props, context);
            var state2 = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state2 === null) {
                var componentName = getComponentName(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error2("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentName(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error2("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error2("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress2.type) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentName(workInProgress2.type) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error2("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentName(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error2("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.flags |= Update;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current3, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current3, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) {
                  workInProgress2.flags |= Snapshot2;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot2;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) {
                  workInProgress2.flags |= Snapshot2;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (!(typeof child._store === "object")) {
                {
                  throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              child._store.validated = true;
              var componentName = getComponentName(returnFiber.type) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error2('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          var isArray$1 = Array.isArray;
          function coerceRef(returnFiber, current3, element2) {
            var mixedRef = element2.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && !(element2._owner && element2._self && element2._owner.stateNode !== element2._self)) {
                  var componentName = getComponentName(returnFiber.type) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error2('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element2._owner) {
                var owner = element2._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (!(ownerFiber.tag === ClassComponent)) {
                    {
                      throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                    }
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  {
                    throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var stringRef = "" + mixedRef;
                if (current3 !== null && current3.ref !== null && typeof current3.ref === "function" && current3.ref._stringRef === stringRef) {
                  return current3.ref;
                }
                var ref = function(value) {
                  var refs = inst.refs;
                  if (refs === emptyRefsObject) {
                    refs = inst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (!(typeof mixedRef === "string")) {
                  {
                    throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                  }
                }
                if (!element2._owner) {
                  {
                    throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                  }
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            if (returnFiber.type !== "textarea") {
              {
                {
                  throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + "). If you meant to render a collection of children, use an array instead.");
                }
              }
            }
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentName(returnFiber.type) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error2("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var last2 = returnFiber.lastEffect;
              if (last2 !== null) {
                last2.nextEffect = childToDelete;
                returnFiber.lastEffect = childToDelete;
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
              }
              childToDelete.nextEffect = null;
              childToDelete.flags = Deletion;
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                return lastPlacedIndex;
              }
              var current3 = newFiber.alternate;
              if (current3 !== null) {
                var oldIndex = current3.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags = Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags = Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags = Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current3, textContent, lanes) {
              if (current3 === null || current3.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current3, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current3, element2, lanes) {
              if (current3 !== null) {
                if (current3.elementType === element2.type || isCompatibleFamilyForHotReloading(current3, element2)) {
                  var existing = useFiber(current3, element2.props);
                  existing.ref = coerceRef(returnFiber, current3, element2);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element2._source;
                    existing._debugOwner = element2._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element2, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current3, element2);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current3, portal, lanes) {
              if (current3 === null || current3.tag !== HostPortal || current3.stateNode.containerInfo !== portal.containerInfo || current3.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current3, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current3, fragment, lanes, key) {
              if (current3 === null || current3.tag !== Fragment) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current3, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      if (newChild.type === REACT_FRAGMENT_TYPE) {
                        return updateFragment2(returnFiber, oldFiber, newChild.props.children, lanes, key);
                      }
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment2(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                    }
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error2("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i3 = 0; i3 < newChildren.length; i3++) {
                  var child = newChildren[i3];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (!(typeof iteratorFn === "function")) {
                {
                  throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              {
                if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error2("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error2("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (!(newChildren != null)) {
                {
                  throw Error("An iterable object provided no iterator.");
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element2, lanes) {
              var key = element2.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  switch (child.tag) {
                    case Fragment: {
                      if (element2.type === REACT_FRAGMENT_TYPE) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, element2.props.children);
                        existing.return = returnFiber;
                        {
                          existing._debugSource = element2._source;
                          existing._debugOwner = element2._owner;
                        }
                        return existing;
                      }
                      break;
                    }
                    case Block:
                    default: {
                      if (child.elementType === element2.type || isCompatibleFamilyForHotReloading(child, element2)) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var _existing3 = useFiber(child, element2.props);
                        _existing3.ref = coerceRef(returnFiber, child, element2);
                        _existing3.return = returnFiber;
                        {
                          _existing3._debugSource = element2._source;
                          _existing3._debugOwner = element2._owner;
                        }
                        return _existing3;
                      }
                      break;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element2.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element2.props.children, returnFiber.mode, lanes, element2.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element2, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element2);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              var isObject2 = typeof newChild === "object" && newChild !== null;
              if (isObject2) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                }
              }
              if (typeof newChild === "string" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              if (isArray$1(newChild)) {
                return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (getIteratorFn(newChild)) {
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (isObject2) {
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              if (typeof newChild === "undefined" && !isUnkeyedTopLevelFragment) {
                switch (returnFiber.tag) {
                  case ClassComponent: {
                    {
                      var instance = returnFiber.stateNode;
                      if (instance.render._isMockFunction) {
                        break;
                      }
                    }
                  }
                  case Block:
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    {
                      {
                        throw Error((getComponentName(returnFiber.type) || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                      }
                    }
                  }
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current3, workInProgress2) {
            if (!(current3 === null || workInProgress2.child === current3.child)) {
              {
                throw Error("Resuming work not yet implemented.");
              }
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c3) {
            if (!(c3 !== NO_CONTEXT)) {
              {
                throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return c3;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push2(rootInstanceStackCursor, nextRootInstance, fiber);
            push2(contextFiberStackCursor, fiber, fiber);
            push2(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push2(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push2(contextFiberStackCursor, fiber, fiber);
            push2(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push2(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            if (props.fallback === void 0) {
              return false;
            }
            if (props.unstable_avoidThisFallback !== true) {
              return true;
            }
            if (hasInvisibleParent) {
              return false;
            }
            return true;
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state2 = node.memoizedState;
                if (state2 !== null) {
                  var dehydrated = state2.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = 0;
          var HasEffect = 1;
          var Layout = 2;
          var Passive$1 = 4;
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChild(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            return true;
          }
          function deleteHydratableInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot:
                  didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                  break;
                case HostComponent:
                  didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                  break;
              }
            }
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            childToDelete.flags = Deletion;
            if (returnFiber.lastEffect !== null) {
              returnFiber.lastEffect.nextEffect = childToDelete;
              returnFiber.lastEffect = childToDelete;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableContainerInstance(parentContainer, type);
                      break;
                    case HostText:
                      var text2 = fiber.pendingProps;
                      didNotFindHydratableContainerTextInstance(parentContainer, text2);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent:
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                      break;
                    case HostText:
                      var _text = fiber.pendingProps;
                      didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                      break;
                    case SuspenseComponent:
                      didNotFindHydratableSuspenseInstance(parentType, parentProps);
                      break;
                  }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  return true;
                }
                return false;
              }
              case HostText: {
                var text2 = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text2);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                return false;
              }
              default:
                return false;
            }
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
            }
            hydrationParentFiber = fiber;
            nextHydratableInstance = getFirstHydratableChild(nextInstance);
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            {
              if (shouldUpdate) {
                var returnFiber = hydrationParentFiber;
                if (returnFiber !== null) {
                  switch (returnFiber.tag) {
                    case HostRoot: {
                      var parentContainer = returnFiber.stateNode.containerInfo;
                      didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                      break;
                    }
                    case HostComponent: {
                      var parentType = returnFiber.type;
                      var parentProps = returnFiber.memoizedProps;
                      var parentInstance = returnFiber.stateNode;
                      didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                      break;
                    }
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              {
                throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            var type = fiber.type;
            if (fiber.tag !== HostComponent || type !== "head" && type !== "body" && !shouldSetTextContent(type, fiber.memoizedProps)) {
              var nextInstance = nextHydratableInstance;
              while (nextInstance) {
                deleteHydratableInstance(fiber, nextInstance);
                nextInstance = getNextHydratableSibling(nextInstance);
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
          }
          function getIsHydrating() {
            return isHydrating;
          }
          var workInProgressSources = [];
          var rendererSigil$1;
          {
            rendererSigil$1 = {};
          }
          function markSourceAsDirty(mutableSource) {
            workInProgressSources.push(mutableSource);
          }
          function resetWorkInProgressVersions() {
            for (var i3 = 0; i3 < workInProgressSources.length; i3++) {
              var mutableSource = workInProgressSources[i3];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function getWorkInProgressVersion(mutableSource) {
            {
              return mutableSource._workInProgressVersionPrimary;
            }
          }
          function setWorkInProgressVersion(mutableSource, version2) {
            {
              mutableSource._workInProgressVersionPrimary = version2;
            }
            workInProgressSources.push(mutableSource);
          }
          function warnAboutMultipleRenderersDEV(mutableSource) {
            {
              {
                if (mutableSource._currentPrimaryRenderer == null) {
                  mutableSource._currentPrimaryRenderer = rendererSigil$1;
                } else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {
                  error2("Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported.");
                }
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnAboutUseOpaqueIdentifier;
          {
            didWarnAboutUseOpaqueIdentifier = {};
            didWarnAboutMismatchedHooksForComponent = new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !Array.isArray(deps)) {
                error2("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentName(currentlyRenderingFiber$1.type);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i3 = 0; i3 <= hookTypesUpdateIndexDev; i3++) {
                    var oldHookName = hookTypesDev[i3];
                    var newHookName = i3 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i3 + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error2("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            {
              {
                throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error2("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error2("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i3 = 0; i3 < prevDeps.length && i3 < nextDeps.length; i3++) {
              if (objectIs(nextDeps[i3], prevDeps[i3])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current3, workInProgress2, Component, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current3 !== null ? current3._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current3 !== null && current3.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current3 !== null && current3.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
                  {
                    throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                  }
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
            }
            didScheduleRenderPhaseUpdate = false;
            if (!!didRenderTooFewHooks) {
              {
                throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
              }
            }
            return children;
          }
          function bailoutHooks(current3, workInProgress2, lanes) {
            workInProgress2.updateQueue = current3.updateQueue;
            workInProgress2.flags &= ~(Passive | Update);
            current3.lanes = removeLanes(current3.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current3 = currentlyRenderingFiber$1.alternate;
              if (current3 !== null) {
                nextCurrentHook = current3.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (!(nextCurrentHook !== null)) {
                {
                  throw Error("Rendered more hooks than during the previous render.");
                }
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null
            };
          }
          function basicStateReducer(state2, action) {
            return typeof action === "function" ? action(state2) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = hook.queue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (!(queue !== null)) {
              {
                throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
              }
            }
            queue.lastRenderedReducer = reducer;
            var current3 = currentHook;
            var baseQueue = current3.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current3.baseQueue !== baseQueue) {
                  error2("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current3.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current3.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    eagerReducer: update.eagerReducer,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      lane: NoLane,
                      action: update.action,
                      eagerReducer: update.eagerReducer,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.eagerReducer === reducer) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (!(queue !== null)) {
              {
                throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
              }
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function readFromUnsubcribedMutableSource(root2, source, getSnapshot) {
            {
              warnAboutMultipleRenderersDEV(source);
            }
            var getVersion = source._getVersion;
            var version2 = getVersion(source._source);
            var isSafeToReadFromSource = false;
            var currentRenderVersion = getWorkInProgressVersion(source);
            if (currentRenderVersion !== null) {
              isSafeToReadFromSource = currentRenderVersion === version2;
            } else {
              isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root2.mutableReadLanes);
              if (isSafeToReadFromSource) {
                setWorkInProgressVersion(source, version2);
              }
            }
            if (isSafeToReadFromSource) {
              var snapshot2 = getSnapshot(source._source);
              {
                if (typeof snapshot2 === "function") {
                  error2("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                }
              }
              return snapshot2;
            } else {
              markSourceAsDirty(source);
              {
                {
                  throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
                }
              }
            }
          }
          function useMutableSource(hook, source, getSnapshot, subscribe2) {
            var root2 = getWorkInProgressRoot();
            if (!(root2 !== null)) {
              {
                throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
            }
            var getVersion = source._getVersion;
            var version2 = getVersion(source._source);
            var dispatcher = ReactCurrentDispatcher$1.current;
            var _dispatcher$useState = dispatcher.useState(function() {
              return readFromUnsubcribedMutableSource(root2, source, getSnapshot);
            }), currentSnapshot = _dispatcher$useState[0], setSnapshot = _dispatcher$useState[1];
            var snapshot2 = currentSnapshot;
            var stateHook = workInProgressHook;
            var memoizedState = hook.memoizedState;
            var refs = memoizedState.refs;
            var prevGetSnapshot = refs.getSnapshot;
            var prevSource = memoizedState.source;
            var prevSubscribe = memoizedState.subscribe;
            var fiber = currentlyRenderingFiber$1;
            hook.memoizedState = {
              refs,
              source,
              subscribe: subscribe2
            };
            dispatcher.useEffect(function() {
              refs.getSnapshot = getSnapshot;
              refs.setSnapshot = setSnapshot;
              var maybeNewVersion = getVersion(source._source);
              if (!objectIs(version2, maybeNewVersion)) {
                var maybeNewSnapshot = getSnapshot(source._source);
                {
                  if (typeof maybeNewSnapshot === "function") {
                    error2("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                  }
                }
                if (!objectIs(snapshot2, maybeNewSnapshot)) {
                  setSnapshot(maybeNewSnapshot);
                  var lane = requestUpdateLane(fiber);
                  markRootMutableRead(root2, lane);
                }
                markRootEntangled(root2, root2.mutableReadLanes);
              }
            }, [getSnapshot, source, subscribe2]);
            dispatcher.useEffect(function() {
              var handleChange = function() {
                var latestGetSnapshot = refs.getSnapshot;
                var latestSetSnapshot = refs.setSnapshot;
                try {
                  latestSetSnapshot(latestGetSnapshot(source._source));
                  var lane = requestUpdateLane(fiber);
                  markRootMutableRead(root2, lane);
                } catch (error3) {
                  latestSetSnapshot(function() {
                    throw error3;
                  });
                }
              };
              var unsubscribe2 = subscribe2(source._source, handleChange);
              {
                if (typeof unsubscribe2 !== "function") {
                  error2("Mutable source subscribe function must return an unsubscribe function.");
                }
              }
              return unsubscribe2;
            }, [source, subscribe2]);
            if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe2)) {
              var newQueue = {
                pending: null,
                dispatch: null,
                lastRenderedReducer: basicStateReducer,
                lastRenderedState: snapshot2
              };
              newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
              stateHook.queue = newQueue;
              stateHook.baseQueue = null;
              snapshot2 = readFromUnsubcribedMutableSource(root2, source, getSnapshot);
              stateHook.memoizedState = stateHook.baseState = snapshot2;
            }
            return snapshot2;
          }
          function mountMutableSource(source, getSnapshot, subscribe2) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = {
              refs: {
                getSnapshot,
                setSnapshot: null
              },
              source,
              subscribe: subscribe2
            };
            return useMutableSource(hook, source, getSnapshot, subscribe2);
          }
          function updateMutableSource(source, getSnapshot, subscribe2) {
            var hook = updateWorkInProgressHook();
            return useMutableSource(hook, source, getSnapshot, subscribe2);
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = hook.queue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create8, destroy, deps) {
            var effect = {
              tag,
              create: create8,
              destroy,
              deps,
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            var ref = {
              current: initialValue
            };
            {
              Object.seal(ref);
            }
            hook.memoizedState = ref;
            return ref;
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create8, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create8, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create8, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  pushEffect(hookFlags, create8, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create8, destroy, nextDeps);
          }
          function mountEffect(create8, deps) {
            {
              if (typeof jest !== "undefined") {
                warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
              }
            }
            return mountEffectImpl(Update | Passive, Passive$1, create8, deps);
          }
          function updateEffect(create8, deps) {
            {
              if (typeof jest !== "undefined") {
                warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
              }
            }
            return updateEffectImpl(Update | Passive, Passive$1, create8, deps);
          }
          function mountLayoutEffect(create8, deps) {
            return mountEffectImpl(Update, Layout, create8, deps);
          }
          function updateLayoutEffect(create8, deps) {
            return updateEffectImpl(Update, Layout, create8, deps);
          }
          function imperativeHandleEffect(create8, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create8();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error2("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create8();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create8, deps) {
            {
              if (typeof create8 !== "function") {
                error2("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create8 !== null ? typeof create8 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create8, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create8, deps) {
            {
              if (typeof create8 !== "function") {
                error2("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create8 !== null ? typeof create8 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create8, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
            mountEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function updateDeferredValue(value) {
            var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
            updateEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function rerenderDeferredValue(value) {
            var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
            updateEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function startTransition(setPending, callback) {
            var priorityLevel = getCurrentPriorityLevel();
            {
              runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function() {
                setPending(true);
              });
              runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function() {
                var prevTransition = ReactCurrentBatchConfig$1.transition;
                ReactCurrentBatchConfig$1.transition = 1;
                try {
                  setPending(false);
                  callback();
                } finally {
                  ReactCurrentBatchConfig$1.transition = prevTransition;
                }
              });
            }
          }
          function mountTransition() {
            var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1];
            var start = startTransition.bind(null, setPending);
            mountRef(start);
            return [start, isPending];
          }
          function updateTransition() {
            var _updateState2 = updateState(), isPending = _updateState2[0];
            var startRef = updateRef();
            var start = startRef.current;
            return [start, isPending];
          }
          function rerenderTransition() {
            var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];
            var startRef = updateRef();
            var start = startRef.current;
            return [start, isPending];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function warnOnOpaqueIdentifierAccessInDEV(fiber) {
            {
              var name2 = getComponentName(fiber.type) || "Unknown";
              if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name2]) {
                error2("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                didWarnAboutUseOpaqueIdentifier[name2] = true;
              }
            }
          }
          function mountOpaqueIdentifier() {
            var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));
            if (getIsHydrating()) {
              var didUpgrade = false;
              var fiber = currentlyRenderingFiber$1;
              var readValue = function() {
                if (!didUpgrade) {
                  didUpgrade = true;
                  {
                    isUpdatingOpaqueValueInRenderPhase = true;
                    setId(makeId());
                    isUpdatingOpaqueValueInRenderPhase = false;
                    warnOnOpaqueIdentifierAccessInDEV(fiber);
                  }
                }
                {
                  {
                    throw Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                  }
                }
              };
              var id2 = makeOpaqueHydratingObject(readValue);
              var setId = mountState(id2)[1];
              if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
                currentlyRenderingFiber$1.flags |= Update | Passive;
                pushEffect(HasEffect | Passive$1, function() {
                  setId(makeId());
                }, void 0, null);
              }
              return id2;
            } else {
              var _id = makeId();
              mountState(_id);
              return _id;
            }
          }
          function updateOpaqueIdentifier() {
            var id2 = updateState()[0];
            return id2;
          }
          function rerenderOpaqueIdentifier() {
            var id2 = rerenderState()[0];
            return id2;
          }
          function dispatchAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error2("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              eagerReducer: null,
              eagerState: null,
              next: null
            };
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
            var alternate = fiber.alternate;
            if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
              didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            } else {
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.eagerReducer = lastRenderedReducer;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      return;
                    }
                  } catch (error3) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              {
                if (typeof jest !== "undefined") {
                  warnIfNotScopedWithMatchingAct(fiber);
                  warnIfNotCurrentlyActingUpdatesInDev(fiber);
                }
              }
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useOpaqueIdentifier: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error2("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error2("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create8, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create8, deps);
              },
              useImperativeHandle: function(ref, create8, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create8, deps);
              },
              useLayoutEffect: function(create8, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create8, deps);
              },
              useMemo: function(create8, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create8, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe2) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe2);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                mountHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create8, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create8, deps);
              },
              useImperativeHandle: function(ref, create8, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create8, deps);
              },
              useLayoutEffect: function(create8, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create8, deps);
              },
              useMemo: function(create8, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create8, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe2) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe2);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create8, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create8, deps);
              },
              useImperativeHandle: function(ref, create8, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create8, deps);
              },
              useLayoutEffect: function(create8, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create8, deps);
              },
              useMemo: function(create8, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create8, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe2) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe2);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return updateOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create8, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create8, deps);
              },
              useImperativeHandle: function(ref, create8, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create8, deps);
              },
              useLayoutEffect: function(create8, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create8, deps);
              },
              useMemo: function(create8, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create8, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe2) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe2);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return rerenderOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create8, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create8, deps);
              },
              useImperativeHandle: function(ref, create8, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create8, deps);
              },
              useLayoutEffect: function(create8, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create8, deps);
              },
              useMemo: function(create8, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create8, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe2) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe2);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create8, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create8, deps);
              },
              useImperativeHandle: function(ref, create8, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create8, deps);
              },
              useLayoutEffect: function(create8, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create8, deps);
              },
              useMemo: function(create8, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create8, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe2) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe2);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create8, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create8, deps);
              },
              useImperativeHandle: function(ref, create8, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create8, deps);
              },
              useLayoutEffect: function(create8, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create8, deps);
              },
              useMemo: function(create8, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create8, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe2) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe2);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var profilerStartTime = -1;
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2) {
            if (current3 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current3.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current3, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current3.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current3, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
                }
              }
            }
            var render2 = Component.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current3, workInProgress2, render2, nextProps, ref, renderLanes2);
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  nextChildren = renderWithHooks(current3, workInProgress2, render2, nextProps, ref, renderLanes2);
                } finally {
                  reenableLogs();
                }
              }
              setIsRendering(false);
            }
            if (current3 !== null && !didReceiveUpdate) {
              bailoutHooks(current3, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current3, workInProgress2, Component, nextProps, updateLanes, renderLanes2) {
            if (current3 === null) {
              var type = Component.type;
              if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current3, workInProgress2, resolvedType, nextProps, updateLanes, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(type));
                }
              }
              var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentName(_type));
              }
            }
            var currentChild = current3.child;
            if (!includesSomeLane(updateLanes, renderLanes2)) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current3.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current3, workInProgress2, Component, nextProps, updateLanes, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x3) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, nextProps, "prop", getComponentName(outerMemoType));
                  }
                }
              }
            }
            if (current3 !== null) {
              var prevProps = current3.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current3.ref === workInProgress2.ref && workInProgress2.type === current3.type) {
                didReceiveUpdate = false;
                if (!includesSomeLane(renderLanes2, updateLanes)) {
                  workInProgress2.lanes = current3.lanes;
                  return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
                } else if ((current3.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current3, workInProgress2, Component, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current3, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current3 !== null ? current3.memoizedState : null;
            if (nextProps.mode === "hidden" || nextProps.mode === "unstable-defer-without-hiding") {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                {
                  markSpawnedWork(OffscreenLane);
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes
                };
                workInProgress2.memoizedState = _nextState;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          var updateLegacyHiddenComponent = updateOffscreenComponent;
          function updateFragment(current3, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current3, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current3, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current3, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current3 === null && ref !== null || current3 !== null && current3.ref !== ref) {
              workInProgress2.flags |= Ref;
            }
          }
          function updateFunctionComponent(current3, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current3, workInProgress2, Component, nextProps, context, renderLanes2);
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  nextChildren = renderWithHooks(current3, workInProgress2, Component, nextProps, context, renderLanes2);
                } finally {
                  reenableLogs();
                }
              }
              setIsRendering(false);
            }
            if (current3 !== null && !didReceiveUpdate) {
              bailoutHooks(current3, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current3, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              if (current3 !== null) {
                current3.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
              constructClassInstance(workInProgress2, Component, nextProps);
              mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current3 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current3, workInProgress2, Component, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current3, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error2("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress2.type) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current3, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
            markRef(current3, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component, false);
              }
              return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    instance.render();
                  } finally {
                    reenableLogs();
                  }
                }
                setIsRendering(false);
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current3 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current3, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root2 = workInProgress2.stateNode;
            if (root2.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
            } else if (root2.context) {
              pushTopLevelContextObject(workInProgress2, root2.context, false);
            }
            pushHostContainer(workInProgress2, root2.containerInfo);
          }
          function updateHostRoot(current3, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            var updateQueue = workInProgress2.updateQueue;
            if (!(current3 !== null && updateQueue !== null)) {
              {
                throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState !== null ? prevState.element : null;
            cloneUpdateQueue(current3, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var nextChildren = nextState.element;
            if (nextChildren === prevChildren) {
              resetHydrationState();
              return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
            }
            var root2 = workInProgress2.stateNode;
            if (root2.hydrate && enterHydrationState(workInProgress2)) {
              {
                var mutableSourceEagerHydrationData = root2.mutableSourceEagerHydrationData;
                if (mutableSourceEagerHydrationData != null) {
                  for (var i3 = 0; i3 < mutableSourceEagerHydrationData.length; i3 += 2) {
                    var mutableSource = mutableSourceEagerHydrationData[i3];
                    var version2 = mutableSourceEagerHydrationData[i3 + 1];
                    setWorkInProgressVersion(mutableSource, version2);
                  }
                }
              }
              var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
              workInProgress2.child = child;
              var node = child;
              while (node) {
                node.flags = node.flags & ~Placement | Hydrating;
                node = node.sibling;
              }
            } else {
              reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
              resetHydrationState();
            }
            return workInProgress2.child;
          }
          function updateHostComponent(current3, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current3 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current3 !== null ? current3.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current3, workInProgress2);
            reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current3, workInProgress2) {
            if (current3 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, updateLanes, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component = init(payload);
            workInProgress2.type = Component;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
            var resolvedProps = resolveDefaultProps(Component, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component);
                  workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
                }
                child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component = resolveClassForHotReloading(Component);
                }
                child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
                }
                child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentName(Component));
                    }
                  }
                }
                child = updateMemoComponent(null, workInProgress2, Component, resolveDefaultProps(Component.type, resolvedProps), updateLanes, renderLanes2);
                return child;
              }
            }
            var hint = "";
            {
              if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            {
              {
                throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
              }
            }
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            {
              if (Component.prototype && typeof Component.prototype.render === "function") {
                var componentName = getComponentName(Component) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error2("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
              setIsRendering(false);
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentName(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error2("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              {
                var _componentName2 = getComponentName(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error2("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              var getDerivedStateFromProps = Component.getDerivedStateFromProps;
              if (typeof getDerivedStateFromProps === "function") {
                applyDerivedStateFromProps(workInProgress2, Component, getDerivedStateFromProps, props);
              }
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                  } finally {
                    reenableLogs();
                  }
                }
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component) {
            {
              if (Component) {
                if (Component.childContextTypes) {
                  error2("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || workInProgress2._debugID || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error2("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentName(Component) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error2("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component.contextType === "object" && Component.contextType !== null) {
                var _componentName4 = getComponentName(Component) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error2("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2)
            };
          }
          function shouldRemainOnFallback(suspenseContext, current3, workInProgress2, renderLanes2) {
            if (current3 !== null) {
              var suspenseState = current3.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current3, renderLanes2) {
            return removeLanes(current3.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current3, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current3)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current3 === null || current3.memoizedState !== null) {
                if (nextProps.fallback !== void 0 && nextProps.unstable_avoidThisFallback !== true) {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current3 === null) {
              if (nextProps.fallback !== void 0) {
                tryToClaimNextHydratableInstance(workInProgress2);
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else if (typeof nextProps.unstable_expectedLoadTime === "number") {
                var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment = workInProgress2.child;
                _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                workInProgress2.lanes = SomeRetryLane;
                {
                  markSpawnedWork(SomeRetryLane);
                }
                return _fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren, renderLanes2);
              }
            } else {
              var prevState = current3.memoizedState;
              if (prevState !== null) {
                if (showFallback) {
                  var _nextFallbackChildren2 = nextProps.fallback;
                  var _nextPrimaryChildren2 = nextProps.children;
                  var _fallbackChildFragment = updateSuspenseFallbackChildren(current3, workInProgress2, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes2);
                  var _primaryChildFragment3 = workInProgress2.child;
                  var prevOffscreenState = current3.child.memoizedState;
                  _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                  _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current3, renderLanes2);
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  return _fallbackChildFragment;
                } else {
                  var _nextPrimaryChildren3 = nextProps.children;
                  var _primaryChildFragment4 = updateSuspensePrimaryChildren(current3, workInProgress2, _nextPrimaryChildren3, renderLanes2);
                  workInProgress2.memoizedState = null;
                  return _primaryChildFragment4;
                }
              } else {
                if (showFallback) {
                  var _nextFallbackChildren3 = nextProps.fallback;
                  var _nextPrimaryChildren4 = nextProps.children;
                  var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current3, workInProgress2, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes2);
                  var _primaryChildFragment5 = workInProgress2.child;
                  var _prevOffscreenState = current3.child.memoizedState;
                  _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes2);
                  _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current3, renderLanes2);
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  return _fallbackChildFragment2;
                } else {
                  var _nextPrimaryChildren5 = nextProps.children;
                  var _primaryChildFragment6 = updateSuspensePrimaryChildren(current3, workInProgress2, _nextPrimaryChildren5, renderLanes2);
                  workInProgress2.memoizedState = null;
                  return _primaryChildFragment6;
                }
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes2, null);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function createWorkInProgressOffscreenFiber(current3, offscreenProps) {
            return createWorkInProgress(current3, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current3, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current3.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & BlockingMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              currentFallbackChildFragment.nextEffect = null;
              currentFallbackChildFragment.flags = Deletion;
              workInProgress2.firstEffect = workInProgress2.lastEffect = currentFallbackChildFragment;
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current3, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current3.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if ((mode & BlockingMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              var progressedLastEffect = primaryChildFragment.lastEffect;
              if (progressedLastEffect !== null) {
                workInProgress2.firstEffect = primaryChildFragment.firstEffect;
                workInProgress2.lastEffect = progressedLastEffect;
                progressedLastEffect.nextEffect = null;
              } else {
                workInProgress2.firstEffect = workInProgress2.lastEffect = null;
              }
            } else {
              primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function scheduleWorkOnFiber(fiber, renderLanes2) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleWorkOnParentPath(fiber.return, renderLanes2);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state2 = node.memoizedState;
                if (state2 !== null) {
                  scheduleWorkOnFiber(node, renderLanes2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleWorkOnFiber(node, renderLanes2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error2('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error2('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error2('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error2('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error2('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error2('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isArray5 = Array.isArray(childSlot);
              var isIterable = !isArray5 && typeof getIteratorFn(childSlot) === "function";
              if (isArray5 || isIterable) {
                var type = isArray5 ? "array" : "iterable";
                error2("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (Array.isArray(children)) {
                  for (var i3 = 0; i3 < children.length; i3++) {
                    if (!validateSuspenseListNestedChild(children[i3], i3)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error2('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode,
                lastEffect: lastEffectBeforeRendering
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
              renderState.lastEffect = lastEffectBeforeRendering;
            }
          }
          function updateSuspenseListComponent(current3, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current3, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current3 !== null && (current3.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & BlockingMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode, workInProgress2.lastEffect);
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode, workInProgress2.lastEffect);
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(workInProgress2, false, null, null, void 0, workInProgress2.lastEffect);
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current3, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current3 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current3, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error2("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, newValue);
            if (oldProps !== null) {
              var oldValue = oldProps.value;
              var changedBits = calculateChangedBits(context, newValue, oldValue);
              if (changedBits === 0) {
                if (oldProps.children === newProps.children && !hasContextChanged()) {
                  return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
                }
              } else {
                propagateContextChange(workInProgress2, context, changedBits, renderLanes2);
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current3, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current3, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error2("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error2("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context, newProps.unstable_observedBits);
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current3, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2) {
            if (current3 !== null) {
              workInProgress2.dependencies = current3.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              return null;
            } else {
              cloneChildFibers(current3, workInProgress2);
              return workInProgress2.child;
            }
          }
          function remountFiber(current3, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current3.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var last2 = returnFiber.lastEffect;
              if (last2 !== null) {
                last2.nextEffect = current3;
                returnFiber.lastEffect = current3;
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = current3;
              }
              current3.nextEffect = null;
              current3.flags = Deletion;
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function beginWork(current3, workInProgress2, renderLanes2) {
            var updateLanes = workInProgress2.lanes;
            {
              if (workInProgress2._debugNeedsRemount && current3 !== null) {
                return remountFiber(current3, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current3 !== null) {
              var oldProps = current3.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current3.type) {
                didReceiveUpdate = true;
              } else if (!includesSomeLane(renderLanes2, updateLanes)) {
                didReceiveUpdate = false;
                switch (workInProgress2.tag) {
                  case HostRoot:
                    pushHostRootContext(workInProgress2);
                    resetHydrationState();
                    break;
                  case HostComponent:
                    pushHostContext(workInProgress2);
                    break;
                  case ClassComponent: {
                    var Component = workInProgress2.type;
                    if (isContextProvider(Component)) {
                      pushContextProvider(workInProgress2);
                    }
                    break;
                  }
                  case HostPortal:
                    pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                    break;
                  case ContextProvider: {
                    var newValue = workInProgress2.memoizedProps.value;
                    pushProvider(workInProgress2, newValue);
                    break;
                  }
                  case Profiler:
                    {
                      var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                      if (hasChildWork) {
                        workInProgress2.flags |= Update;
                      }
                      var stateNode = workInProgress2.stateNode;
                      stateNode.effectDuration = 0;
                      stateNode.passiveEffectDuration = 0;
                    }
                    break;
                  case SuspenseComponent: {
                    var state2 = workInProgress2.memoizedState;
                    if (state2 !== null) {
                      var primaryChildFragment = workInProgress2.child;
                      var primaryChildLanes = primaryChildFragment.childLanes;
                      if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                        return updateSuspenseComponent(current3, workInProgress2, renderLanes2);
                      } else {
                        pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                        var child = bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
                        if (child !== null) {
                          return child.sibling;
                        } else {
                          return null;
                        }
                      }
                    } else {
                      pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    }
                    break;
                  }
                  case SuspenseListComponent: {
                    var didSuspendBefore = (current3.flags & DidCapture) !== NoFlags;
                    var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                    if (didSuspendBefore) {
                      if (_hasChildWork) {
                        return updateSuspenseListComponent(current3, workInProgress2, renderLanes2);
                      }
                      workInProgress2.flags |= DidCapture;
                    }
                    var renderState = workInProgress2.memoizedState;
                    if (renderState !== null) {
                      renderState.rendering = null;
                      renderState.tail = null;
                      renderState.lastEffect = null;
                    }
                    pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                    if (_hasChildWork) {
                      break;
                    } else {
                      return null;
                    }
                  }
                  case OffscreenComponent:
                  case LegacyHiddenComponent: {
                    workInProgress2.lanes = NoLanes;
                    return updateOffscreenComponent(current3, workInProgress2, renderLanes2);
                  }
                }
                return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
              } else {
                if ((current3.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current3, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current3, workInProgress2, elementType, updateLanes, renderLanes2);
              }
              case FunctionComponent: {
                var _Component = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
                return updateFunctionComponent(current3, workInProgress2, _Component, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
                return updateClassComponent(current3, workInProgress2, _Component2, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current3, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current3, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current3, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current3, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current3, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current3, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment:
                return updateFragment(current3, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current3, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current3, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current3, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current3, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentName(_type2));
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current3, workInProgress2, _type2, _resolvedProps3, updateLanes, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current3, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, updateLanes, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component3 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
                return mountIncompleteClassComponent(current3, workInProgress2, _Component3, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current3, workInProgress2, renderLanes2);
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case Block: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current3, workInProgress2, renderLanes2);
              }
              case LegacyHiddenComponent: {
                return updateLegacyHiddenComponent(current3, workInProgress2, renderLanes2);
              }
            }
            {
              {
                throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode);
                } else if (node.tag === HostPortal)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(workInProgress2) {
            };
            updateHostComponent$1 = function(current3, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current3.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current3, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function completeWork(current3, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                return null;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                return null;
              }
              case HostRoot: {
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var fiberRoot = workInProgress2.stateNode;
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current3 === null || current3.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else if (!fiberRoot.hydrate) {
                    workInProgress2.flags |= Snapshot2;
                  }
                }
                updateHostContainer(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current3 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current3, workInProgress2, type, newProps, rootContainerInstance);
                  if (current3.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (!(workInProgress2.stateNode !== null)) {
                      {
                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current3 && workInProgress2.stateNode != null) {
                  var oldText = current3.memoizedProps;
                  updateHostText$1(current3, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (!(workInProgress2.stateNode !== null)) {
                      {
                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = false;
                if (current3 === null) {
                  if (workInProgress2.memoizedProps.fallback !== void 0) {
                    popHydrationState(workInProgress2);
                  }
                } else {
                  var prevState = current3.memoizedState;
                  prevDidTimeout = prevState !== null;
                }
                if (nextDidTimeout && !prevDidTimeout) {
                  if ((workInProgress2.mode & BlockingMode) !== NoMode) {
                    var hasInvisibleChildContext = current3 === null && workInProgress2.memoizedProps.unstable_avoidThisFallback !== true;
                    if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                      renderDidSuspend();
                    } else {
                      renderDidSuspendDelayIfPossible();
                    }
                  }
                }
                {
                  if (nextDidTimeout || prevDidTimeout) {
                    workInProgress2.flags |= Update;
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(workInProgress2);
                if (current3 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                return null;
              case ContextProvider:
                popProvider(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current3 === null || (current3.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThennables = suspended.updateQueue;
                          if (newThennables !== null) {
                            workInProgress2.updateQueue = newThennables;
                            workInProgress2.flags |= Update;
                          }
                          if (renderState.lastEffect === null) {
                            workInProgress2.firstEffect = null;
                          }
                          workInProgress2.lastEffect = renderState.lastEffect;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                      {
                        markSpawnedWork(SomeRetryLane);
                      }
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThennables = _suspended.updateQueue;
                      if (_newThennables !== null) {
                        workInProgress2.updateQueue = _newThennables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        var lastEffect = workInProgress2.lastEffect = renderState.lastEffect;
                        if (lastEffect !== null) {
                          lastEffect.nextEffect = null;
                        }
                        return null;
                      }
                    } else if (now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                      {
                        markSpawnedWork(SomeRetryLane);
                      }
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next2 = renderState.tail;
                  renderState.rendering = next2;
                  renderState.tail = next2.sibling;
                  renderState.lastEffect = workInProgress2.lastEffect;
                  renderState.renderingStartTime = now();
                  next2.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next2;
                }
                return null;
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case Block:
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                if (current3 !== null) {
                  var _nextState = workInProgress2.memoizedState;
                  var _prevState = current3.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  var nextIsHidden = _nextState !== null;
                  if (prevIsHidden !== nextIsHidden && newProps.mode !== "unstable-defer-without-hiding") {
                    workInProgress2.flags |= Update;
                  }
                }
                return null;
              }
            }
            {
              {
                throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function unwindWork(workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if (!((_flags & DidCapture) === NoFlags)) {
                  {
                    throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                  }
                }
                workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                popProvider(workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(interruptedWork) {
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                popProvider(interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          function createCapturedValue(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source)
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error3 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error3 != null && error3._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error3);
                }
                var componentName = source ? getComponentName(source.type) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                var errorBoundaryName = getComponentName(boundary.type);
                if (errorBoundaryName) {
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                } else {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error3);
              }
            } catch (e4) {
              setTimeout(function() {
                throw e4;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error3 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error3);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                logCapturedError(fiber, errorInfo);
                return getDerivedStateFromError(error$1);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                  logCapturedError(fiber, errorInfo);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error2("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || "Unknown");
                    }
                  }
                }
              };
            } else {
              update.callback = function() {
                markFailedErrorBoundaryForHotReloading(fiber);
              };
            }
            return update;
          }
          function attachPingListener(root2, wakeable, lanes) {
            var pingCache = root2.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root2.pingCache = new PossiblyWeakMap$1();
              threadIDs = new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
              wakeable.then(ping, ping);
            }
          }
          function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            sourceFiber.firstEffect = sourceFiber.lastEffect = null;
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              if ((sourceFiber.mode & BlockingMode) === NoMode) {
                var currentSource = sourceFiber.alternate;
                if (currentSource) {
                  sourceFiber.updateQueue = currentSource.updateQueue;
                  sourceFiber.memoizedState = currentSource.memoizedState;
                  sourceFiber.lanes = currentSource.lanes;
                } else {
                  sourceFiber.updateQueue = null;
                  sourceFiber.memoizedState = null;
                }
              }
              var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
              var _workInProgress = returnFiber;
              do {
                if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                  var wakeables = _workInProgress.updateQueue;
                  if (wakeables === null) {
                    var updateQueue = new Set();
                    updateQueue.add(wakeable);
                    _workInProgress.updateQueue = updateQueue;
                  } else {
                    wakeables.add(wakeable);
                  }
                  if ((_workInProgress.mode & BlockingMode) === NoMode) {
                    _workInProgress.flags |= DidCapture;
                    sourceFiber.flags |= ForceUpdateForLegacySuspense;
                    sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                    if (sourceFiber.tag === ClassComponent) {
                      var currentSourceFiber = sourceFiber.alternate;
                      if (currentSourceFiber === null) {
                        sourceFiber.tag = IncompleteClassComponent;
                      } else {
                        var update = createUpdate(NoTimestamp, SyncLane);
                        update.tag = ForceUpdate;
                        enqueueUpdate(sourceFiber, update);
                      }
                    }
                    sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
                    return;
                  }
                  attachPingListener(root2, wakeable, rootRenderLanes);
                  _workInProgress.flags |= ShouldCapture;
                  _workInProgress.lanes = rootRenderLanes;
                  return;
                }
                _workInProgress = _workInProgress.return;
              } while (_workInProgress !== null);
              value = new Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");
            }
            renderDidError();
            value = createCapturedValue(value, sourceFiber);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var _update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, _update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update2 = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update2);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
          }
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var callComponentWillUnmountWithTimer = function(current3, instance) {
            instance.props = current3.memoizedProps;
            instance.state = current3.memoizedState;
            {
              instance.componentWillUnmount();
            }
          };
          function safelyCallComponentWillUnmount(current3, instance) {
            {
              invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current3, instance);
              if (hasCaughtError()) {
                var unmountError = clearCaughtError();
                captureCommitPhaseError(current3, unmountError);
              }
            }
          }
          function safelyDetachRef(current3) {
            var ref = current3.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                {
                  invokeGuardedCallback(null, ref, null, null);
                  if (hasCaughtError()) {
                    var refError = clearCaughtError();
                    captureCommitPhaseError(current3, refError);
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current3, destroy) {
            {
              invokeGuardedCallback(null, destroy, null);
              if (hasCaughtError()) {
                var error3 = clearCaughtError();
                captureCommitPhaseError(current3, error3);
              }
            }
          }
          function commitBeforeMutationLifeCycles(current3, finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
              case Block: {
                return;
              }
              case ClassComponent: {
                if (finishedWork.flags & Snapshot2) {
                  if (current3 !== null) {
                    var prevProps = current3.memoizedProps;
                    var prevState = current3.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error2("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error2("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    var snapshot2 = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot2 === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error2("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot2;
                  }
                }
                return;
              }
              case HostRoot: {
                {
                  if (finishedWork.flags & Snapshot2) {
                    var root2 = finishedWork.stateNode;
                    clearContainer(root2.containerInfo);
                  }
                }
                return;
              }
              case HostComponent:
              case HostText:
              case HostPortal:
              case IncompleteClassComponent:
                return;
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function commitHookEffectListUnmount(tag, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & tag) === tag) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    destroy();
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(tag, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & tag) === tag) {
                  var create8 = effect.create;
                  effect.destroy = create8();
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error2("An effect function must not return anything besides a function, which is used for clean-up.%s", addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function schedulePassiveEffects(finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                var _effect = effect, next2 = _effect.next, tag = _effect.tag;
                if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
                  enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
                  enqueuePendingPassiveHookEffectMount(finishedWork, effect);
                }
                effect = next2;
              } while (effect !== firstEffect);
            }
          }
          function commitLifeCycles(finishedRoot, current3, finishedWork, committedLanes) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
              case Block: {
                {
                  commitHookEffectListMount(Layout | HasEffect, finishedWork);
                }
                schedulePassiveEffects(finishedWork);
                return;
              }
              case ClassComponent: {
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                  if (current3 === null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error2("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error2("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    {
                      instance.componentDidMount();
                    }
                  } else {
                    var prevProps = finishedWork.elementType === finishedWork.type ? current3.memoizedProps : resolveDefaultProps(finishedWork.type, current3.memoizedProps);
                    var prevState = current3.memoizedState;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error2("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error2("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    {
                      instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    }
                  }
                }
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error2("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error2("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                return;
              }
              case HostRoot: {
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                  var _instance = null;
                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance = getPublicInstance(finishedWork.child.stateNode);
                        break;
                      case ClassComponent:
                        _instance = finishedWork.child.stateNode;
                        break;
                    }
                  }
                  commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                return;
              }
              case HostComponent: {
                var _instance2 = finishedWork.stateNode;
                if (current3 === null && finishedWork.flags & Update) {
                  var type = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type, props);
                }
                return;
              }
              case HostText: {
                return;
              }
              case HostPortal: {
                return;
              }
              case Profiler: {
                {
                  var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                  var effectDuration = finishedWork.stateNode.effectDuration;
                  var commitTime2 = getCommitTime();
                  if (typeof onRender === "function") {
                    {
                      onRender(finishedWork.memoizedProps.id, current3 === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2, finishedRoot.memoizedInteractions);
                    }
                  }
                }
                return;
              }
              case SuspenseComponent: {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                return;
              }
              case SuspenseListComponent:
              case IncompleteClassComponent:
              case FundamentalComponent:
              case ScopeComponent:
              case OffscreenComponent:
              case LegacyHiddenComponent:
                return;
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  var instance = node.stateNode;
                  if (isHidden) {
                    hideInstance(instance);
                  } else {
                    unhideInstance(node.stateNode, node.memoizedProps);
                  }
                } else if (node.tag === HostText) {
                  var _instance3 = node.stateNode;
                  if (isHidden) {
                    hideTextInstance(_instance3);
                  } else {
                    unhideTextInstance(_instance3, node.memoizedProps);
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                ref(instanceToUse);
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error2("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentName(finishedWork.type));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function commitDetachRef(current3) {
            var currentRef = current3.ref;
            if (currentRef !== null) {
              if (typeof currentRef === "function") {
                currentRef(null);
              } else {
                currentRef.current = null;
              }
            }
          }
          function commitUnmount(finishedRoot, current3, renderPriorityLevel) {
            onCommitUnmount(current3);
            switch (current3.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent:
              case Block: {
                var updateQueue = current3.updateQueue;
                if (updateQueue !== null) {
                  var lastEffect = updateQueue.lastEffect;
                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect = firstEffect;
                    do {
                      var _effect2 = effect, destroy = _effect2.destroy, tag = _effect2.tag;
                      if (destroy !== void 0) {
                        if ((tag & Passive$1) !== NoFlags$1) {
                          enqueuePendingPassiveHookEffectUnmount(current3, effect);
                        } else {
                          {
                            safelyCallDestroy(current3, destroy);
                          }
                        }
                      }
                      effect = effect.next;
                    } while (effect !== firstEffect);
                  }
                }
                return;
              }
              case ClassComponent: {
                safelyDetachRef(current3);
                var instance = current3.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(current3, instance);
                }
                return;
              }
              case HostComponent: {
                safelyDetachRef(current3);
                return;
              }
              case HostPortal: {
                {
                  unmountHostComponents(finishedRoot, current3);
                }
                return;
              }
              case FundamentalComponent: {
                return;
              }
              case DehydratedFragment: {
                return;
              }
              case ScopeComponent: {
                return;
              }
            }
          }
          function commitNestedUnmounts(finishedRoot, root2, renderPriorityLevel) {
            var node = root2;
            while (true) {
              commitUnmount(finishedRoot, node);
              if (node.child !== null && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === root2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === root2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function detachFiberMutation(fiber) {
            fiber.alternate = null;
            fiber.child = null;
            fiber.dependencies = null;
            fiber.firstEffect = null;
            fiber.lastEffect = null;
            fiber.memoizedProps = null;
            fiber.memoizedState = null;
            fiber.pendingProps = null;
            fiber.return = null;
            fiber.updateQueue = null;
            {
              fiber._debugOwner = null;
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            {
              {
                throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings:
              while (true) {
                while (node.sibling === null) {
                  if (node.return === null || isHostParent(node.return)) {
                    return null;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
                while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                  if (node.flags & Placement) {
                    continue siblings;
                  }
                  if (node.child === null || node.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node.child.return = node;
                    node = node.child;
                  }
                }
                if (!(node.flags & Placement)) {
                  return node.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            var parent;
            var isContainer;
            var parentStateNode = parentFiber.stateNode;
            switch (parentFiber.tag) {
              case HostComponent:
                parent = parentStateNode;
                isContainer = false;
                break;
              case HostRoot:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
              case HostPortal:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
              case FundamentalComponent:
              default: {
                {
                  throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            if (parentFiber.flags & ContentReset) {
              resetTextContent(parent);
              parentFiber.flags &= ~ContentReset;
            }
            var before = getHostSibling(finishedWork);
            if (isContainer) {
              insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
            } else {
              insertOrAppendPlacementNode(finishedWork, before, parent);
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost || enableFundamentalAPI) {
              var stateNode = isHost ? node.stateNode : node.stateNode.instance;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost || enableFundamentalAPI) {
              var stateNode = isHost ? node.stateNode : node.stateNode.instance;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function unmountHostComponents(finishedRoot, current3, renderPriorityLevel) {
            var node = current3;
            var currentParentIsValid = false;
            var currentParent;
            var currentParentIsContainer;
            while (true) {
              if (!currentParentIsValid) {
                var parent = node.return;
                findParent:
                  while (true) {
                    if (!(parent !== null)) {
                      {
                        throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                    var parentStateNode = parent.stateNode;
                    switch (parent.tag) {
                      case HostComponent:
                        currentParent = parentStateNode;
                        currentParentIsContainer = false;
                        break findParent;
                      case HostRoot:
                        currentParent = parentStateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                      case HostPortal:
                        currentParent = parentStateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                    }
                    parent = parent.return;
                  }
                currentParentIsValid = true;
              }
              if (node.tag === HostComponent || node.tag === HostText) {
                commitNestedUnmounts(finishedRoot, node);
                if (currentParentIsContainer) {
                  removeChildFromContainer(currentParent, node.stateNode);
                } else {
                  removeChild(currentParent, node.stateNode);
                }
              } else if (node.tag === HostPortal) {
                if (node.child !== null) {
                  currentParent = node.stateNode.containerInfo;
                  currentParentIsContainer = true;
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
              } else {
                commitUnmount(finishedRoot, node);
                if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
              }
              if (node === current3) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === current3) {
                  return;
                }
                node = node.return;
                if (node.tag === HostPortal) {
                  currentParentIsValid = false;
                }
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function commitDeletion(finishedRoot, current3, renderPriorityLevel) {
            {
              unmountHostComponents(finishedRoot, current3);
            }
            var alternate = current3.alternate;
            detachFiberMutation(current3);
            if (alternate !== null) {
              detachFiberMutation(alternate);
            }
          }
          function commitWork(current3, finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent:
              case Block: {
                {
                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
                }
                return;
              }
              case ClassComponent: {
                return;
              }
              case HostComponent: {
                var instance = finishedWork.stateNode;
                if (instance != null) {
                  var newProps = finishedWork.memoizedProps;
                  var oldProps = current3 !== null ? current3.memoizedProps : newProps;
                  var type = finishedWork.type;
                  var updatePayload = finishedWork.updateQueue;
                  finishedWork.updateQueue = null;
                  if (updatePayload !== null) {
                    commitUpdate(instance, updatePayload, type, oldProps, newProps);
                  }
                }
                return;
              }
              case HostText: {
                if (!(finishedWork.stateNode !== null)) {
                  {
                    throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps;
                var oldText = current3 !== null ? current3.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
              }
              case HostRoot: {
                {
                  var _root = finishedWork.stateNode;
                  if (_root.hydrate) {
                    _root.hydrate = false;
                    commitHydratedContainer(_root.containerInfo);
                  }
                }
                return;
              }
              case Profiler: {
                return;
              }
              case SuspenseComponent: {
                commitSuspenseComponent(finishedWork);
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case SuspenseListComponent: {
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case IncompleteClassComponent: {
                return;
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                var newState = finishedWork.memoizedState;
                var isHidden = newState !== null;
                hideOrUnhideAllChildren(finishedWork, isHidden);
                return;
              }
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function commitSuspenseComponent(finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState !== null) {
              markCommitTimeOfFallback();
              {
                var primaryChildParent = finishedWork.child;
                hideOrUnhideAllChildren(primaryChildParent, true);
              }
            }
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current3 = finishedWork.alternate;
              if (current3 !== null) {
                var prevState = current3.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  {
                    if (wakeable.__reactDoNotTraceInteractions !== true) {
                      retry = tracing.unstable_wrap(retry);
                    }
                  }
                  retryCache.add(wakeable);
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function isSuspenseBoundaryBeingHidden(current3, finishedWork) {
            if (current3 !== null) {
              var oldState = current3.memoizedState;
              if (oldState === null || oldState.dehydrated !== null) {
                var newState = finishedWork.memoizedState;
                return newState !== null && newState.dehydrated === null;
              }
            }
            return false;
          }
          function commitResetTextContent(current3) {
            resetTextContent(current3.stateNode);
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor$1 = Symbol.for;
            COMPONENT_TYPE = symbolFor$1("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor$1("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor$1("selector.role");
            TEST_NAME_TYPE = symbolFor$1("selector.test_id");
            TEXT_TYPE = symbolFor$1("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ceil2 = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
          var NoContext = 0;
          var BatchedContext = 1;
          var EventContext = 2;
          var DiscreteEventContext = 4;
          var LegacyUnbatchedContext = 8;
          var RenderContext = 16;
          var CommitContext = 32;
          var RetryAfterError = 64;
          var RootIncomplete = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootIncomplete;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var mostRecentlyUpdatedRoot = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var nextEffect = null;
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsRenderPriority = NoPriority$1;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveHookEffectsMount = [];
          var pendingPassiveHookEffectsUnmount = [];
          var rootsWithPendingDiscreteUpdates = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var spawnedWorkDuringRender = null;
          var currentEventTime = NoTimestamp;
          var currentEventWipLanes = NoLanes;
          var currentEventPendingLanes = NoLanes;
          var isFlushingPassiveEffects = false;
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & BlockingMode) === NoMode) {
              return SyncLane;
            } else if ((mode & ConcurrentMode) === NoMode) {
              return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
            }
            if (currentEventWipLanes === NoLanes) {
              currentEventWipLanes = workInProgressRootIncludedLanes;
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (currentEventPendingLanes !== NoLanes) {
                currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
              }
              return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
            }
            var schedulerPriority = getCurrentPriorityLevel();
            var lane;
            if ((executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) {
              lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
            } else {
              var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
              lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
            }
            return lane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & BlockingMode) === NoMode) {
              return SyncLane;
            } else if ((mode & ConcurrentMode) === NoMode) {
              return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
            }
            if (currentEventWipLanes === NoLanes) {
              currentEventWipLanes = workInProgressRootIncludedLanes;
            }
            return findRetryLane(currentEventWipLanes);
          }
          function scheduleUpdateOnFiber(fiber, lane, eventTime) {
            checkForNestedUpdates();
            warnAboutRenderPhaseUpdatesInDEV(fiber);
            var root2 = markUpdateLaneFromFiberToRoot(fiber, lane);
            if (root2 === null) {
              warnAboutUpdateOnUnmountedFiberInDEV(fiber);
              return null;
            }
            markRootUpdated(root2, lane, eventTime);
            if (root2 === workInProgressRoot) {
              {
                workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
              }
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspended$1(root2, workInProgressRootRenderLanes);
              }
            }
            var priorityLevel = getCurrentPriorityLevel();
            if (lane === SyncLane) {
              if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
                schedulePendingInteractions(root2, lane);
                performSyncWorkOnRoot(root2);
              } else {
                ensureRootIsScheduled(root2, eventTime);
                schedulePendingInteractions(root2, lane);
                if (executionContext === NoContext) {
                  resetRenderTimer();
                  flushSyncCallbackQueue();
                }
              }
            } else {
              if ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
                if (rootsWithPendingDiscreteUpdates === null) {
                  rootsWithPendingDiscreteUpdates = new Set([root2]);
                } else {
                  rootsWithPendingDiscreteUpdates.add(root2);
                }
              }
              ensureRootIsScheduled(root2, eventTime);
              schedulePendingInteractions(root2, lane);
            }
            mostRecentlyUpdatedRoot = root2;
          }
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent;
              parent = parent.return;
            }
            if (node.tag === HostRoot) {
              var root2 = node.stateNode;
              return root2;
            } else {
              return null;
            }
          }
          function ensureRootIsScheduled(root2, currentTime) {
            var existingCallbackNode = root2.callbackNode;
            markStarvedLanesAsExpired(root2, currentTime);
            var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            var newCallbackPriority = returnNextLanesPriority();
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback(existingCallbackNode);
                root2.callbackNode = null;
                root2.callbackPriority = NoLanePriority;
              }
              return;
            }
            if (existingCallbackNode !== null) {
              var existingCallbackPriority = root2.callbackPriority;
              if (existingCallbackPriority === newCallbackPriority) {
                return;
              }
              cancelCallback(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLanePriority) {
              newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
            } else if (newCallbackPriority === SyncBatchedLanePriority) {
              newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root2));
            } else {
              var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
              newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
            }
            root2.callbackPriority = newCallbackPriority;
            root2.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root2) {
            currentEventTime = NoTimestamp;
            currentEventWipLanes = NoLanes;
            currentEventPendingLanes = NoLanes;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            var originalCallbackNode = root2.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root2.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var exitStatus = renderRootConcurrent(root2, lanes);
            if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
              prepareFreshStack(root2, NoLanes);
            } else if (exitStatus !== RootIncomplete) {
              if (exitStatus === RootErrored) {
                executionContext |= RetryAfterError;
                if (root2.hydrate) {
                  root2.hydrate = false;
                  clearContainer(root2.containerInfo);
                }
                lanes = getLanesToRetrySynchronouslyOnError(root2);
                if (lanes !== NoLanes) {
                  exitStatus = renderRootSync(root2, lanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now());
                throw fatalError;
              }
              var finishedWork = root2.current.alternate;
              root2.finishedWork = finishedWork;
              root2.finishedLanes = lanes;
              finishConcurrentRender(root2, exitStatus, lanes);
            }
            ensureRootIsScheduled(root2, now());
            if (root2.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root2);
            }
            return null;
          }
          function finishConcurrentRender(root2, exitStatus, lanes) {
            switch (exitStatus) {
              case RootIncomplete:
              case RootFatalErrored: {
                {
                  {
                    throw Error("Root did not complete. This is a bug in React.");
                  }
                }
              }
              case RootErrored: {
                commitRoot(root2);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root2, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root2.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root2, suspendedLanes);
                      break;
                    }
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2);
                break;
              }
              case RootCompleted: {
                commitRoot(root2);
                break;
              }
              default: {
                {
                  {
                    throw Error("Unknown root exit status.");
                  }
                }
              }
            }
          }
          function markRootSuspended$1(root2, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
            markRootSuspended(root2, suspendedLanes);
          }
          function performSyncWorkOnRoot(root2) {
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            flushPassiveEffects();
            var lanes;
            var exitStatus;
            if (root2 === workInProgressRoot && includesSomeLane(root2.expiredLanes, workInProgressRootRenderLanes)) {
              lanes = workInProgressRootRenderLanes;
              exitStatus = renderRootSync(root2, lanes);
              if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
                lanes = getNextLanes(root2, lanes);
                exitStatus = renderRootSync(root2, lanes);
              }
            } else {
              lanes = getNextLanes(root2, NoLanes);
              exitStatus = renderRootSync(root2, lanes);
            }
            if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
              executionContext |= RetryAfterError;
              if (root2.hydrate) {
                root2.hydrate = false;
                clearContainer(root2.containerInfo);
              }
              lanes = getLanesToRetrySynchronouslyOnError(root2);
              if (lanes !== NoLanes) {
                exitStatus = renderRootSync(root2, lanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            var finishedWork = root2.current.alternate;
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            commitRoot(root2);
            ensureRootIsScheduled(root2, now());
            return null;
          }
          function flushDiscreteUpdates() {
            if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
              {
                if ((executionContext & RenderContext) !== NoContext) {
                  error2("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
                }
              }
              return;
            }
            flushPendingDiscreteUpdates();
            flushPassiveEffects();
          }
          function flushPendingDiscreteUpdates() {
            if (rootsWithPendingDiscreteUpdates !== null) {
              var roots = rootsWithPendingDiscreteUpdates;
              rootsWithPendingDiscreteUpdates = null;
              roots.forEach(function(root2) {
                markDiscreteUpdatesExpired(root2);
                ensureRootIsScheduled(root2, now());
              });
            }
            flushSyncCallbackQueue();
          }
          function batchedUpdates$1(fn2, a3) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn2(a3);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function batchedEventUpdates$1(fn2, a3) {
            var prevExecutionContext = executionContext;
            executionContext |= EventContext;
            try {
              return fn2(a3);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function discreteUpdates$1(fn2, a3, b3, c3, d4) {
            var prevExecutionContext = executionContext;
            executionContext |= DiscreteEventContext;
            {
              try {
                return runWithPriority$1(UserBlockingPriority$2, fn2.bind(null, a3, b3, c3, d4));
              } finally {
                executionContext = prevExecutionContext;
                if (executionContext === NoContext) {
                  resetRenderTimer();
                  flushSyncCallbackQueue();
                }
              }
            }
          }
          function unbatchedUpdates(fn2, a3) {
            var prevExecutionContext = executionContext;
            executionContext &= ~BatchedContext;
            executionContext |= LegacyUnbatchedContext;
            try {
              return fn2(a3);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function flushSync(fn2, a3) {
            var prevExecutionContext = executionContext;
            if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
              {
                error2("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
              return fn2(a3);
            }
            executionContext |= BatchedContext;
            {
              try {
                if (fn2) {
                  return runWithPriority$1(ImmediatePriority$1, fn2.bind(null, a3));
                } else {
                  return void 0;
                }
              } finally {
                executionContext = prevExecutionContext;
                flushSyncCallbackQueue();
              }
            }
          }
          function pushRenderLanes(fiber, lanes) {
            push2(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root2, lanes) {
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            var timeoutHandle = root2.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root2.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                unwindInterruptedWork(interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root2;
            workInProgress = createWorkInProgress(root2.current, null);
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootIncomplete;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            {
              spawnedWorkDuringRender = null;
            }
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
          }
          function handleError(root2, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function pushInteractions(root2) {
            {
              var prevInteractions = tracing.__interactionsRef.current;
              tracing.__interactionsRef.current = root2.memoizedInteractions;
              return prevInteractions;
            }
          }
          function popInteractions(prevInteractions) {
            {
              tracing.__interactionsRef.current = prevInteractions;
            }
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootIncomplete) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError() {
            if (workInProgressRootExitStatus !== RootCompleted) {
              workInProgressRootExitStatus = RootErrored;
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootIncomplete;
          }
          function renderRootSync(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              prepareFreshStack(root2, lanes);
              startWorkOnPendingInteractions(root2, lanes);
            }
            var prevInteractions = pushInteractions(root2);
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            {
              popInteractions(prevInteractions);
            }
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              {
                {
                  throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              resetRenderTimer();
              prepareFreshStack(root2, lanes);
              startWorkOnPendingInteractions(root2, lanes);
            }
            var prevInteractions = pushInteractions(root2);
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            {
              popInteractions(prevInteractions);
            }
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              return RootIncomplete;
            } else {
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current3 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next2;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next2 = beginWork$1(current3, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next2 = beginWork$1(current3, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next2 === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next2;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current3 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next2 = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next2 = completeWork(current3, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next2 = completeWork(current3, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next2 !== null) {
                  workInProgress = next2;
                  return;
                }
                resetChildLanes(completedWork);
                if (returnFiber !== null && (returnFiber.flags & Incomplete) === NoFlags) {
                  if (returnFiber.firstEffect === null) {
                    returnFiber.firstEffect = completedWork.firstEffect;
                  }
                  if (completedWork.lastEffect !== null) {
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                    }
                    returnFiber.lastEffect = completedWork.lastEffect;
                  }
                  var flags = completedWork.flags;
                  if (flags > PerformedWork) {
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect = completedWork;
                    } else {
                      returnFiber.firstEffect = completedWork;
                    }
                    returnFiber.lastEffect = completedWork;
                  }
                }
              } else {
                var _next = unwindWork(completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.firstEffect = returnFiber.lastEffect = null;
                  returnFiber.flags |= Incomplete;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootIncomplete) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function resetChildLanes(completedWork) {
            if ((completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) {
              return;
            }
            var newChildLanes = NoLanes;
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var actualDuration = completedWork.actualDuration;
              var treeBaseDuration = completedWork.selfBaseDuration;
              var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
              var child = completedWork.child;
              while (child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                if (shouldBubbleActualDurations) {
                  actualDuration += child.actualDuration;
                }
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
              }
              var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;
              if (isTimedOutSuspense) {
                var primaryChildFragment = completedWork.child;
                if (primaryChildFragment !== null) {
                  treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                }
              }
              completedWork.actualDuration = actualDuration;
              completedWork.treeBaseDuration = treeBaseDuration;
            } else {
              var _child = completedWork.child;
              while (_child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                _child = _child.sibling;
              }
            }
            completedWork.childLanes = newChildLanes;
          }
          function commitRoot(root2) {
            var renderPriorityLevel = getCurrentPriorityLevel();
            runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root2, renderPriorityLevel));
            return null;
          }
          function commitRootImpl(root2, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            var finishedWork = root2.finishedWork;
            var lanes = root2.finishedLanes;
            if (finishedWork === null) {
              return null;
            }
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            if (!(finishedWork !== root2.current)) {
              {
                throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            root2.callbackNode = null;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root2, remainingLanes);
            if (rootsWithPendingDiscreteUpdates !== null) {
              if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root2)) {
                rootsWithPendingDiscreteUpdates.delete(root2);
              }
            }
            if (root2 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            var firstEffect;
            if (finishedWork.flags > PerformedWork) {
              if (finishedWork.lastEffect !== null) {
                finishedWork.lastEffect.nextEffect = finishedWork;
                firstEffect = finishedWork.firstEffect;
              } else {
                firstEffect = finishedWork;
              }
            } else {
              firstEffect = finishedWork.firstEffect;
            }
            if (firstEffect !== null) {
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              var prevInteractions = pushInteractions(root2);
              ReactCurrentOwner$2.current = null;
              focusedInstanceHandle = prepareForCommit(root2.containerInfo);
              shouldFireAfterActiveInstanceBlur = false;
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var error3 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, error3);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              focusedInstanceHandle = null;
              {
                recordCommitTime();
              }
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitMutationEffects, null, root2, renderPriorityLevel);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var _error = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              resetAfterCommit(root2.containerInfo);
              root2.current = finishedWork;
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitLayoutEffects, null, root2, lanes);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var _error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error2);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              nextEffect = null;
              requestPaint();
              {
                popInteractions(prevInteractions);
              }
              executionContext = prevExecutionContext;
            } else {
              root2.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root2;
              pendingPassiveEffectsLanes = lanes;
              pendingPassiveEffectsRenderPriority = renderPriorityLevel;
            } else {
              nextEffect = firstEffect;
              while (nextEffect !== null) {
                var nextNextEffect = nextEffect.nextEffect;
                nextEffect.nextEffect = null;
                if (nextEffect.flags & Deletion) {
                  detachFiberAfterEffects(nextEffect);
                }
                nextEffect = nextNextEffect;
              }
            }
            remainingLanes = root2.pendingLanes;
            if (remainingLanes !== NoLanes) {
              {
                if (spawnedWorkDuringRender !== null) {
                  var expirationTimes = spawnedWorkDuringRender;
                  spawnedWorkDuringRender = null;
                  for (var i3 = 0; i3 < expirationTimes.length; i3++) {
                    scheduleInteractions(root2, expirationTimes[i3], root2.memoizedInteractions);
                  }
                }
                schedulePendingInteractions(root2, remainingLanes);
              }
            } else {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                finishPendingInteractions(root2, lanes);
              }
            }
            if (remainingLanes === SyncLane) {
              if (root2 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root2;
              }
            } else {
              nestedUpdateCount = 0;
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root2, now());
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var _error3 = firstUncaughtError;
              firstUncaughtError = null;
              throw _error3;
            }
            if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
              return null;
            }
            flushSyncCallbackQueue();
            return null;
          }
          function commitBeforeMutationEffects() {
            while (nextEffect !== null) {
              var current3 = nextEffect.alternate;
              if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
                if ((nextEffect.flags & Deletion) !== NoFlags) {
                  if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
                    shouldFireAfterActiveInstanceBlur = true;
                  }
                } else {
                  if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current3, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) {
                    shouldFireAfterActiveInstanceBlur = true;
                  }
                }
              }
              var flags = nextEffect.flags;
              if ((flags & Snapshot2) !== NoFlags) {
                setCurrentFiber(nextEffect);
                commitBeforeMutationLifeCycles(current3, nextEffect);
                resetCurrentFiber();
              }
              if ((flags & Passive) !== NoFlags) {
                if (!rootDoesHavePassiveEffects) {
                  rootDoesHavePassiveEffects = true;
                  scheduleCallback(NormalPriority$1, function() {
                    flushPassiveEffects();
                    return null;
                  });
                }
              }
              nextEffect = nextEffect.nextEffect;
            }
          }
          function commitMutationEffects(root2, renderPriorityLevel) {
            while (nextEffect !== null) {
              setCurrentFiber(nextEffect);
              var flags = nextEffect.flags;
              if (flags & ContentReset) {
                commitResetTextContent(nextEffect);
              }
              if (flags & Ref) {
                var current3 = nextEffect.alternate;
                if (current3 !== null) {
                  commitDetachRef(current3);
                }
              }
              var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);
              switch (primaryFlags) {
                case Placement: {
                  commitPlacement(nextEffect);
                  nextEffect.flags &= ~Placement;
                  break;
                }
                case PlacementAndUpdate: {
                  commitPlacement(nextEffect);
                  nextEffect.flags &= ~Placement;
                  var _current = nextEffect.alternate;
                  commitWork(_current, nextEffect);
                  break;
                }
                case Hydrating: {
                  nextEffect.flags &= ~Hydrating;
                  break;
                }
                case HydratingAndUpdate: {
                  nextEffect.flags &= ~Hydrating;
                  var _current2 = nextEffect.alternate;
                  commitWork(_current2, nextEffect);
                  break;
                }
                case Update: {
                  var _current3 = nextEffect.alternate;
                  commitWork(_current3, nextEffect);
                  break;
                }
                case Deletion: {
                  commitDeletion(root2, nextEffect);
                  break;
                }
              }
              resetCurrentFiber();
              nextEffect = nextEffect.nextEffect;
            }
          }
          function commitLayoutEffects(root2, committedLanes) {
            while (nextEffect !== null) {
              setCurrentFiber(nextEffect);
              var flags = nextEffect.flags;
              if (flags & (Update | Callback)) {
                var current3 = nextEffect.alternate;
                commitLifeCycles(root2, current3, nextEffect);
              }
              {
                if (flags & Ref) {
                  commitAttachRef(nextEffect);
                }
              }
              resetCurrentFiber();
              nextEffect = nextEffect.nextEffect;
            }
          }
          function flushPassiveEffects() {
            if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
              var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
              pendingPassiveEffectsRenderPriority = NoPriority$1;
              {
                return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
              }
            }
            return false;
          }
          function enqueuePendingPassiveHookEffectMount(fiber, effect) {
            pendingPassiveHookEffectsMount.push(effect, fiber);
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
            pendingPassiveHookEffectsUnmount.push(effect, fiber);
            {
              fiber.flags |= PassiveUnmountPendingDev;
              var alternate = fiber.alternate;
              if (alternate !== null) {
                alternate.flags |= PassiveUnmountPendingDev;
              }
            }
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          function invokePassiveEffectCreate(effect) {
            var create8 = effect.create;
            effect.destroy = create8();
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var root2 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Cannot flush passive effects while already rendering.");
              }
            }
            {
              isFlushingPassiveEffects = true;
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root2);
            var unmountEffects = pendingPassiveHookEffectsUnmount;
            pendingPassiveHookEffectsUnmount = [];
            for (var i3 = 0; i3 < unmountEffects.length; i3 += 2) {
              var _effect = unmountEffects[i3];
              var fiber = unmountEffects[i3 + 1];
              var destroy = _effect.destroy;
              _effect.destroy = void 0;
              {
                fiber.flags &= ~PassiveUnmountPendingDev;
                var alternate = fiber.alternate;
                if (alternate !== null) {
                  alternate.flags &= ~PassiveUnmountPendingDev;
                }
              }
              if (typeof destroy === "function") {
                {
                  setCurrentFiber(fiber);
                  {
                    invokeGuardedCallback(null, destroy, null);
                  }
                  if (hasCaughtError()) {
                    if (!(fiber !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var error3 = clearCaughtError();
                    captureCommitPhaseError(fiber, error3);
                  }
                  resetCurrentFiber();
                }
              }
            }
            var mountEffects = pendingPassiveHookEffectsMount;
            pendingPassiveHookEffectsMount = [];
            for (var _i = 0; _i < mountEffects.length; _i += 2) {
              var _effect2 = mountEffects[_i];
              var _fiber = mountEffects[_i + 1];
              {
                setCurrentFiber(_fiber);
                {
                  invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
                }
                if (hasCaughtError()) {
                  if (!(_fiber !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error4 = clearCaughtError();
                  captureCommitPhaseError(_fiber, _error4);
                }
                resetCurrentFiber();
              }
            }
            var effect = root2.current.firstEffect;
            while (effect !== null) {
              var nextNextEffect = effect.nextEffect;
              effect.nextEffect = null;
              if (effect.flags & Deletion) {
                detachFiberAfterEffects(effect);
              }
              effect = nextNextEffect;
            }
            {
              popInteractions(prevInteractions);
              finishPendingInteractions(root2, lanes);
            }
            {
              isFlushingPassiveEffects = false;
            }
            executionContext = prevExecutionContext;
            flushSyncCallbackQueue();
            nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error3) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error3;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error3) {
            var errorInfo = createCapturedValue(error3, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            enqueueUpdate(rootFiber, update);
            var eventTime = requestEventTime();
            var root2 = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
            if (root2 !== null) {
              markRootUpdated(root2, SyncLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
              schedulePendingInteractions(root2, SyncLane);
            }
          }
          function captureCommitPhaseError(sourceFiber, error3) {
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error3);
              return;
            }
            var fiber = sourceFiber.return;
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error3);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValue(error3, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  enqueueUpdate(fiber, update);
                  var eventTime = requestEventTime();
                  var root2 = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
                  if (root2 !== null) {
                    markRootUpdated(root2, SyncLane, eventTime);
                    ensureRootIsScheduled(root2, eventTime);
                    schedulePendingInteractions(root2, SyncLane);
                  } else {
                    if (typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                      try {
                        instance.componentDidCatch(error3, errorInfo);
                      } catch (errorToIgnore) {
                      }
                    }
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
          }
          function pingSuspendedRoot(root2, wakeable, pingedLanes) {
            var pingCache = root2.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root2, pingedLanes);
            if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root2, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
            schedulePendingInteractions(root2, pingedLanes);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root2 = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
            if (root2 !== null) {
              markRootUpdated(root2, retryLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
              schedulePendingInteractions(root2, retryLane);
            }
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            {
              retryCache = boundaryFiber.stateNode;
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil2(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              {
                {
                  throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
                }
              }
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                error2("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
                return;
              }
              var componentName = getComponentName(fiber.type) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
              }
              var previousFiber = current2;
              try {
                setCurrentFiber(fiber);
                error2("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var didWarnStateUpdateForUnmountedComponent = null;
          function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
            {
              var tag = fiber.tag;
              if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
                return;
              }
              if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
                return;
              }
              var componentName = getComponentName(fiber.type) || "ReactComponent";
              if (didWarnStateUpdateForUnmountedComponent !== null) {
                if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForUnmountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
              }
              if (isFlushingPassiveEffects)
                ;
              else {
                var previousFiber = current2;
                try {
                  setCurrentFiber(fiber);
                  error2("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.", tag === ClassComponent ? "the componentWillUnmount method" : "a useEffect cleanup function");
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current3, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current3, unitOfWork, lanes);
              } catch (originalError) {
                if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current3, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  throw replayError;
                } else {
                  throw originalError;
                }
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentName(fiber.type) || "Unknown";
                      error2("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error2("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          var IsThisRendererActing = {
            current: false
          };
          function warnIfNotScopedWithMatchingAct(fiber) {
            {
              if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
                var previousFiber = current2;
                try {
                  setCurrentFiber(fiber);
                  error2("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);");
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
            {
              if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                error2("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
              }
            }
          }
          function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
            {
              if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                var previousFiber = current2;
                try {
                  setCurrentFiber(fiber);
                  error2("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
          var didWarnAboutUnmockedScheduler = false;
          function warnIfUnmockedScheduler(fiber) {
            {
              if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === void 0) {
                if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                  didWarnAboutUnmockedScheduler = true;
                  error2(`In Concurrent or Sync modes, the "scheduler" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: 
jest.mock('scheduler', () => require('scheduler/unstable_mock'));

For more info, visit https://reactjs.org/link/mock-scheduler`);
                }
              }
            }
          }
          function computeThreadID(root2, lane) {
            return lane * 1e3 + root2.interactionThreadID;
          }
          function markSpawnedWork(lane) {
            if (spawnedWorkDuringRender === null) {
              spawnedWorkDuringRender = [lane];
            } else {
              spawnedWorkDuringRender.push(lane);
            }
          }
          function scheduleInteractions(root2, lane, interactions) {
            if (interactions.size > 0) {
              var pendingInteractionMap = root2.pendingInteractionMap;
              var pendingInteractions = pendingInteractionMap.get(lane);
              if (pendingInteractions != null) {
                interactions.forEach(function(interaction) {
                  if (!pendingInteractions.has(interaction)) {
                    interaction.__count++;
                  }
                  pendingInteractions.add(interaction);
                });
              } else {
                pendingInteractionMap.set(lane, new Set(interactions));
                interactions.forEach(function(interaction) {
                  interaction.__count++;
                });
              }
              var subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null) {
                var threadID = computeThreadID(root2, lane);
                subscriber.onWorkScheduled(interactions, threadID);
              }
            }
          }
          function schedulePendingInteractions(root2, lane) {
            scheduleInteractions(root2, lane, tracing.__interactionsRef.current);
          }
          function startWorkOnPendingInteractions(root2, lanes) {
            var interactions = new Set();
            root2.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledLane) {
              if (includesSomeLane(lanes, scheduledLane)) {
                scheduledInteractions.forEach(function(interaction) {
                  return interactions.add(interaction);
                });
              }
            });
            root2.memoizedInteractions = interactions;
            if (interactions.size > 0) {
              var subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null) {
                var threadID = computeThreadID(root2, lanes);
                try {
                  subscriber.onWorkStarted(interactions, threadID);
                } catch (error3) {
                  scheduleCallback(ImmediatePriority$1, function() {
                    throw error3;
                  });
                }
              }
            }
          }
          function finishPendingInteractions(root2, committedLanes) {
            var remainingLanesAfterCommit = root2.pendingLanes;
            var subscriber;
            try {
              subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null && root2.memoizedInteractions.size > 0) {
                var threadID = computeThreadID(root2, committedLanes);
                subscriber.onWorkStopped(root2.memoizedInteractions, threadID);
              }
            } catch (error3) {
              scheduleCallback(ImmediatePriority$1, function() {
                throw error3;
              });
            } finally {
              var pendingInteractionMap = root2.pendingInteractionMap;
              pendingInteractionMap.forEach(function(scheduledInteractions, lane) {
                if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
                  pendingInteractionMap.delete(lane);
                  scheduledInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      try {
                        subscriber.onInteractionScheduledWorkCompleted(interaction);
                      } catch (error3) {
                        scheduleCallback(ImmediatePriority$1, function() {
                          throw error3;
                        });
                      }
                    }
                  });
                }
              });
            }
          }
          function shouldForceFlushFallbacksInDEV() {
            return actingUpdatesScopeDepth > 0;
          }
          var actingUpdatesScopeDepth = 0;
          function detachFiberAfterEffects(fiber) {
            fiber.sibling = null;
            fiber.stateNode = null;
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element2) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element2.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root2, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root2, element2) {
            {
              if (root2.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element2, root2, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root2, families) {
            {
              var hostInstances = new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              new Map([[nonExtensibleObject, null]]);
              new Set([nonExtensibleObject]);
            } catch (e4) {
              hasBadMapPolyfill = true;
            }
          }
          var debugCounter = 1;
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.nextEffect = null;
            this.firstEffect = null;
            this.lastEffect = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugID = debugCounter++;
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component) {
            if (typeof Component === "function") {
              return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
            } else if (Component !== void 0 && Component !== null) {
              var $$typeof = Component.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current3, pendingProps) {
            var workInProgress2 = current3.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current3.tag, pendingProps, current3.key, current3.mode);
              workInProgress2.elementType = current3.elementType;
              workInProgress2.type = current3.type;
              workInProgress2.stateNode = current3.stateNode;
              {
                workInProgress2._debugID = current3._debugID;
                workInProgress2._debugSource = current3._debugSource;
                workInProgress2._debugOwner = current3._debugOwner;
                workInProgress2._debugHookTypes = current3._debugHookTypes;
              }
              workInProgress2.alternate = current3;
              current3.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current3.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.nextEffect = null;
              workInProgress2.firstEffect = null;
              workInProgress2.lastEffect = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.childLanes = current3.childLanes;
            workInProgress2.lanes = current3.lanes;
            workInProgress2.child = current3.child;
            workInProgress2.memoizedProps = current3.memoizedProps;
            workInProgress2.memoizedState = current3.memoizedState;
            workInProgress2.updateQueue = current3.updateQueue;
            var currentDependencies = current3.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current3.sibling;
            workInProgress2.index = current3.index;
            workInProgress2.ref = current3.ref;
            {
              workInProgress2.selfBaseDuration = current3.selfBaseDuration;
              workInProgress2.treeBaseDuration = current3.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current3._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current3.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current3.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current3.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= Placement;
            workInProgress2.nextEffect = null;
            workInProgress2.firstEffect = null;
            workInProgress2.lastEffect = null;
            var current3 = workInProgress2.alternate;
            if (current3 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current3.childLanes;
              workInProgress2.lanes = current3.lanes;
              workInProgress2.child = current3.child;
              workInProgress2.memoizedProps = current3.memoizedProps;
              workInProgress2.memoizedState = current3.memoizedState;
              workInProgress2.updateQueue = current3.updateQueue;
              workInProgress2.type = current3.type;
              var currentDependencies = current3.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current3.selfBaseDuration;
                workInProgress2.treeBaseDuration = current3.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode | BlockingMode | StrictMode;
            } else if (tag === BlockingRoot) {
              mode = BlockingMode | StrictMode;
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= DebugTracingMode;
                    break;
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictMode;
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                    return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);
                  case REACT_SCOPE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                        case REACT_BLOCK_TYPE:
                          fiberTag = Block;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentName(owner.type) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    {
                      {
                        throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
                      }
                    }
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element2, mode, lanes) {
            var owner = null;
            {
              owner = element2._owner;
            }
            var type = element2.type;
            var key = element2.key;
            var pendingProps = element2.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element2._source;
              fiber._debugOwner = element2._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error2('Profiler must specify an "id" as a prop');
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.type = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.type = REACT_SUSPENSE_TYPE;
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_SUSPENSE_LIST_TYPE;
            }
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_OFFSCREEN_TYPE;
            }
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
            var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_LEGACY_HIDDEN_TYPE;
            }
            fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            fiber.type = "DELETED";
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.nextEffect = source.nextEffect;
            target.firstEffect = source.firstEffect;
            target.lastEffect = source.lastEffect;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugID = source._debugID;
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.hydrate = hydrate2;
            this.callbackNode = null;
            this.callbackPriority = NoLanePriority;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.interactionThreadID = tracing.unstable_getThreadID();
              this.memoizedInteractions = new Set();
              this.pendingInteractionMap = new Map();
            }
            {
              switch (tag) {
                case BlockingRoot:
                  this._debugRootType = "createBlockingRoot()";
                  break;
                case ConcurrentRoot:
                  this._debugRootType = "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = "createLegacyRoot()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, hydrationCallbacks) {
            var root2 = new FiberRootNode(containerInfo, tag, hydrate2);
            var uninitializedFiber = createHostRootFiber(tag);
            root2.current = uninitializedFiber;
            uninitializedFiber.stateNode = root2;
            initializeUpdateQueue(uninitializedFiber);
            return root2;
          }
          function registerMutableSourceForHydration(root2, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version2 = getVersion(mutableSource._source);
            if (root2.mutableSourceEagerHydrationData == null) {
              root2.mutableSourceEagerHydrationData = [mutableSource, version2];
            } else {
              root2.mutableSourceEagerHydrationData.push(mutableSource, version2);
            }
          }
          function createPortal(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            return {
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get2(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component = fiber.type;
              if (isContextProvider(Component)) {
                return processChildContext(fiber, Component, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get2(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  {
                    {
                      throw Error("Unable to find node on an unmounted component.");
                    }
                  }
                } else {
                  {
                    {
                      throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
                    }
                  }
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictMode) {
                var componentName = getComponentName(fiber.type) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current2;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictMode) {
                      error2("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error2("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrate2, hydrationCallbacks) {
            return createFiberRoot(containerInfo, tag, hydrate2);
          }
          function updateContainer(element2, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element2);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            {
              if (typeof jest !== "undefined") {
                warnIfUnmockedScheduler(current$1);
                warnIfNotScopedWithMatchingAct(current$1);
              }
            }
            var lane = requestUpdateLane(current$1);
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current2 !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error2("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current2.type) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element: element2
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error2("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            enqueueUpdate(current$1, update);
            scheduleUpdateOnFiber(current$1, lane, eventTime);
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptUserBlockingHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = InputDiscreteHydrationLane;
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = SelectiveHydrationLane;
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function runWithPriority$2(priority, fn2) {
            try {
              setCurrentUpdateLanePriority(priority);
              return fn2();
            } finally {
            }
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.tag === FundamentalComponent) {
              return hostFiber.stateNode.instance;
            }
            return hostFiber.stateNode;
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path2, index2) {
              var key = path2[index2];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              if (index2 + 1 === path2.length) {
                if (Array.isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path2, index2 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path2) {
              return copyWithDeleteImpl(obj, path2, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2];
                updated[newKey] = updated[oldKey];
                if (Array.isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index2 + 1);
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i3 = 0; i3 < newPath.length - 1; i3++) {
                  if (oldPath[i3] !== newPath[i3]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path2, index2, value) {
              if (index2 >= path2.length) {
                return value;
              }
              var key = path2[index2];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path2, index2 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path2, value) {
              return copyWithSetImpl(obj, path2, 0, value);
            };
            var findHook = function(fiber, id2) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id2 > 0) {
                currentHook2 = currentHook2.next;
                id2--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id2, path2, value) {
              var hook = findHook(fiber, id2);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path2, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideHookStateDeletePath = function(fiber, id2, path2) {
              var hook = findHook(fiber, id2);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path2);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideHookStateRenamePath = function(fiber, id2, oldPath, newPath) {
              var hook = findHook(fiber, id2);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideProps = function(fiber, path2, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path2, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            overridePropsDeletePath = function(fiber, path2) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path2);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            scheduleUpdate = function(fiber) {
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current2;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              getCurrentFiber: getCurrentFiberForDevTools
            });
          }
          function ReactDOMRoot(container, options2) {
            this._internalRoot = createRootImpl(container, ConcurrentRoot, options2);
          }
          function ReactDOMBlockingRoot(container, tag, options2) {
            this._internalRoot = createRootImpl(container, tag, options2);
          }
          ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function(children) {
            var root2 = this._internalRoot;
            {
              if (typeof arguments[1] === "function") {
                error2("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
              var container = root2.containerInfo;
              if (container.nodeType !== COMMENT_NODE2) {
                var hostInstance = findHostInstanceWithNoPortals(root2.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error2("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root2, null, null);
          };
          ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error2("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root2 = this._internalRoot;
            var container = root2.containerInfo;
            updateContainer(null, root2, null, function() {
              unmarkContainerAsRoot(container);
            });
          };
          function createRootImpl(container, tag, options2) {
            var hydrate2 = options2 != null && options2.hydrate === true;
            var hydrationCallbacks = options2 != null && options2.hydrationOptions || null;
            var mutableSources = options2 != null && options2.hydrationOptions != null && options2.hydrationOptions.mutableSources || null;
            var root2 = createContainer(container, tag, hydrate2);
            markContainerAsRoot(root2.current, container);
            var containerNodeType = container.nodeType;
            {
              var rootContainerElement = container.nodeType === COMMENT_NODE2 ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
            }
            if (mutableSources) {
              for (var i3 = 0; i3 < mutableSources.length; i3++) {
                var mutableSource = mutableSources[i3];
                registerMutableSourceForHydration(root2, mutableSource);
              }
            }
            return root2;
          }
          function createLegacyRoot(container, options2) {
            return new ReactDOMBlockingRoot(container, LegacyRoot, options2);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE2 || node.nodeType === DOCUMENT_NODE2 || node.nodeType === DOCUMENT_FRAGMENT_NODE2 || node.nodeType === COMMENT_NODE2 && node.nodeValue === " react-mount-point-unstable "));
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          var warnedAboutHydrateAPI = false;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE2) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error2("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error2("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE2 && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error2("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE2) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function shouldHydrateDueToLegacyHeuristic(container) {
            var rootElement = getReactRootElementInContainer(container);
            return !!(rootElement && rootElement.nodeType === ELEMENT_NODE2 && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
          }
          function legacyCreateRootFromDOMContainer(container, forceHydrate) {
            var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
            if (!shouldHydrate) {
              var warned = false;
              var rootSibling;
              while (rootSibling = container.lastChild) {
                {
                  if (!warned && rootSibling.nodeType === ELEMENT_NODE2 && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                    warned = true;
                    error2("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                  }
                }
                container.removeChild(rootSibling);
              }
            }
            {
              if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
                warnedAboutHydrateAPI = true;
                warn("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v18. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
              }
            }
            return createLegacyRoot(container, shouldHydrate ? {
              hydrate: true
            } : void 0);
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error2("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var root2 = container._reactRootContainer;
            var fiberRoot;
            if (!root2) {
              root2 = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
              fiberRoot = root2._internalRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(fiberRoot);
                  originalCallback.call(instance);
                };
              }
              unbatchedUpdates(function() {
                updateContainer(children, fiberRoot, parentComponent, callback);
              });
            } else {
              fiberRoot = root2._internalRoot;
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(fiberRoot);
                  _originalCallback.call(instance);
                };
              }
              updateContainer(children, fiberRoot, parentComponent, callback);
            }
            return getPublicRootInstance(fiberRoot);
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error2("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE2) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element2, container, callback) {
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error2("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element2, container, true, callback);
          }
          function render(element2, container, callback) {
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error2("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element2, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element2, containerNode, callback) {
            if (!isValidContainer(containerNode)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            if (!(parentComponent != null && has2(parentComponent))) {
              {
                throw Error("parentComponent must be a valid React Component");
              }
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element2, containerNode, false, callback);
          }
          function unmountComponentAtNode(container) {
            if (!isValidContainer(container)) {
              {
                throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error2("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error2("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              unbatchedUpdates(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE2 && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error2("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setAttemptHydrationAtPriority(runWithPriority$2);
          var didWarnAboutUnstableCreatePortal = false;
          {
            if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error2("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            return createPortal(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element2, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element2, containerNode, callback);
          }
          function unstable_createPortal(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            {
              if (!didWarnAboutUnstableCreatePortal) {
                didWarnAboutUnstableCreatePortal = true;
                warn('The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 18+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the "unstable_" prefix.');
              }
            }
            return createPortal$1(children, container, key);
          }
          var Internals = {
            Events: [
              getInstanceFromNode,
              getNodeFromInstance,
              getFiberCurrentPropsFromNode,
              enqueueStateRestore,
              restoreStateIfNeeded,
              flushPassiveEffects,
              IsThisRendererActing
            ]
          };
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync;
          exports.hydrate = hydrate;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_createPortal = unstable_createPortal;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/@state-designer/core/src/lib/types.js
  var require_types = __commonJS({
    "node_modules/@state-designer/core/src/lib/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.VerboseType = void 0;
      var VerboseType;
      (function(VerboseType2) {
        VerboseType2["Condition"] = "condition";
        VerboseType2["Action"] = "action";
        VerboseType2["SecretAction"] = "secretAction";
        VerboseType2["Event"] = "event";
        VerboseType2["State"] = "state";
        VerboseType2["AsyncEvent"] = "asyncEvent";
        VerboseType2["TransitionEvent"] = "transitionEvent";
        VerboseType2["RepeatEvent"] = "repeatEvent";
        VerboseType2["Transition"] = "transition";
        VerboseType2["Notification"] = "notification";
        VerboseType2["EventHandler"] = "eventHandler";
        VerboseType2["Queue"] = "queue";
      })(VerboseType = exports.VerboseType || (exports.VerboseType = {}));
    }
  });

  // node_modules/@state-designer/core/src/lib/createDesign.js
  var require_createDesign = __commonJS({
    "node_modules/@state-designer/core/src/lib/createDesign.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.createDesign = void 0;
      function createDesign2(design) {
        return Object.assign(Object.assign({}, design), { createEventHandlerDesign: (eventHandlerDesign) => eventHandlerDesign, createEventHandlerObjectDesign: (eventHandlerItemDesign) => eventHandlerItemDesign, createAsyncEventDesign: (asyncEventDesign) => asyncEventDesign, createRepeatEventDesign: (repeatEventDesign) => repeatEventDesign, createState: (stateDesign) => stateDesign, createActionDesign: (actionDesign) => actionDesign, createConditionDesign: (conditionDesign) => conditionDesign, createResultDesign: (resultDesign) => resultDesign, createTimeDesign: (timeDesign) => timeDesign, createValueDesign: (valueDesign) => valueDesign });
      }
      exports.createDesign = createDesign2;
    }
  });

  // node_modules/lodash/lodash.js
  var require_lodash = __commonJS({
    "node_modules/lodash/lodash.js"(exports, module) {
      (function() {
        var undefined2;
        var VERSION = "4.17.21";
        var LARGE_ARRAY_SIZE = 200;
        var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
        var HASH_UNDEFINED = "__lodash_hash_undefined__";
        var MAX_MEMOIZE_SIZE = 500;
        var PLACEHOLDER = "__lodash_placeholder__";
        var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
        var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
        var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
        var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
        var HOT_COUNT = 800, HOT_SPAN = 16;
        var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
        var INFINITY = 1 / 0, MAX_SAFE_INTEGER2 = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
        var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
        var wrapFlags = [
          ["ary", WRAP_ARY_FLAG],
          ["bind", WRAP_BIND_FLAG],
          ["bindKey", WRAP_BIND_KEY_FLAG],
          ["curry", WRAP_CURRY_FLAG],
          ["curryRight", WRAP_CURRY_RIGHT_FLAG],
          ["flip", WRAP_FLIP_FLAG],
          ["partial", WRAP_PARTIAL_FLAG],
          ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
          ["rearg", WRAP_REARG_FLAG]
        ];
        var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
        var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
        var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
        var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
        var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
        var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
        var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
        var reTrimStart = /^\s+/;
        var reWhitespace = /\s/;
        var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
        var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
        var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
        var reEscapeChar = /\\(\\)?/g;
        var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
        var reFlags = /\w*$/;
        var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
        var reIsBinary = /^0b[01]+$/i;
        var reIsHostCtor = /^\[object .+?Constructor\]$/;
        var reIsOctal = /^0o[0-7]+$/i;
        var reIsUint = /^(?:0|[1-9]\d*)$/;
        var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
        var reNoMatch = /($^)/;
        var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
        var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
        var rsApos = "['\u2019]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
        var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
        var reApos = RegExp(rsApos, "g");
        var reComboMark = RegExp(rsCombo, "g");
        var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
        var reUnicodeWord = RegExp([
          rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
          rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
          rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
          rsUpper + "+" + rsOptContrUpper,
          rsOrdUpper,
          rsOrdLower,
          rsDigits,
          rsEmoji
        ].join("|"), "g");
        var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
        var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
        var contextProps = [
          "Array",
          "Buffer",
          "DataView",
          "Date",
          "Error",
          "Float32Array",
          "Float64Array",
          "Function",
          "Int8Array",
          "Int16Array",
          "Int32Array",
          "Map",
          "Math",
          "Object",
          "Promise",
          "RegExp",
          "Set",
          "String",
          "Symbol",
          "TypeError",
          "Uint8Array",
          "Uint8ClampedArray",
          "Uint16Array",
          "Uint32Array",
          "WeakMap",
          "_",
          "clearTimeout",
          "isFinite",
          "parseInt",
          "setTimeout"
        ];
        var templateCounter = -1;
        var typedArrayTags = {};
        typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
        typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
        var cloneableTags = {};
        cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
        cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
        var deburredLetters = {
          "\xC0": "A",
          "\xC1": "A",
          "\xC2": "A",
          "\xC3": "A",
          "\xC4": "A",
          "\xC5": "A",
          "\xE0": "a",
          "\xE1": "a",
          "\xE2": "a",
          "\xE3": "a",
          "\xE4": "a",
          "\xE5": "a",
          "\xC7": "C",
          "\xE7": "c",
          "\xD0": "D",
          "\xF0": "d",
          "\xC8": "E",
          "\xC9": "E",
          "\xCA": "E",
          "\xCB": "E",
          "\xE8": "e",
          "\xE9": "e",
          "\xEA": "e",
          "\xEB": "e",
          "\xCC": "I",
          "\xCD": "I",
          "\xCE": "I",
          "\xCF": "I",
          "\xEC": "i",
          "\xED": "i",
          "\xEE": "i",
          "\xEF": "i",
          "\xD1": "N",
          "\xF1": "n",
          "\xD2": "O",
          "\xD3": "O",
          "\xD4": "O",
          "\xD5": "O",
          "\xD6": "O",
          "\xD8": "O",
          "\xF2": "o",
          "\xF3": "o",
          "\xF4": "o",
          "\xF5": "o",
          "\xF6": "o",
          "\xF8": "o",
          "\xD9": "U",
          "\xDA": "U",
          "\xDB": "U",
          "\xDC": "U",
          "\xF9": "u",
          "\xFA": "u",
          "\xFB": "u",
          "\xFC": "u",
          "\xDD": "Y",
          "\xFD": "y",
          "\xFF": "y",
          "\xC6": "Ae",
          "\xE6": "ae",
          "\xDE": "Th",
          "\xFE": "th",
          "\xDF": "ss",
          "\u0100": "A",
          "\u0102": "A",
          "\u0104": "A",
          "\u0101": "a",
          "\u0103": "a",
          "\u0105": "a",
          "\u0106": "C",
          "\u0108": "C",
          "\u010A": "C",
          "\u010C": "C",
          "\u0107": "c",
          "\u0109": "c",
          "\u010B": "c",
          "\u010D": "c",
          "\u010E": "D",
          "\u0110": "D",
          "\u010F": "d",
          "\u0111": "d",
          "\u0112": "E",
          "\u0114": "E",
          "\u0116": "E",
          "\u0118": "E",
          "\u011A": "E",
          "\u0113": "e",
          "\u0115": "e",
          "\u0117": "e",
          "\u0119": "e",
          "\u011B": "e",
          "\u011C": "G",
          "\u011E": "G",
          "\u0120": "G",
          "\u0122": "G",
          "\u011D": "g",
          "\u011F": "g",
          "\u0121": "g",
          "\u0123": "g",
          "\u0124": "H",
          "\u0126": "H",
          "\u0125": "h",
          "\u0127": "h",
          "\u0128": "I",
          "\u012A": "I",
          "\u012C": "I",
          "\u012E": "I",
          "\u0130": "I",
          "\u0129": "i",
          "\u012B": "i",
          "\u012D": "i",
          "\u012F": "i",
          "\u0131": "i",
          "\u0134": "J",
          "\u0135": "j",
          "\u0136": "K",
          "\u0137": "k",
          "\u0138": "k",
          "\u0139": "L",
          "\u013B": "L",
          "\u013D": "L",
          "\u013F": "L",
          "\u0141": "L",
          "\u013A": "l",
          "\u013C": "l",
          "\u013E": "l",
          "\u0140": "l",
          "\u0142": "l",
          "\u0143": "N",
          "\u0145": "N",
          "\u0147": "N",
          "\u014A": "N",
          "\u0144": "n",
          "\u0146": "n",
          "\u0148": "n",
          "\u014B": "n",
          "\u014C": "O",
          "\u014E": "O",
          "\u0150": "O",
          "\u014D": "o",
          "\u014F": "o",
          "\u0151": "o",
          "\u0154": "R",
          "\u0156": "R",
          "\u0158": "R",
          "\u0155": "r",
          "\u0157": "r",
          "\u0159": "r",
          "\u015A": "S",
          "\u015C": "S",
          "\u015E": "S",
          "\u0160": "S",
          "\u015B": "s",
          "\u015D": "s",
          "\u015F": "s",
          "\u0161": "s",
          "\u0162": "T",
          "\u0164": "T",
          "\u0166": "T",
          "\u0163": "t",
          "\u0165": "t",
          "\u0167": "t",
          "\u0168": "U",
          "\u016A": "U",
          "\u016C": "U",
          "\u016E": "U",
          "\u0170": "U",
          "\u0172": "U",
          "\u0169": "u",
          "\u016B": "u",
          "\u016D": "u",
          "\u016F": "u",
          "\u0171": "u",
          "\u0173": "u",
          "\u0174": "W",
          "\u0175": "w",
          "\u0176": "Y",
          "\u0177": "y",
          "\u0178": "Y",
          "\u0179": "Z",
          "\u017B": "Z",
          "\u017D": "Z",
          "\u017A": "z",
          "\u017C": "z",
          "\u017E": "z",
          "\u0132": "IJ",
          "\u0133": "ij",
          "\u0152": "Oe",
          "\u0153": "oe",
          "\u0149": "'n",
          "\u017F": "s"
        };
        var htmlEscapes = {
          "&": "&amp;",
          "<": "&lt;",
          ">": "&gt;",
          '"': "&quot;",
          "'": "&#39;"
        };
        var htmlUnescapes = {
          "&amp;": "&",
          "&lt;": "<",
          "&gt;": ">",
          "&quot;": '"',
          "&#39;": "'"
        };
        var stringEscapes = {
          "\\": "\\",
          "'": "'",
          "\n": "n",
          "\r": "r",
          "\u2028": "u2028",
          "\u2029": "u2029"
        };
        var freeParseFloat = parseFloat, freeParseInt = parseInt;
        var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
        var freeSelf = typeof self == "object" && self && self.Object === Object && self;
        var root = freeGlobal || freeSelf || Function("return this")();
        var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
        var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
        var moduleExports = freeModule && freeModule.exports === freeExports;
        var freeProcess = moduleExports && freeGlobal.process;
        var nodeUtil = function() {
          try {
            var types = freeModule && freeModule.require && freeModule.require("util").types;
            if (types) {
              return types;
            }
            return freeProcess && freeProcess.binding && freeProcess.binding("util");
          } catch (e4) {
          }
        }();
        var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
        function apply(func, thisArg, args2) {
          switch (args2.length) {
            case 0:
              return func.call(thisArg);
            case 1:
              return func.call(thisArg, args2[0]);
            case 2:
              return func.call(thisArg, args2[0], args2[1]);
            case 3:
              return func.call(thisArg, args2[0], args2[1], args2[2]);
          }
          return func.apply(thisArg, args2);
        }
        function arrayAggregator(array3, setter, iteratee, accumulator) {
          var index = -1, length3 = array3 == null ? 0 : array3.length;
          while (++index < length3) {
            var value = array3[index];
            setter(accumulator, value, iteratee(value), array3);
          }
          return accumulator;
        }
        function arrayEach(array3, iteratee) {
          var index = -1, length3 = array3 == null ? 0 : array3.length;
          while (++index < length3) {
            if (iteratee(array3[index], index, array3) === false) {
              break;
            }
          }
          return array3;
        }
        function arrayEachRight(array3, iteratee) {
          var length3 = array3 == null ? 0 : array3.length;
          while (length3--) {
            if (iteratee(array3[length3], length3, array3) === false) {
              break;
            }
          }
          return array3;
        }
        function arrayEvery(array3, predicate) {
          var index = -1, length3 = array3 == null ? 0 : array3.length;
          while (++index < length3) {
            if (!predicate(array3[index], index, array3)) {
              return false;
            }
          }
          return true;
        }
        function arrayFilter(array3, predicate) {
          var index = -1, length3 = array3 == null ? 0 : array3.length, resIndex = 0, result = [];
          while (++index < length3) {
            var value = array3[index];
            if (predicate(value, index, array3)) {
              result[resIndex++] = value;
            }
          }
          return result;
        }
        function arrayIncludes2(array3, value) {
          var length3 = array3 == null ? 0 : array3.length;
          return !!length3 && baseIndexOf(array3, value, 0) > -1;
        }
        function arrayIncludesWith(array3, value, comparator) {
          var index = -1, length3 = array3 == null ? 0 : array3.length;
          while (++index < length3) {
            if (comparator(value, array3[index])) {
              return true;
            }
          }
          return false;
        }
        function arrayMap(array3, iteratee) {
          var index = -1, length3 = array3 == null ? 0 : array3.length, result = Array(length3);
          while (++index < length3) {
            result[index] = iteratee(array3[index], index, array3);
          }
          return result;
        }
        function arrayPush(array3, values2) {
          var index = -1, length3 = values2.length, offset = array3.length;
          while (++index < length3) {
            array3[offset + index] = values2[index];
          }
          return array3;
        }
        function arrayReduce(array3, iteratee, accumulator, initAccum) {
          var index = -1, length3 = array3 == null ? 0 : array3.length;
          if (initAccum && length3) {
            accumulator = array3[++index];
          }
          while (++index < length3) {
            accumulator = iteratee(accumulator, array3[index], index, array3);
          }
          return accumulator;
        }
        function arrayReduceRight(array3, iteratee, accumulator, initAccum) {
          var length3 = array3 == null ? 0 : array3.length;
          if (initAccum && length3) {
            accumulator = array3[--length3];
          }
          while (length3--) {
            accumulator = iteratee(accumulator, array3[length3], length3, array3);
          }
          return accumulator;
        }
        function arraySome(array3, predicate) {
          var index = -1, length3 = array3 == null ? 0 : array3.length;
          while (++index < length3) {
            if (predicate(array3[index], index, array3)) {
              return true;
            }
          }
          return false;
        }
        var asciiSize = baseProperty("length");
        function asciiToArray(string5) {
          return string5.split("");
        }
        function asciiWords(string5) {
          return string5.match(reAsciiWord) || [];
        }
        function baseFindKey(collection2, predicate, eachFunc) {
          var result;
          eachFunc(collection2, function(value, key, collection3) {
            if (predicate(value, key, collection3)) {
              result = key;
              return false;
            }
          });
          return result;
        }
        function baseFindIndex(array3, predicate, fromIndex, fromRight) {
          var length3 = array3.length, index = fromIndex + (fromRight ? 1 : -1);
          while (fromRight ? index-- : ++index < length3) {
            if (predicate(array3[index], index, array3)) {
              return index;
            }
          }
          return -1;
        }
        function baseIndexOf(array3, value, fromIndex) {
          return value === value ? strictIndexOf(array3, value, fromIndex) : baseFindIndex(array3, baseIsNaN, fromIndex);
        }
        function baseIndexOfWith(array3, value, fromIndex, comparator) {
          var index = fromIndex - 1, length3 = array3.length;
          while (++index < length3) {
            if (comparator(array3[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function baseIsNaN(value) {
          return value !== value;
        }
        function baseMean(array3, iteratee) {
          var length3 = array3 == null ? 0 : array3.length;
          return length3 ? baseSum(array3, iteratee) / length3 : NAN;
        }
        function baseProperty(key) {
          return function(object4) {
            return object4 == null ? undefined2 : object4[key];
          };
        }
        function basePropertyOf(object4) {
          return function(key) {
            return object4 == null ? undefined2 : object4[key];
          };
        }
        function baseReduce(collection2, iteratee, accumulator, initAccum, eachFunc) {
          eachFunc(collection2, function(value, index, collection3) {
            accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection3);
          });
          return accumulator;
        }
        function baseSortBy(array3, comparer) {
          var length3 = array3.length;
          array3.sort(comparer);
          while (length3--) {
            array3[length3] = array3[length3].value;
          }
          return array3;
        }
        function baseSum(array3, iteratee) {
          var result, index = -1, length3 = array3.length;
          while (++index < length3) {
            var current2 = iteratee(array3[index]);
            if (current2 !== undefined2) {
              result = result === undefined2 ? current2 : result + current2;
            }
          }
          return result;
        }
        function baseTimes(n2, iteratee) {
          var index = -1, result = Array(n2);
          while (++index < n2) {
            result[index] = iteratee(index);
          }
          return result;
        }
        function baseToPairs(object4, props) {
          return arrayMap(props, function(key) {
            return [key, object4[key]];
          });
        }
        function baseTrim(string5) {
          return string5 ? string5.slice(0, trimmedEndIndex(string5) + 1).replace(reTrimStart, "") : string5;
        }
        function baseUnary(func) {
          return function(value) {
            return func(value);
          };
        }
        function baseValues(object4, props) {
          return arrayMap(props, function(key) {
            return object4[key];
          });
        }
        function cacheHas(cache, key) {
          return cache.has(key);
        }
        function charsStartIndex(strSymbols, chrSymbols) {
          var index = -1, length3 = strSymbols.length;
          while (++index < length3 && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
          }
          return index;
        }
        function charsEndIndex(strSymbols, chrSymbols) {
          var index = strSymbols.length;
          while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
          }
          return index;
        }
        function countHolders(array3, placeholder) {
          var length3 = array3.length, result = 0;
          while (length3--) {
            if (array3[length3] === placeholder) {
              ++result;
            }
          }
          return result;
        }
        var deburrLetter = basePropertyOf(deburredLetters);
        var escapeHtmlChar = basePropertyOf(htmlEscapes);
        function escapeStringChar(chr) {
          return "\\" + stringEscapes[chr];
        }
        function getValue(object4, key) {
          return object4 == null ? undefined2 : object4[key];
        }
        function hasUnicode(string5) {
          return reHasUnicode.test(string5);
        }
        function hasUnicodeWord(string5) {
          return reHasUnicodeWord.test(string5);
        }
        function iteratorToArray(iterator2) {
          var data2, result = [];
          while (!(data2 = iterator2.next()).done) {
            result.push(data2.value);
          }
          return result;
        }
        function mapToArray(map10) {
          var index = -1, result = Array(map10.size);
          map10.forEach(function(value, key) {
            result[++index] = [key, value];
          });
          return result;
        }
        function overArg(func, transform) {
          return function(arg) {
            return func(transform(arg));
          };
        }
        function replaceHolders(array3, placeholder) {
          var index = -1, length3 = array3.length, resIndex = 0, result = [];
          while (++index < length3) {
            var value = array3[index];
            if (value === placeholder || value === PLACEHOLDER) {
              array3[index] = PLACEHOLDER;
              result[resIndex++] = index;
            }
          }
          return result;
        }
        function setToArray(set4) {
          var index = -1, result = Array(set4.size);
          set4.forEach(function(value) {
            result[++index] = value;
          });
          return result;
        }
        function setToPairs(set4) {
          var index = -1, result = Array(set4.size);
          set4.forEach(function(value) {
            result[++index] = [value, value];
          });
          return result;
        }
        function strictIndexOf(array3, value, fromIndex) {
          var index = fromIndex - 1, length3 = array3.length;
          while (++index < length3) {
            if (array3[index] === value) {
              return index;
            }
          }
          return -1;
        }
        function strictLastIndexOf(array3, value, fromIndex) {
          var index = fromIndex + 1;
          while (index--) {
            if (array3[index] === value) {
              return index;
            }
          }
          return index;
        }
        function stringSize(string5) {
          return hasUnicode(string5) ? unicodeSize(string5) : asciiSize(string5);
        }
        function stringToArray(string5) {
          return hasUnicode(string5) ? unicodeToArray(string5) : asciiToArray(string5);
        }
        function trimmedEndIndex(string5) {
          var index = string5.length;
          while (index-- && reWhitespace.test(string5.charAt(index))) {
          }
          return index;
        }
        var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
        function unicodeSize(string5) {
          var result = reUnicode.lastIndex = 0;
          while (reUnicode.test(string5)) {
            ++result;
          }
          return result;
        }
        function unicodeToArray(string5) {
          return string5.match(reUnicode) || [];
        }
        function unicodeWords(string5) {
          return string5.match(reUnicodeWord) || [];
        }
        var runInContext = function runInContext2(context) {
          context = context == null ? root : _2.defaults(root.Object(), context, _2.pick(root, contextProps));
          var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
          var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
          var coreJsData = context["__core-js_shared__"];
          var funcToString = funcProto.toString;
          var hasOwnProperty2 = objectProto.hasOwnProperty;
          var idCounter = 0;
          var maskSrcKey = function() {
            var uid2 = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
            return uid2 ? "Symbol(src)_1." + uid2 : "";
          }();
          var nativeObjectToString = objectProto.toString;
          var objectCtorString = funcToString.call(Object2);
          var oldDash = root._;
          var reIsNative = RegExp2("^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
          var Buffer2 = moduleExports ? context.Buffer : undefined2, Symbol2 = context.Symbol, Uint8Array2 = context.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined2, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate2 = Object2.create, propertyIsEnumerable3 = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2, symIterator = Symbol2 ? Symbol2.iterator : undefined2, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
          var defineProperty3 = function() {
            try {
              var func = getNative(Object2, "defineProperty");
              func({}, "", {});
              return func;
            } catch (e4) {
            }
          }();
          var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
          var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined2, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
          var DataView2 = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap3 = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
          var metaMap = WeakMap3 && new WeakMap3();
          var realNames = {};
          var dataViewCtorString = toSource(DataView2), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap3);
          var symbolProto = Symbol2 ? Symbol2.prototype : undefined2, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2, symbolToString = symbolProto ? symbolProto.toString : undefined2;
          function lodash(value) {
            if (isObjectLike(value) && !isArray4(value) && !(value instanceof LazyWrapper)) {
              if (value instanceof LodashWrapper) {
                return value;
              }
              if (hasOwnProperty2.call(value, "__wrapped__")) {
                return wrapperClone(value);
              }
            }
            return new LodashWrapper(value);
          }
          var baseCreate = function() {
            function object4() {
            }
            return function(proto) {
              if (!isObject2(proto)) {
                return {};
              }
              if (objectCreate2) {
                return objectCreate2(proto);
              }
              object4.prototype = proto;
              var result2 = new object4();
              object4.prototype = undefined2;
              return result2;
            };
          }();
          function baseLodash() {
          }
          function LodashWrapper(value, chainAll) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__chain__ = !!chainAll;
            this.__index__ = 0;
            this.__values__ = undefined2;
          }
          lodash.templateSettings = {
            "escape": reEscape,
            "evaluate": reEvaluate,
            "interpolate": reInterpolate,
            "variable": "",
            "imports": {
              "_": lodash
            }
          };
          lodash.prototype = baseLodash.prototype;
          lodash.prototype.constructor = lodash;
          LodashWrapper.prototype = baseCreate(baseLodash.prototype);
          LodashWrapper.prototype.constructor = LodashWrapper;
          function LazyWrapper(value) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__dir__ = 1;
            this.__filtered__ = false;
            this.__iteratees__ = [];
            this.__takeCount__ = MAX_ARRAY_LENGTH;
            this.__views__ = [];
          }
          function lazyClone() {
            var result2 = new LazyWrapper(this.__wrapped__);
            result2.__actions__ = copyArray(this.__actions__);
            result2.__dir__ = this.__dir__;
            result2.__filtered__ = this.__filtered__;
            result2.__iteratees__ = copyArray(this.__iteratees__);
            result2.__takeCount__ = this.__takeCount__;
            result2.__views__ = copyArray(this.__views__);
            return result2;
          }
          function lazyReverse() {
            if (this.__filtered__) {
              var result2 = new LazyWrapper(this);
              result2.__dir__ = -1;
              result2.__filtered__ = true;
            } else {
              result2 = this.clone();
              result2.__dir__ *= -1;
            }
            return result2;
          }
          function lazyValue() {
            var array3 = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray4(array3), isRight = dir < 0, arrLength = isArr ? array3.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length3 = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length3, this.__takeCount__);
            if (!isArr || !isRight && arrLength == length3 && takeCount == length3) {
              return baseWrapperValue(array3, this.__actions__);
            }
            var result2 = [];
            outer:
              while (length3-- && resIndex < takeCount) {
                index += dir;
                var iterIndex = -1, value = array3[index];
                while (++iterIndex < iterLength) {
                  var data2 = iteratees[iterIndex], iteratee2 = data2.iteratee, type = data2.type, computed = iteratee2(value);
                  if (type == LAZY_MAP_FLAG) {
                    value = computed;
                  } else if (!computed) {
                    if (type == LAZY_FILTER_FLAG) {
                      continue outer;
                    } else {
                      break outer;
                    }
                  }
                }
                result2[resIndex++] = value;
              }
            return result2;
          }
          LazyWrapper.prototype = baseCreate(baseLodash.prototype);
          LazyWrapper.prototype.constructor = LazyWrapper;
          function Hash(entries) {
            var index = -1, length3 = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length3) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }
          function hashClear() {
            this.__data__ = nativeCreate ? nativeCreate(null) : {};
            this.size = 0;
          }
          function hashDelete(key) {
            var result2 = this.has(key) && delete this.__data__[key];
            this.size -= result2 ? 1 : 0;
            return result2;
          }
          function hashGet(key) {
            var data2 = this.__data__;
            if (nativeCreate) {
              var result2 = data2[key];
              return result2 === HASH_UNDEFINED ? undefined2 : result2;
            }
            return hasOwnProperty2.call(data2, key) ? data2[key] : undefined2;
          }
          function hashHas(key) {
            var data2 = this.__data__;
            return nativeCreate ? data2[key] !== undefined2 : hasOwnProperty2.call(data2, key);
          }
          function hashSet(key, value) {
            var data2 = this.__data__;
            this.size += this.has(key) ? 0 : 1;
            data2[key] = nativeCreate && value === undefined2 ? HASH_UNDEFINED : value;
            return this;
          }
          Hash.prototype.clear = hashClear;
          Hash.prototype["delete"] = hashDelete;
          Hash.prototype.get = hashGet;
          Hash.prototype.has = hashHas;
          Hash.prototype.set = hashSet;
          function ListCache(entries) {
            var index = -1, length3 = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length3) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }
          function listCacheClear() {
            this.__data__ = [];
            this.size = 0;
          }
          function listCacheDelete(key) {
            var data2 = this.__data__, index = assocIndexOf(data2, key);
            if (index < 0) {
              return false;
            }
            var lastIndex = data2.length - 1;
            if (index == lastIndex) {
              data2.pop();
            } else {
              splice.call(data2, index, 1);
            }
            --this.size;
            return true;
          }
          function listCacheGet(key) {
            var data2 = this.__data__, index = assocIndexOf(data2, key);
            return index < 0 ? undefined2 : data2[index][1];
          }
          function listCacheHas(key) {
            return assocIndexOf(this.__data__, key) > -1;
          }
          function listCacheSet(key, value) {
            var data2 = this.__data__, index = assocIndexOf(data2, key);
            if (index < 0) {
              ++this.size;
              data2.push([key, value]);
            } else {
              data2[index][1] = value;
            }
            return this;
          }
          ListCache.prototype.clear = listCacheClear;
          ListCache.prototype["delete"] = listCacheDelete;
          ListCache.prototype.get = listCacheGet;
          ListCache.prototype.has = listCacheHas;
          ListCache.prototype.set = listCacheSet;
          function MapCache(entries) {
            var index = -1, length3 = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length3) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }
          function mapCacheClear() {
            this.size = 0;
            this.__data__ = {
              "hash": new Hash(),
              "map": new (Map2 || ListCache)(),
              "string": new Hash()
            };
          }
          function mapCacheDelete(key) {
            var result2 = getMapData(this, key)["delete"](key);
            this.size -= result2 ? 1 : 0;
            return result2;
          }
          function mapCacheGet(key) {
            return getMapData(this, key).get(key);
          }
          function mapCacheHas(key) {
            return getMapData(this, key).has(key);
          }
          function mapCacheSet(key, value) {
            var data2 = getMapData(this, key), size2 = data2.size;
            data2.set(key, value);
            this.size += data2.size == size2 ? 0 : 1;
            return this;
          }
          MapCache.prototype.clear = mapCacheClear;
          MapCache.prototype["delete"] = mapCacheDelete;
          MapCache.prototype.get = mapCacheGet;
          MapCache.prototype.has = mapCacheHas;
          MapCache.prototype.set = mapCacheSet;
          function SetCache(values3) {
            var index = -1, length3 = values3 == null ? 0 : values3.length;
            this.__data__ = new MapCache();
            while (++index < length3) {
              this.add(values3[index]);
            }
          }
          function setCacheAdd(value) {
            this.__data__.set(value, HASH_UNDEFINED);
            return this;
          }
          function setCacheHas(value) {
            return this.__data__.has(value);
          }
          SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
          SetCache.prototype.has = setCacheHas;
          function Stack(entries) {
            var data2 = this.__data__ = new ListCache(entries);
            this.size = data2.size;
          }
          function stackClear() {
            this.__data__ = new ListCache();
            this.size = 0;
          }
          function stackDelete(key) {
            var data2 = this.__data__, result2 = data2["delete"](key);
            this.size = data2.size;
            return result2;
          }
          function stackGet(key) {
            return this.__data__.get(key);
          }
          function stackHas(key) {
            return this.__data__.has(key);
          }
          function stackSet(key, value) {
            var data2 = this.__data__;
            if (data2 instanceof ListCache) {
              var pairs = data2.__data__;
              if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
                pairs.push([key, value]);
                this.size = ++data2.size;
                return this;
              }
              data2 = this.__data__ = new MapCache(pairs);
            }
            data2.set(key, value);
            this.size = data2.size;
            return this;
          }
          Stack.prototype.clear = stackClear;
          Stack.prototype["delete"] = stackDelete;
          Stack.prototype.get = stackGet;
          Stack.prototype.has = stackHas;
          Stack.prototype.set = stackSet;
          function arrayLikeKeys(value, inherited) {
            var isArr = isArray4(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length3 = result2.length;
            for (var key in value) {
              if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length3)))) {
                result2.push(key);
              }
            }
            return result2;
          }
          function arraySample(array3) {
            var length3 = array3.length;
            return length3 ? array3[baseRandom(0, length3 - 1)] : undefined2;
          }
          function arraySampleSize(array3, n2) {
            return shuffleSelf(copyArray(array3), baseClamp(n2, 0, array3.length));
          }
          function arrayShuffle(array3) {
            return shuffleSelf(copyArray(array3));
          }
          function assignMergeValue(object4, key, value) {
            if (value !== undefined2 && !eq(object4[key], value) || value === undefined2 && !(key in object4)) {
              baseAssignValue(object4, key, value);
            }
          }
          function assignValue(object4, key, value) {
            var objValue = object4[key];
            if (!(hasOwnProperty2.call(object4, key) && eq(objValue, value)) || value === undefined2 && !(key in object4)) {
              baseAssignValue(object4, key, value);
            }
          }
          function assocIndexOf(array3, key) {
            var length3 = array3.length;
            while (length3--) {
              if (eq(array3[length3][0], key)) {
                return length3;
              }
            }
            return -1;
          }
          function baseAggregator(collection2, setter, iteratee2, accumulator) {
            baseEach(collection2, function(value, key, collection3) {
              setter(accumulator, value, iteratee2(value), collection3);
            });
            return accumulator;
          }
          function baseAssign(object4, source) {
            return object4 && copyObject(source, keys5(source), object4);
          }
          function baseAssignIn(object4, source) {
            return object4 && copyObject(source, keysIn(source), object4);
          }
          function baseAssignValue(object4, key, value) {
            if (key == "__proto__" && defineProperty3) {
              defineProperty3(object4, key, {
                "configurable": true,
                "enumerable": true,
                "value": value,
                "writable": true
              });
            } else {
              object4[key] = value;
            }
          }
          function baseAt(object4, paths) {
            var index = -1, length3 = paths.length, result2 = Array2(length3), skip = object4 == null;
            while (++index < length3) {
              result2[index] = skip ? undefined2 : get2(object4, paths[index]);
            }
            return result2;
          }
          function baseClamp(number3, lower, upper) {
            if (number3 === number3) {
              if (upper !== undefined2) {
                number3 = number3 <= upper ? number3 : upper;
              }
              if (lower !== undefined2) {
                number3 = number3 >= lower ? number3 : lower;
              }
            }
            return number3;
          }
          function baseClone(value, bitmask, customizer, key, object4, stack) {
            var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
            if (customizer) {
              result2 = object4 ? customizer(value, key, object4, stack) : customizer(value);
            }
            if (result2 !== undefined2) {
              return result2;
            }
            if (!isObject2(value)) {
              return value;
            }
            var isArr = isArray4(value);
            if (isArr) {
              result2 = initCloneArray(value);
              if (!isDeep) {
                return copyArray(value, result2);
              }
            } else {
              var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
              if (isBuffer(value)) {
                return cloneBuffer(value, isDeep);
              }
              if (tag == objectTag || tag == argsTag || isFunc && !object4) {
                result2 = isFlat || isFunc ? {} : initCloneObject(value);
                if (!isDeep) {
                  return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
                }
              } else {
                if (!cloneableTags[tag]) {
                  return object4 ? value : {};
                }
                result2 = initCloneByTag(value, tag, isDeep);
              }
            }
            stack || (stack = new Stack());
            var stacked = stack.get(value);
            if (stacked) {
              return stacked;
            }
            stack.set(value, result2);
            if (isSet(value)) {
              value.forEach(function(subValue) {
                result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
              });
            } else if (isMap(value)) {
              value.forEach(function(subValue, key2) {
                result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
              });
            }
            var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys5;
            var props = isArr ? undefined2 : keysFunc(value);
            arrayEach(props || value, function(subValue, key2) {
              if (props) {
                key2 = subValue;
                subValue = value[key2];
              }
              assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
            return result2;
          }
          function baseConforms(source) {
            var props = keys5(source);
            return function(object4) {
              return baseConformsTo(object4, source, props);
            };
          }
          function baseConformsTo(object4, source, props) {
            var length3 = props.length;
            if (object4 == null) {
              return !length3;
            }
            object4 = Object2(object4);
            while (length3--) {
              var key = props[length3], predicate = source[key], value = object4[key];
              if (value === undefined2 && !(key in object4) || !predicate(value)) {
                return false;
              }
            }
            return true;
          }
          function baseDelay(func, wait, args2) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return setTimeout2(function() {
              func.apply(undefined2, args2);
            }, wait);
          }
          function baseDifference(array3, values3, iteratee2, comparator) {
            var index = -1, includes2 = arrayIncludes2, isCommon = true, length3 = array3.length, result2 = [], valuesLength = values3.length;
            if (!length3) {
              return result2;
            }
            if (iteratee2) {
              values3 = arrayMap(values3, baseUnary(iteratee2));
            }
            if (comparator) {
              includes2 = arrayIncludesWith;
              isCommon = false;
            } else if (values3.length >= LARGE_ARRAY_SIZE) {
              includes2 = cacheHas;
              isCommon = false;
              values3 = new SetCache(values3);
            }
            outer:
              while (++index < length3) {
                var value = array3[index], computed = iteratee2 == null ? value : iteratee2(value);
                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                  var valuesIndex = valuesLength;
                  while (valuesIndex--) {
                    if (values3[valuesIndex] === computed) {
                      continue outer;
                    }
                  }
                  result2.push(value);
                } else if (!includes2(values3, computed, comparator)) {
                  result2.push(value);
                }
              }
            return result2;
          }
          var baseEach = createBaseEach(baseForOwn);
          var baseEachRight = createBaseEach(baseForOwnRight, true);
          function baseEvery(collection2, predicate) {
            var result2 = true;
            baseEach(collection2, function(value, index, collection3) {
              result2 = !!predicate(value, index, collection3);
              return result2;
            });
            return result2;
          }
          function baseExtremum(array3, iteratee2, comparator) {
            var index = -1, length3 = array3.length;
            while (++index < length3) {
              var value = array3[index], current2 = iteratee2(value);
              if (current2 != null && (computed === undefined2 ? current2 === current2 && !isSymbol(current2) : comparator(current2, computed))) {
                var computed = current2, result2 = value;
              }
            }
            return result2;
          }
          function baseFill(array3, value, start, end) {
            var length3 = array3.length;
            start = toInteger2(start);
            if (start < 0) {
              start = -start > length3 ? 0 : length3 + start;
            }
            end = end === undefined2 || end > length3 ? length3 : toInteger2(end);
            if (end < 0) {
              end += length3;
            }
            end = start > end ? 0 : toLength2(end);
            while (start < end) {
              array3[start++] = value;
            }
            return array3;
          }
          function baseFilter(collection2, predicate) {
            var result2 = [];
            baseEach(collection2, function(value, index, collection3) {
              if (predicate(value, index, collection3)) {
                result2.push(value);
              }
            });
            return result2;
          }
          function baseFlatten(array3, depth, predicate, isStrict, result2) {
            var index = -1, length3 = array3.length;
            predicate || (predicate = isFlattenable);
            result2 || (result2 = []);
            while (++index < length3) {
              var value = array3[index];
              if (depth > 0 && predicate(value)) {
                if (depth > 1) {
                  baseFlatten(value, depth - 1, predicate, isStrict, result2);
                } else {
                  arrayPush(result2, value);
                }
              } else if (!isStrict) {
                result2[result2.length] = value;
              }
            }
            return result2;
          }
          var baseFor = createBaseFor();
          var baseForRight = createBaseFor(true);
          function baseForOwn(object4, iteratee2) {
            return object4 && baseFor(object4, iteratee2, keys5);
          }
          function baseForOwnRight(object4, iteratee2) {
            return object4 && baseForRight(object4, iteratee2, keys5);
          }
          function baseFunctions(object4, props) {
            return arrayFilter(props, function(key) {
              return isFunction(object4[key]);
            });
          }
          function baseGet(object4, path2) {
            path2 = castPath(path2, object4);
            var index = 0, length3 = path2.length;
            while (object4 != null && index < length3) {
              object4 = object4[toKey(path2[index++])];
            }
            return index && index == length3 ? object4 : undefined2;
          }
          function baseGetAllKeys(object4, keysFunc, symbolsFunc) {
            var result2 = keysFunc(object4);
            return isArray4(object4) ? result2 : arrayPush(result2, symbolsFunc(object4));
          }
          function baseGetTag(value) {
            if (value == null) {
              return value === undefined2 ? undefinedTag : nullTag;
            }
            return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString2(value);
          }
          function baseGt(value, other) {
            return value > other;
          }
          function baseHas(object4, key) {
            return object4 != null && hasOwnProperty2.call(object4, key);
          }
          function baseHasIn(object4, key) {
            return object4 != null && key in Object2(object4);
          }
          function baseInRange(number3, start, end) {
            return number3 >= nativeMin(start, end) && number3 < nativeMax(start, end);
          }
          function baseIntersection(arrays, iteratee2, comparator) {
            var includes2 = comparator ? arrayIncludesWith : arrayIncludes2, length3 = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
            while (othIndex--) {
              var array3 = arrays[othIndex];
              if (othIndex && iteratee2) {
                array3 = arrayMap(array3, baseUnary(iteratee2));
              }
              maxLength = nativeMin(array3.length, maxLength);
              caches[othIndex] = !comparator && (iteratee2 || length3 >= 120 && array3.length >= 120) ? new SetCache(othIndex && array3) : undefined2;
            }
            array3 = arrays[0];
            var index = -1, seen = caches[0];
            outer:
              while (++index < length3 && result2.length < maxLength) {
                var value = array3[index], computed = iteratee2 ? iteratee2(value) : value;
                value = comparator || value !== 0 ? value : 0;
                if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
                  othIndex = othLength;
                  while (--othIndex) {
                    var cache = caches[othIndex];
                    if (!(cache ? cacheHas(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                      continue outer;
                    }
                  }
                  if (seen) {
                    seen.push(computed);
                  }
                  result2.push(value);
                }
              }
            return result2;
          }
          function baseInverter(object4, setter, iteratee2, accumulator) {
            baseForOwn(object4, function(value, key, object5) {
              setter(accumulator, iteratee2(value), key, object5);
            });
            return accumulator;
          }
          function baseInvoke(object4, path2, args2) {
            path2 = castPath(path2, object4);
            object4 = parent(object4, path2);
            var func = object4 == null ? object4 : object4[toKey(last2(path2))];
            return func == null ? undefined2 : apply(func, object4, args2);
          }
          function baseIsArguments(value) {
            return isObjectLike(value) && baseGetTag(value) == argsTag;
          }
          function baseIsArrayBuffer(value) {
            return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
          }
          function baseIsDate(value) {
            return isObjectLike(value) && baseGetTag(value) == dateTag;
          }
          function baseIsEqual(value, other, bitmask, customizer, stack) {
            if (value === other) {
              return true;
            }
            if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
              return value !== value && other !== other;
            }
            return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
          }
          function baseIsEqualDeep(object4, other, bitmask, customizer, equalFunc, stack) {
            var objIsArr = isArray4(object4), othIsArr = isArray4(other), objTag = objIsArr ? arrayTag : getTag(object4), othTag = othIsArr ? arrayTag : getTag(other);
            objTag = objTag == argsTag ? objectTag : objTag;
            othTag = othTag == argsTag ? objectTag : othTag;
            var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
            if (isSameTag && isBuffer(object4)) {
              if (!isBuffer(other)) {
                return false;
              }
              objIsArr = true;
              objIsObj = false;
            }
            if (isSameTag && !objIsObj) {
              stack || (stack = new Stack());
              return objIsArr || isTypedArray(object4) ? equalArrays(object4, other, bitmask, customizer, equalFunc, stack) : equalByTag(object4, other, objTag, bitmask, customizer, equalFunc, stack);
            }
            if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
              var objIsWrapped = objIsObj && hasOwnProperty2.call(object4, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty2.call(other, "__wrapped__");
              if (objIsWrapped || othIsWrapped) {
                var objUnwrapped = objIsWrapped ? object4.value() : object4, othUnwrapped = othIsWrapped ? other.value() : other;
                stack || (stack = new Stack());
                return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
              }
            }
            if (!isSameTag) {
              return false;
            }
            stack || (stack = new Stack());
            return equalObjects(object4, other, bitmask, customizer, equalFunc, stack);
          }
          function baseIsMap(value) {
            return isObjectLike(value) && getTag(value) == mapTag;
          }
          function baseIsMatch(object4, source, matchData, customizer) {
            var index = matchData.length, length3 = index, noCustomizer = !customizer;
            if (object4 == null) {
              return !length3;
            }
            object4 = Object2(object4);
            while (index--) {
              var data2 = matchData[index];
              if (noCustomizer && data2[2] ? data2[1] !== object4[data2[0]] : !(data2[0] in object4)) {
                return false;
              }
            }
            while (++index < length3) {
              data2 = matchData[index];
              var key = data2[0], objValue = object4[key], srcValue = data2[1];
              if (noCustomizer && data2[2]) {
                if (objValue === undefined2 && !(key in object4)) {
                  return false;
                }
              } else {
                var stack = new Stack();
                if (customizer) {
                  var result2 = customizer(objValue, srcValue, key, object4, source, stack);
                }
                if (!(result2 === undefined2 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                  return false;
                }
              }
            }
            return true;
          }
          function baseIsNative(value) {
            if (!isObject2(value) || isMasked(value)) {
              return false;
            }
            var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
            return pattern.test(toSource(value));
          }
          function baseIsRegExp(value) {
            return isObjectLike(value) && baseGetTag(value) == regexpTag;
          }
          function baseIsSet(value) {
            return isObjectLike(value) && getTag(value) == setTag;
          }
          function baseIsTypedArray(value) {
            return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
          }
          function baseIteratee(value) {
            if (typeof value == "function") {
              return value;
            }
            if (value == null) {
              return identity;
            }
            if (typeof value == "object") {
              return isArray4(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
            }
            return property(value);
          }
          function baseKeys(object4) {
            if (!isPrototype(object4)) {
              return nativeKeys(object4);
            }
            var result2 = [];
            for (var key in Object2(object4)) {
              if (hasOwnProperty2.call(object4, key) && key != "constructor") {
                result2.push(key);
              }
            }
            return result2;
          }
          function baseKeysIn(object4) {
            if (!isObject2(object4)) {
              return nativeKeysIn(object4);
            }
            var isProto = isPrototype(object4), result2 = [];
            for (var key in object4) {
              if (!(key == "constructor" && (isProto || !hasOwnProperty2.call(object4, key)))) {
                result2.push(key);
              }
            }
            return result2;
          }
          function baseLt(value, other) {
            return value < other;
          }
          function baseMap(collection2, iteratee2) {
            var index = -1, result2 = isArrayLike(collection2) ? Array2(collection2.length) : [];
            baseEach(collection2, function(value, key, collection3) {
              result2[++index] = iteratee2(value, key, collection3);
            });
            return result2;
          }
          function baseMatches(source) {
            var matchData = getMatchData(source);
            if (matchData.length == 1 && matchData[0][2]) {
              return matchesStrictComparable(matchData[0][0], matchData[0][1]);
            }
            return function(object4) {
              return object4 === source || baseIsMatch(object4, source, matchData);
            };
          }
          function baseMatchesProperty(path2, srcValue) {
            if (isKey(path2) && isStrictComparable(srcValue)) {
              return matchesStrictComparable(toKey(path2), srcValue);
            }
            return function(object4) {
              var objValue = get2(object4, path2);
              return objValue === undefined2 && objValue === srcValue ? hasIn(object4, path2) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
            };
          }
          function baseMerge(object4, source, srcIndex, customizer, stack) {
            if (object4 === source) {
              return;
            }
            baseFor(source, function(srcValue, key) {
              stack || (stack = new Stack());
              if (isObject2(srcValue)) {
                baseMergeDeep(object4, source, key, srcIndex, baseMerge, customizer, stack);
              } else {
                var newValue = customizer ? customizer(safeGet(object4, key), srcValue, key + "", object4, source, stack) : undefined2;
                if (newValue === undefined2) {
                  newValue = srcValue;
                }
                assignMergeValue(object4, key, newValue);
              }
            }, keysIn);
          }
          function baseMergeDeep(object4, source, key, srcIndex, mergeFunc, customizer, stack) {
            var objValue = safeGet(object4, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
            if (stacked) {
              assignMergeValue(object4, key, stacked);
              return;
            }
            var newValue = customizer ? customizer(objValue, srcValue, key + "", object4, source, stack) : undefined2;
            var isCommon = newValue === undefined2;
            if (isCommon) {
              var isArr = isArray4(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
              newValue = srcValue;
              if (isArr || isBuff || isTyped) {
                if (isArray4(objValue)) {
                  newValue = objValue;
                } else if (isArrayLikeObject(objValue)) {
                  newValue = copyArray(objValue);
                } else if (isBuff) {
                  isCommon = false;
                  newValue = cloneBuffer(srcValue, true);
                } else if (isTyped) {
                  isCommon = false;
                  newValue = cloneTypedArray(srcValue, true);
                } else {
                  newValue = [];
                }
              } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                newValue = objValue;
                if (isArguments(objValue)) {
                  newValue = toPlainObject(objValue);
                } else if (!isObject2(objValue) || isFunction(objValue)) {
                  newValue = initCloneObject(srcValue);
                }
              } else {
                isCommon = false;
              }
            }
            if (isCommon) {
              stack.set(srcValue, newValue);
              mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
              stack["delete"](srcValue);
            }
            assignMergeValue(object4, key, newValue);
          }
          function baseNth(array3, n2) {
            var length3 = array3.length;
            if (!length3) {
              return;
            }
            n2 += n2 < 0 ? length3 : 0;
            return isIndex(n2, length3) ? array3[n2] : undefined2;
          }
          function baseOrderBy(collection2, iteratees, orders) {
            if (iteratees.length) {
              iteratees = arrayMap(iteratees, function(iteratee2) {
                if (isArray4(iteratee2)) {
                  return function(value) {
                    return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                  };
                }
                return iteratee2;
              });
            } else {
              iteratees = [identity];
            }
            var index = -1;
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            var result2 = baseMap(collection2, function(value, key, collection3) {
              var criteria = arrayMap(iteratees, function(iteratee2) {
                return iteratee2(value);
              });
              return { "criteria": criteria, "index": ++index, "value": value };
            });
            return baseSortBy(result2, function(object4, other) {
              return compareMultiple(object4, other, orders);
            });
          }
          function basePick(object4, paths) {
            return basePickBy(object4, paths, function(value, path2) {
              return hasIn(object4, path2);
            });
          }
          function basePickBy(object4, paths, predicate) {
            var index = -1, length3 = paths.length, result2 = {};
            while (++index < length3) {
              var path2 = paths[index], value = baseGet(object4, path2);
              if (predicate(value, path2)) {
                baseSet(result2, castPath(path2, object4), value);
              }
            }
            return result2;
          }
          function basePropertyDeep(path2) {
            return function(object4) {
              return baseGet(object4, path2);
            };
          }
          function basePullAll(array3, values3, iteratee2, comparator) {
            var indexOf3 = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length3 = values3.length, seen = array3;
            if (array3 === values3) {
              values3 = copyArray(values3);
            }
            if (iteratee2) {
              seen = arrayMap(array3, baseUnary(iteratee2));
            }
            while (++index < length3) {
              var fromIndex = 0, value = values3[index], computed = iteratee2 ? iteratee2(value) : value;
              while ((fromIndex = indexOf3(seen, computed, fromIndex, comparator)) > -1) {
                if (seen !== array3) {
                  splice.call(seen, fromIndex, 1);
                }
                splice.call(array3, fromIndex, 1);
              }
            }
            return array3;
          }
          function basePullAt(array3, indexes) {
            var length3 = array3 ? indexes.length : 0, lastIndex = length3 - 1;
            while (length3--) {
              var index = indexes[length3];
              if (length3 == lastIndex || index !== previous) {
                var previous = index;
                if (isIndex(index)) {
                  splice.call(array3, index, 1);
                } else {
                  baseUnset(array3, index);
                }
              }
            }
            return array3;
          }
          function baseRandom(lower, upper) {
            return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
          }
          function baseRange(start, end, step, fromRight) {
            var index = -1, length3 = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result2 = Array2(length3);
            while (length3--) {
              result2[fromRight ? length3 : ++index] = start;
              start += step;
            }
            return result2;
          }
          function baseRepeat(string5, n2) {
            var result2 = "";
            if (!string5 || n2 < 1 || n2 > MAX_SAFE_INTEGER2) {
              return result2;
            }
            do {
              if (n2 % 2) {
                result2 += string5;
              }
              n2 = nativeFloor(n2 / 2);
              if (n2) {
                string5 += string5;
              }
            } while (n2);
            return result2;
          }
          function baseRest(func, start) {
            return setToString(overRest(func, start, identity), func + "");
          }
          function baseSample(collection2) {
            return arraySample(values2(collection2));
          }
          function baseSampleSize(collection2, n2) {
            var array3 = values2(collection2);
            return shuffleSelf(array3, baseClamp(n2, 0, array3.length));
          }
          function baseSet(object4, path2, value, customizer) {
            if (!isObject2(object4)) {
              return object4;
            }
            path2 = castPath(path2, object4);
            var index = -1, length3 = path2.length, lastIndex = length3 - 1, nested = object4;
            while (nested != null && ++index < length3) {
              var key = toKey(path2[index]), newValue = value;
              if (key === "__proto__" || key === "constructor" || key === "prototype") {
                return object4;
              }
              if (index != lastIndex) {
                var objValue = nested[key];
                newValue = customizer ? customizer(objValue, key, nested) : undefined2;
                if (newValue === undefined2) {
                  newValue = isObject2(objValue) ? objValue : isIndex(path2[index + 1]) ? [] : {};
                }
              }
              assignValue(nested, key, newValue);
              nested = nested[key];
            }
            return object4;
          }
          var baseSetData = !metaMap ? identity : function(func, data2) {
            metaMap.set(func, data2);
            return func;
          };
          var baseSetToString = !defineProperty3 ? identity : function(func, string5) {
            return defineProperty3(func, "toString", {
              "configurable": true,
              "enumerable": false,
              "value": constant(string5),
              "writable": true
            });
          };
          function baseShuffle(collection2) {
            return shuffleSelf(values2(collection2));
          }
          function baseSlice(array3, start, end) {
            var index = -1, length3 = array3.length;
            if (start < 0) {
              start = -start > length3 ? 0 : length3 + start;
            }
            end = end > length3 ? length3 : end;
            if (end < 0) {
              end += length3;
            }
            length3 = start > end ? 0 : end - start >>> 0;
            start >>>= 0;
            var result2 = Array2(length3);
            while (++index < length3) {
              result2[index] = array3[index + start];
            }
            return result2;
          }
          function baseSome(collection2, predicate) {
            var result2;
            baseEach(collection2, function(value, index, collection3) {
              result2 = predicate(value, index, collection3);
              return !result2;
            });
            return !!result2;
          }
          function baseSortedIndex(array3, value, retHighest) {
            var low = 0, high = array3 == null ? low : array3.length;
            if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
              while (low < high) {
                var mid = low + high >>> 1, computed = array3[mid];
                if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
                  low = mid + 1;
                } else {
                  high = mid;
                }
              }
              return high;
            }
            return baseSortedIndexBy(array3, value, identity, retHighest);
          }
          function baseSortedIndexBy(array3, value, iteratee2, retHighest) {
            var low = 0, high = array3 == null ? 0 : array3.length;
            if (high === 0) {
              return 0;
            }
            value = iteratee2(value);
            var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined2;
            while (low < high) {
              var mid = nativeFloor((low + high) / 2), computed = iteratee2(array3[mid]), othIsDefined = computed !== undefined2, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
              if (valIsNaN) {
                var setLow = retHighest || othIsReflexive;
              } else if (valIsUndefined) {
                setLow = othIsReflexive && (retHighest || othIsDefined);
              } else if (valIsNull) {
                setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
              } else if (valIsSymbol) {
                setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
              } else if (othIsNull || othIsSymbol) {
                setLow = false;
              } else {
                setLow = retHighest ? computed <= value : computed < value;
              }
              if (setLow) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return nativeMin(high, MAX_ARRAY_INDEX);
          }
          function baseSortedUniq(array3, iteratee2) {
            var index = -1, length3 = array3.length, resIndex = 0, result2 = [];
            while (++index < length3) {
              var value = array3[index], computed = iteratee2 ? iteratee2(value) : value;
              if (!index || !eq(computed, seen)) {
                var seen = computed;
                result2[resIndex++] = value === 0 ? 0 : value;
              }
            }
            return result2;
          }
          function baseToNumber(value) {
            if (typeof value == "number") {
              return value;
            }
            if (isSymbol(value)) {
              return NAN;
            }
            return +value;
          }
          function baseToString(value) {
            if (typeof value == "string") {
              return value;
            }
            if (isArray4(value)) {
              return arrayMap(value, baseToString) + "";
            }
            if (isSymbol(value)) {
              return symbolToString ? symbolToString.call(value) : "";
            }
            var result2 = value + "";
            return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
          }
          function baseUniq(array3, iteratee2, comparator) {
            var index = -1, includes2 = arrayIncludes2, length3 = array3.length, isCommon = true, result2 = [], seen = result2;
            if (comparator) {
              isCommon = false;
              includes2 = arrayIncludesWith;
            } else if (length3 >= LARGE_ARRAY_SIZE) {
              var set5 = iteratee2 ? null : createSet(array3);
              if (set5) {
                return setToArray(set5);
              }
              isCommon = false;
              includes2 = cacheHas;
              seen = new SetCache();
            } else {
              seen = iteratee2 ? [] : result2;
            }
            outer:
              while (++index < length3) {
                var value = array3[index], computed = iteratee2 ? iteratee2(value) : value;
                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                  var seenIndex = seen.length;
                  while (seenIndex--) {
                    if (seen[seenIndex] === computed) {
                      continue outer;
                    }
                  }
                  if (iteratee2) {
                    seen.push(computed);
                  }
                  result2.push(value);
                } else if (!includes2(seen, computed, comparator)) {
                  if (seen !== result2) {
                    seen.push(computed);
                  }
                  result2.push(value);
                }
              }
            return result2;
          }
          function baseUnset(object4, path2) {
            path2 = castPath(path2, object4);
            object4 = parent(object4, path2);
            return object4 == null || delete object4[toKey(last2(path2))];
          }
          function baseUpdate(object4, path2, updater, customizer) {
            return baseSet(object4, path2, updater(baseGet(object4, path2)), customizer);
          }
          function baseWhile(array3, predicate, isDrop, fromRight) {
            var length3 = array3.length, index = fromRight ? length3 : -1;
            while ((fromRight ? index-- : ++index < length3) && predicate(array3[index], index, array3)) {
            }
            return isDrop ? baseSlice(array3, fromRight ? 0 : index, fromRight ? index + 1 : length3) : baseSlice(array3, fromRight ? index + 1 : 0, fromRight ? length3 : index);
          }
          function baseWrapperValue(value, actions) {
            var result2 = value;
            if (result2 instanceof LazyWrapper) {
              result2 = result2.value();
            }
            return arrayReduce(actions, function(result3, action) {
              return action.func.apply(action.thisArg, arrayPush([result3], action.args));
            }, result2);
          }
          function baseXor(arrays, iteratee2, comparator) {
            var length3 = arrays.length;
            if (length3 < 2) {
              return length3 ? baseUniq(arrays[0]) : [];
            }
            var index = -1, result2 = Array2(length3);
            while (++index < length3) {
              var array3 = arrays[index], othIndex = -1;
              while (++othIndex < length3) {
                if (othIndex != index) {
                  result2[index] = baseDifference(result2[index] || array3, arrays[othIndex], iteratee2, comparator);
                }
              }
            }
            return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
          }
          function baseZipObject(props, values3, assignFunc) {
            var index = -1, length3 = props.length, valsLength = values3.length, result2 = {};
            while (++index < length3) {
              var value = index < valsLength ? values3[index] : undefined2;
              assignFunc(result2, props[index], value);
            }
            return result2;
          }
          function castArrayLikeObject(value) {
            return isArrayLikeObject(value) ? value : [];
          }
          function castFunction(value) {
            return typeof value == "function" ? value : identity;
          }
          function castPath(value, object4) {
            if (isArray4(value)) {
              return value;
            }
            return isKey(value, object4) ? [value] : stringToPath(toString3(value));
          }
          var castRest = baseRest;
          function castSlice(array3, start, end) {
            var length3 = array3.length;
            end = end === undefined2 ? length3 : end;
            return !start && end >= length3 ? array3 : baseSlice(array3, start, end);
          }
          var clearTimeout2 = ctxClearTimeout || function(id2) {
            return root.clearTimeout(id2);
          };
          function cloneBuffer(buffer5, isDeep) {
            if (isDeep) {
              return buffer5.slice();
            }
            var length3 = buffer5.length, result2 = allocUnsafe ? allocUnsafe(length3) : new buffer5.constructor(length3);
            buffer5.copy(result2);
            return result2;
          }
          function cloneArrayBuffer(arrayBuffer) {
            var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
            new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
            return result2;
          }
          function cloneDataView(dataView, isDeep) {
            var buffer5 = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
            return new dataView.constructor(buffer5, dataView.byteOffset, dataView.byteLength);
          }
          function cloneRegExp(regexp) {
            var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
            result2.lastIndex = regexp.lastIndex;
            return result2;
          }
          function cloneSymbol(symbol2) {
            return symbolValueOf ? Object2(symbolValueOf.call(symbol2)) : {};
          }
          function cloneTypedArray(typedArray, isDeep) {
            var buffer5 = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
            return new typedArray.constructor(buffer5, typedArray.byteOffset, typedArray.length);
          }
          function compareAscending(value, other) {
            if (value !== other) {
              var valIsDefined = value !== undefined2, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
              var othIsDefined = other !== undefined2, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
              if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
                return 1;
              }
              if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
                return -1;
              }
            }
            return 0;
          }
          function compareMultiple(object4, other, orders) {
            var index = -1, objCriteria = object4.criteria, othCriteria = other.criteria, length3 = objCriteria.length, ordersLength = orders.length;
            while (++index < length3) {
              var result2 = compareAscending(objCriteria[index], othCriteria[index]);
              if (result2) {
                if (index >= ordersLength) {
                  return result2;
                }
                var order = orders[index];
                return result2 * (order == "desc" ? -1 : 1);
              }
            }
            return object4.index - other.index;
          }
          function composeArgs(args2, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args2.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
            while (++leftIndex < leftLength) {
              result2[leftIndex] = partials[leftIndex];
            }
            while (++argsIndex < holdersLength) {
              if (isUncurried || argsIndex < argsLength) {
                result2[holders[argsIndex]] = args2[argsIndex];
              }
            }
            while (rangeLength--) {
              result2[leftIndex++] = args2[argsIndex++];
            }
            return result2;
          }
          function composeArgsRight(args2, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args2.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
            while (++argsIndex < rangeLength) {
              result2[argsIndex] = args2[argsIndex];
            }
            var offset = argsIndex;
            while (++rightIndex < rightLength) {
              result2[offset + rightIndex] = partials[rightIndex];
            }
            while (++holdersIndex < holdersLength) {
              if (isUncurried || argsIndex < argsLength) {
                result2[offset + holders[holdersIndex]] = args2[argsIndex++];
              }
            }
            return result2;
          }
          function copyArray(source, array3) {
            var index = -1, length3 = source.length;
            array3 || (array3 = Array2(length3));
            while (++index < length3) {
              array3[index] = source[index];
            }
            return array3;
          }
          function copyObject(source, props, object4, customizer) {
            var isNew = !object4;
            object4 || (object4 = {});
            var index = -1, length3 = props.length;
            while (++index < length3) {
              var key = props[index];
              var newValue = customizer ? customizer(object4[key], source[key], key, object4, source) : undefined2;
              if (newValue === undefined2) {
                newValue = source[key];
              }
              if (isNew) {
                baseAssignValue(object4, key, newValue);
              } else {
                assignValue(object4, key, newValue);
              }
            }
            return object4;
          }
          function copySymbols(source, object4) {
            return copyObject(source, getSymbols(source), object4);
          }
          function copySymbolsIn(source, object4) {
            return copyObject(source, getSymbolsIn(source), object4);
          }
          function createAggregator(setter, initializer) {
            return function(collection2, iteratee2) {
              var func = isArray4(collection2) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
              return func(collection2, setter, getIteratee(iteratee2, 2), accumulator);
            };
          }
          function createAssigner(assigner) {
            return baseRest(function(object4, sources) {
              var index = -1, length3 = sources.length, customizer = length3 > 1 ? sources[length3 - 1] : undefined2, guard = length3 > 2 ? sources[2] : undefined2;
              customizer = assigner.length > 3 && typeof customizer == "function" ? (length3--, customizer) : undefined2;
              if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                customizer = length3 < 3 ? undefined2 : customizer;
                length3 = 1;
              }
              object4 = Object2(object4);
              while (++index < length3) {
                var source = sources[index];
                if (source) {
                  assigner(object4, source, index, customizer);
                }
              }
              return object4;
            });
          }
          function createBaseEach(eachFunc, fromRight) {
            return function(collection2, iteratee2) {
              if (collection2 == null) {
                return collection2;
              }
              if (!isArrayLike(collection2)) {
                return eachFunc(collection2, iteratee2);
              }
              var length3 = collection2.length, index = fromRight ? length3 : -1, iterable = Object2(collection2);
              while (fromRight ? index-- : ++index < length3) {
                if (iteratee2(iterable[index], index, iterable) === false) {
                  break;
                }
              }
              return collection2;
            };
          }
          function createBaseFor(fromRight) {
            return function(object4, iteratee2, keysFunc) {
              var index = -1, iterable = Object2(object4), props = keysFunc(object4), length3 = props.length;
              while (length3--) {
                var key = props[fromRight ? length3 : ++index];
                if (iteratee2(iterable[key], key, iterable) === false) {
                  break;
                }
              }
              return object4;
            };
          }
          function createBind(func, bitmask, thisArg) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
              var fn2 = this && this !== root && this instanceof wrapper ? Ctor : func;
              return fn2.apply(isBind ? thisArg : this, arguments);
            }
            return wrapper;
          }
          function createCaseFirst(methodName) {
            return function(string5) {
              string5 = toString3(string5);
              var strSymbols = hasUnicode(string5) ? stringToArray(string5) : undefined2;
              var chr = strSymbols ? strSymbols[0] : string5.charAt(0);
              var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string5.slice(1);
              return chr[methodName]() + trailing;
            };
          }
          function createCompounder(callback) {
            return function(string5) {
              return arrayReduce(words(deburr(string5).replace(reApos, "")), callback, "");
            };
          }
          function createCtor(Ctor) {
            return function() {
              var args2 = arguments;
              switch (args2.length) {
                case 0:
                  return new Ctor();
                case 1:
                  return new Ctor(args2[0]);
                case 2:
                  return new Ctor(args2[0], args2[1]);
                case 3:
                  return new Ctor(args2[0], args2[1], args2[2]);
                case 4:
                  return new Ctor(args2[0], args2[1], args2[2], args2[3]);
                case 5:
                  return new Ctor(args2[0], args2[1], args2[2], args2[3], args2[4]);
                case 6:
                  return new Ctor(args2[0], args2[1], args2[2], args2[3], args2[4], args2[5]);
                case 7:
                  return new Ctor(args2[0], args2[1], args2[2], args2[3], args2[4], args2[5], args2[6]);
              }
              var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args2);
              return isObject2(result2) ? result2 : thisBinding;
            };
          }
          function createCurry(func, bitmask, arity) {
            var Ctor = createCtor(func);
            function wrapper() {
              var length3 = arguments.length, args2 = Array2(length3), index = length3, placeholder = getHolder(wrapper);
              while (index--) {
                args2[index] = arguments[index];
              }
              var holders = length3 < 3 && args2[0] !== placeholder && args2[length3 - 1] !== placeholder ? [] : replaceHolders(args2, placeholder);
              length3 -= holders.length;
              if (length3 < arity) {
                return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined2, args2, holders, undefined2, undefined2, arity - length3);
              }
              var fn2 = this && this !== root && this instanceof wrapper ? Ctor : func;
              return apply(fn2, this, args2);
            }
            return wrapper;
          }
          function createFind(findIndexFunc) {
            return function(collection2, predicate, fromIndex) {
              var iterable = Object2(collection2);
              if (!isArrayLike(collection2)) {
                var iteratee2 = getIteratee(predicate, 3);
                collection2 = keys5(collection2);
                predicate = function(key) {
                  return iteratee2(iterable[key], key, iterable);
                };
              }
              var index = findIndexFunc(collection2, predicate, fromIndex);
              return index > -1 ? iterable[iteratee2 ? collection2[index] : index] : undefined2;
            };
          }
          function createFlow(fromRight) {
            return flatRest(function(funcs) {
              var length3 = funcs.length, index = length3, prereq = LodashWrapper.prototype.thru;
              if (fromRight) {
                funcs.reverse();
              }
              while (index--) {
                var func = funcs[index];
                if (typeof func != "function") {
                  throw new TypeError2(FUNC_ERROR_TEXT);
                }
                if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                  var wrapper = new LodashWrapper([], true);
                }
              }
              index = wrapper ? index : length3;
              while (++index < length3) {
                func = funcs[index];
                var funcName = getFuncName(func), data2 = funcName == "wrapper" ? getData(func) : undefined2;
                if (data2 && isLaziable(data2[0]) && data2[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data2[4].length && data2[9] == 1) {
                  wrapper = wrapper[getFuncName(data2[0])].apply(wrapper, data2[3]);
                } else {
                  wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
                }
              }
              return function() {
                var args2 = arguments, value = args2[0];
                if (wrapper && args2.length == 1 && isArray4(value)) {
                  return wrapper.plant(value).value();
                }
                var index2 = 0, result2 = length3 ? funcs[index2].apply(this, args2) : value;
                while (++index2 < length3) {
                  result2 = funcs[index2].call(this, result2);
                }
                return result2;
              };
            });
          }
          function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
            var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined2 : createCtor(func);
            function wrapper() {
              var length3 = arguments.length, args2 = Array2(length3), index = length3;
              while (index--) {
                args2[index] = arguments[index];
              }
              if (isCurried) {
                var placeholder = getHolder(wrapper), holdersCount = countHolders(args2, placeholder);
              }
              if (partials) {
                args2 = composeArgs(args2, partials, holders, isCurried);
              }
              if (partialsRight) {
                args2 = composeArgsRight(args2, partialsRight, holdersRight, isCurried);
              }
              length3 -= holdersCount;
              if (isCurried && length3 < arity) {
                var newHolders = replaceHolders(args2, placeholder);
                return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args2, newHolders, argPos, ary2, arity - length3);
              }
              var thisBinding = isBind ? thisArg : this, fn2 = isBindKey ? thisBinding[func] : func;
              length3 = args2.length;
              if (argPos) {
                args2 = reorder(args2, argPos);
              } else if (isFlip && length3 > 1) {
                args2.reverse();
              }
              if (isAry && ary2 < length3) {
                args2.length = ary2;
              }
              if (this && this !== root && this instanceof wrapper) {
                fn2 = Ctor || createCtor(fn2);
              }
              return fn2.apply(thisBinding, args2);
            }
            return wrapper;
          }
          function createInverter(setter, toIteratee) {
            return function(object4, iteratee2) {
              return baseInverter(object4, setter, toIteratee(iteratee2), {});
            };
          }
          function createMathOperation(operator, defaultValue) {
            return function(value, other) {
              var result2;
              if (value === undefined2 && other === undefined2) {
                return defaultValue;
              }
              if (value !== undefined2) {
                result2 = value;
              }
              if (other !== undefined2) {
                if (result2 === undefined2) {
                  return other;
                }
                if (typeof value == "string" || typeof other == "string") {
                  value = baseToString(value);
                  other = baseToString(other);
                } else {
                  value = baseToNumber(value);
                  other = baseToNumber(other);
                }
                result2 = operator(value, other);
              }
              return result2;
            };
          }
          function createOver(arrayFunc) {
            return flatRest(function(iteratees) {
              iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
              return baseRest(function(args2) {
                var thisArg = this;
                return arrayFunc(iteratees, function(iteratee2) {
                  return apply(iteratee2, thisArg, args2);
                });
              });
            });
          }
          function createPadding(length3, chars) {
            chars = chars === undefined2 ? " " : baseToString(chars);
            var charsLength = chars.length;
            if (charsLength < 2) {
              return charsLength ? baseRepeat(chars, length3) : chars;
            }
            var result2 = baseRepeat(chars, nativeCeil(length3 / stringSize(chars)));
            return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length3).join("") : result2.slice(0, length3);
          }
          function createPartial(func, bitmask, thisArg, partials) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
              var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args2 = Array2(leftLength + argsLength), fn2 = this && this !== root && this instanceof wrapper ? Ctor : func;
              while (++leftIndex < leftLength) {
                args2[leftIndex] = partials[leftIndex];
              }
              while (argsLength--) {
                args2[leftIndex++] = arguments[++argsIndex];
              }
              return apply(fn2, isBind ? thisArg : this, args2);
            }
            return wrapper;
          }
          function createRange(fromRight) {
            return function(start, end, step) {
              if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
                end = step = undefined2;
              }
              start = toFinite(start);
              if (end === undefined2) {
                end = start;
                start = 0;
              } else {
                end = toFinite(end);
              }
              step = step === undefined2 ? start < end ? 1 : -1 : toFinite(step);
              return baseRange(start, end, step, fromRight);
            };
          }
          function createRelationalOperation(operator) {
            return function(value, other) {
              if (!(typeof value == "string" && typeof other == "string")) {
                value = toNumber(value);
                other = toNumber(other);
              }
              return operator(value, other);
            };
          }
          function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
            var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined2, newHoldersRight = isCurry ? undefined2 : holders, newPartials = isCurry ? partials : undefined2, newPartialsRight = isCurry ? undefined2 : partials;
            bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
            bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
            if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
              bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
            }
            var newData = [
              func,
              bitmask,
              thisArg,
              newPartials,
              newHolders,
              newPartialsRight,
              newHoldersRight,
              argPos,
              ary2,
              arity
            ];
            var result2 = wrapFunc.apply(undefined2, newData);
            if (isLaziable(func)) {
              setData(result2, newData);
            }
            result2.placeholder = placeholder;
            return setWrapToString(result2, func, bitmask);
          }
          function createRound(methodName) {
            var func = Math2[methodName];
            return function(number3, precision) {
              number3 = toNumber(number3);
              precision = precision == null ? 0 : nativeMin(toInteger2(precision), 292);
              if (precision && nativeIsFinite(number3)) {
                var pair2 = (toString3(number3) + "e").split("e"), value = func(pair2[0] + "e" + (+pair2[1] + precision));
                pair2 = (toString3(value) + "e").split("e");
                return +(pair2[0] + "e" + (+pair2[1] - precision));
              }
              return func(number3);
            };
          }
          var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop : function(values3) {
            return new Set2(values3);
          };
          function createToPairs(keysFunc) {
            return function(object4) {
              var tag = getTag(object4);
              if (tag == mapTag) {
                return mapToArray(object4);
              }
              if (tag == setTag) {
                return setToPairs(object4);
              }
              return baseToPairs(object4, keysFunc(object4));
            };
          }
          function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
            var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
            if (!isBindKey && typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            var length3 = partials ? partials.length : 0;
            if (!length3) {
              bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
              partials = holders = undefined2;
            }
            ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger2(ary2), 0);
            arity = arity === undefined2 ? arity : toInteger2(arity);
            length3 -= holders ? holders.length : 0;
            if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
              var partialsRight = partials, holdersRight = holders;
              partials = holders = undefined2;
            }
            var data2 = isBindKey ? undefined2 : getData(func);
            var newData = [
              func,
              bitmask,
              thisArg,
              partials,
              holders,
              partialsRight,
              holdersRight,
              argPos,
              ary2,
              arity
            ];
            if (data2) {
              mergeData(newData, data2);
            }
            func = newData[0];
            bitmask = newData[1];
            thisArg = newData[2];
            partials = newData[3];
            holders = newData[4];
            arity = newData[9] = newData[9] === undefined2 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length3, 0);
            if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
              bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
            }
            if (!bitmask || bitmask == WRAP_BIND_FLAG) {
              var result2 = createBind(func, bitmask, thisArg);
            } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
              result2 = createCurry(func, bitmask, arity);
            } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
              result2 = createPartial(func, bitmask, thisArg, partials);
            } else {
              result2 = createHybrid.apply(undefined2, newData);
            }
            var setter = data2 ? baseSetData : setData;
            return setWrapToString(setter(result2, newData), func, bitmask);
          }
          function customDefaultsAssignIn(objValue, srcValue, key, object4) {
            if (objValue === undefined2 || eq(objValue, objectProto[key]) && !hasOwnProperty2.call(object4, key)) {
              return srcValue;
            }
            return objValue;
          }
          function customDefaultsMerge(objValue, srcValue, key, object4, source, stack) {
            if (isObject2(objValue) && isObject2(srcValue)) {
              stack.set(srcValue, objValue);
              baseMerge(objValue, srcValue, undefined2, customDefaultsMerge, stack);
              stack["delete"](srcValue);
            }
            return objValue;
          }
          function customOmitClone(value) {
            return isPlainObject(value) ? undefined2 : value;
          }
          function equalArrays(array3, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array3.length, othLength = other.length;
            if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
              return false;
            }
            var arrStacked = stack.get(array3);
            var othStacked = stack.get(other);
            if (arrStacked && othStacked) {
              return arrStacked == other && othStacked == array3;
            }
            var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
            stack.set(array3, other);
            stack.set(other, array3);
            while (++index < arrLength) {
              var arrValue = array3[index], othValue = other[index];
              if (customizer) {
                var compared = isPartial ? customizer(othValue, arrValue, index, other, array3, stack) : customizer(arrValue, othValue, index, array3, other, stack);
              }
              if (compared !== undefined2) {
                if (compared) {
                  continue;
                }
                result2 = false;
                break;
              }
              if (seen) {
                if (!arraySome(other, function(othValue2, othIndex) {
                  if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                    return seen.push(othIndex);
                  }
                })) {
                  result2 = false;
                  break;
                }
              } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                result2 = false;
                break;
              }
            }
            stack["delete"](array3);
            stack["delete"](other);
            return result2;
          }
          function equalByTag(object4, other, tag, bitmask, customizer, equalFunc, stack) {
            switch (tag) {
              case dataViewTag:
                if (object4.byteLength != other.byteLength || object4.byteOffset != other.byteOffset) {
                  return false;
                }
                object4 = object4.buffer;
                other = other.buffer;
              case arrayBufferTag:
                if (object4.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object4), new Uint8Array2(other))) {
                  return false;
                }
                return true;
              case boolTag:
              case dateTag:
              case numberTag:
                return eq(+object4, +other);
              case errorTag:
                return object4.name == other.name && object4.message == other.message;
              case regexpTag:
              case stringTag:
                return object4 == other + "";
              case mapTag:
                var convert = mapToArray;
              case setTag:
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                convert || (convert = setToArray);
                if (object4.size != other.size && !isPartial) {
                  return false;
                }
                var stacked = stack.get(object4);
                if (stacked) {
                  return stacked == other;
                }
                bitmask |= COMPARE_UNORDERED_FLAG;
                stack.set(object4, other);
                var result2 = equalArrays(convert(object4), convert(other), bitmask, customizer, equalFunc, stack);
                stack["delete"](object4);
                return result2;
              case symbolTag:
                if (symbolValueOf) {
                  return symbolValueOf.call(object4) == symbolValueOf.call(other);
                }
            }
            return false;
          }
          function equalObjects(object4, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object4), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
            if (objLength != othLength && !isPartial) {
              return false;
            }
            var index = objLength;
            while (index--) {
              var key = objProps[index];
              if (!(isPartial ? key in other : hasOwnProperty2.call(other, key))) {
                return false;
              }
            }
            var objStacked = stack.get(object4);
            var othStacked = stack.get(other);
            if (objStacked && othStacked) {
              return objStacked == other && othStacked == object4;
            }
            var result2 = true;
            stack.set(object4, other);
            stack.set(other, object4);
            var skipCtor = isPartial;
            while (++index < objLength) {
              key = objProps[index];
              var objValue = object4[key], othValue = other[key];
              if (customizer) {
                var compared = isPartial ? customizer(othValue, objValue, key, other, object4, stack) : customizer(objValue, othValue, key, object4, other, stack);
              }
              if (!(compared === undefined2 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
                result2 = false;
                break;
              }
              skipCtor || (skipCtor = key == "constructor");
            }
            if (result2 && !skipCtor) {
              var objCtor = object4.constructor, othCtor = other.constructor;
              if (objCtor != othCtor && ("constructor" in object4 && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
                result2 = false;
              }
            }
            stack["delete"](object4);
            stack["delete"](other);
            return result2;
          }
          function flatRest(func) {
            return setToString(overRest(func, undefined2, flatten), func + "");
          }
          function getAllKeys(object4) {
            return baseGetAllKeys(object4, keys5, getSymbols);
          }
          function getAllKeysIn(object4) {
            return baseGetAllKeys(object4, keysIn, getSymbolsIn);
          }
          var getData = !metaMap ? noop : function(func) {
            return metaMap.get(func);
          };
          function getFuncName(func) {
            var result2 = func.name + "", array3 = realNames[result2], length3 = hasOwnProperty2.call(realNames, result2) ? array3.length : 0;
            while (length3--) {
              var data2 = array3[length3], otherFunc = data2.func;
              if (otherFunc == null || otherFunc == func) {
                return data2.name;
              }
            }
            return result2;
          }
          function getHolder(func) {
            var object4 = hasOwnProperty2.call(lodash, "placeholder") ? lodash : func;
            return object4.placeholder;
          }
          function getIteratee() {
            var result2 = lodash.iteratee || iteratee;
            result2 = result2 === iteratee ? baseIteratee : result2;
            return arguments.length ? result2(arguments[0], arguments[1]) : result2;
          }
          function getMapData(map11, key) {
            var data2 = map11.__data__;
            return isKeyable(key) ? data2[typeof key == "string" ? "string" : "hash"] : data2.map;
          }
          function getMatchData(object4) {
            var result2 = keys5(object4), length3 = result2.length;
            while (length3--) {
              var key = result2[length3], value = object4[key];
              result2[length3] = [key, value, isStrictComparable(value)];
            }
            return result2;
          }
          function getNative(object4, key) {
            var value = getValue(object4, key);
            return baseIsNative(value) ? value : undefined2;
          }
          function getRawTag(value) {
            var isOwn = hasOwnProperty2.call(value, symToStringTag), tag = value[symToStringTag];
            try {
              value[symToStringTag] = undefined2;
              var unmasked = true;
            } catch (e4) {
            }
            var result2 = nativeObjectToString.call(value);
            if (unmasked) {
              if (isOwn) {
                value[symToStringTag] = tag;
              } else {
                delete value[symToStringTag];
              }
            }
            return result2;
          }
          var getSymbols = !nativeGetSymbols ? stubArray : function(object4) {
            if (object4 == null) {
              return [];
            }
            object4 = Object2(object4);
            return arrayFilter(nativeGetSymbols(object4), function(symbol2) {
              return propertyIsEnumerable3.call(object4, symbol2);
            });
          };
          var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object4) {
            var result2 = [];
            while (object4) {
              arrayPush(result2, getSymbols(object4));
              object4 = getPrototype(object4);
            }
            return result2;
          };
          var getTag = baseGetTag;
          if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap3 && getTag(new WeakMap3()) != weakMapTag) {
            getTag = function(value) {
              var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined2, ctorString = Ctor ? toSource(Ctor) : "";
              if (ctorString) {
                switch (ctorString) {
                  case dataViewCtorString:
                    return dataViewTag;
                  case mapCtorString:
                    return mapTag;
                  case promiseCtorString:
                    return promiseTag;
                  case setCtorString:
                    return setTag;
                  case weakMapCtorString:
                    return weakMapTag;
                }
              }
              return result2;
            };
          }
          function getView(start, end, transforms) {
            var index = -1, length3 = transforms.length;
            while (++index < length3) {
              var data2 = transforms[index], size2 = data2.size;
              switch (data2.type) {
                case "drop":
                  start += size2;
                  break;
                case "dropRight":
                  end -= size2;
                  break;
                case "take":
                  end = nativeMin(end, start + size2);
                  break;
                case "takeRight":
                  start = nativeMax(start, end - size2);
                  break;
              }
            }
            return { "start": start, "end": end };
          }
          function getWrapDetails(source) {
            var match2 = source.match(reWrapDetails);
            return match2 ? match2[1].split(reSplitDetails) : [];
          }
          function hasPath(object4, path2, hasFunc) {
            path2 = castPath(path2, object4);
            var index = -1, length3 = path2.length, result2 = false;
            while (++index < length3) {
              var key = toKey(path2[index]);
              if (!(result2 = object4 != null && hasFunc(object4, key))) {
                break;
              }
              object4 = object4[key];
            }
            if (result2 || ++index != length3) {
              return result2;
            }
            length3 = object4 == null ? 0 : object4.length;
            return !!length3 && isLength(length3) && isIndex(key, length3) && (isArray4(object4) || isArguments(object4));
          }
          function initCloneArray(array3) {
            var length3 = array3.length, result2 = new array3.constructor(length3);
            if (length3 && typeof array3[0] == "string" && hasOwnProperty2.call(array3, "index")) {
              result2.index = array3.index;
              result2.input = array3.input;
            }
            return result2;
          }
          function initCloneObject(object4) {
            return typeof object4.constructor == "function" && !isPrototype(object4) ? baseCreate(getPrototype(object4)) : {};
          }
          function initCloneByTag(object4, tag, isDeep) {
            var Ctor = object4.constructor;
            switch (tag) {
              case arrayBufferTag:
                return cloneArrayBuffer(object4);
              case boolTag:
              case dateTag:
                return new Ctor(+object4);
              case dataViewTag:
                return cloneDataView(object4, isDeep);
              case float32Tag:
              case float64Tag:
              case int8Tag:
              case int16Tag:
              case int32Tag:
              case uint8Tag:
              case uint8ClampedTag:
              case uint16Tag:
              case uint32Tag:
                return cloneTypedArray(object4, isDeep);
              case mapTag:
                return new Ctor();
              case numberTag:
              case stringTag:
                return new Ctor(object4);
              case regexpTag:
                return cloneRegExp(object4);
              case setTag:
                return new Ctor();
              case symbolTag:
                return cloneSymbol(object4);
            }
          }
          function insertWrapDetails(source, details) {
            var length3 = details.length;
            if (!length3) {
              return source;
            }
            var lastIndex = length3 - 1;
            details[lastIndex] = (length3 > 1 ? "& " : "") + details[lastIndex];
            details = details.join(length3 > 2 ? ", " : " ");
            return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
          }
          function isFlattenable(value) {
            return isArray4(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
          }
          function isIndex(value, length3) {
            var type = typeof value;
            length3 = length3 == null ? MAX_SAFE_INTEGER2 : length3;
            return !!length3 && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length3);
          }
          function isIterateeCall(value, index, object4) {
            if (!isObject2(object4)) {
              return false;
            }
            var type = typeof index;
            if (type == "number" ? isArrayLike(object4) && isIndex(index, object4.length) : type == "string" && index in object4) {
              return eq(object4[index], value);
            }
            return false;
          }
          function isKey(value, object4) {
            if (isArray4(value)) {
              return false;
            }
            var type = typeof value;
            if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
              return true;
            }
            return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object4 != null && value in Object2(object4);
          }
          function isKeyable(value) {
            var type = typeof value;
            return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
          }
          function isLaziable(func) {
            var funcName = getFuncName(func), other = lodash[funcName];
            if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
              return false;
            }
            if (func === other) {
              return true;
            }
            var data2 = getData(other);
            return !!data2 && func === data2[0];
          }
          function isMasked(func) {
            return !!maskSrcKey && maskSrcKey in func;
          }
          var isMaskable = coreJsData ? isFunction : stubFalse;
          function isPrototype(value) {
            var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
            return value === proto;
          }
          function isStrictComparable(value) {
            return value === value && !isObject2(value);
          }
          function matchesStrictComparable(key, srcValue) {
            return function(object4) {
              if (object4 == null) {
                return false;
              }
              return object4[key] === srcValue && (srcValue !== undefined2 || key in Object2(object4));
            };
          }
          function memoizeCapped(func) {
            var result2 = memoize(func, function(key) {
              if (cache.size === MAX_MEMOIZE_SIZE) {
                cache.clear();
              }
              return key;
            });
            var cache = result2.cache;
            return result2;
          }
          function mergeData(data2, source) {
            var bitmask = data2[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
            var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data2[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
            if (!(isCommon || isCombo)) {
              return data2;
            }
            if (srcBitmask & WRAP_BIND_FLAG) {
              data2[2] = source[2];
              newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
            }
            var value = source[3];
            if (value) {
              var partials = data2[3];
              data2[3] = partials ? composeArgs(partials, value, source[4]) : value;
              data2[4] = partials ? replaceHolders(data2[3], PLACEHOLDER) : source[4];
            }
            value = source[5];
            if (value) {
              partials = data2[5];
              data2[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
              data2[6] = partials ? replaceHolders(data2[5], PLACEHOLDER) : source[6];
            }
            value = source[7];
            if (value) {
              data2[7] = value;
            }
            if (srcBitmask & WRAP_ARY_FLAG) {
              data2[8] = data2[8] == null ? source[8] : nativeMin(data2[8], source[8]);
            }
            if (data2[9] == null) {
              data2[9] = source[9];
            }
            data2[0] = source[0];
            data2[1] = newBitmask;
            return data2;
          }
          function nativeKeysIn(object4) {
            var result2 = [];
            if (object4 != null) {
              for (var key in Object2(object4)) {
                result2.push(key);
              }
            }
            return result2;
          }
          function objectToString2(value) {
            return nativeObjectToString.call(value);
          }
          function overRest(func, start, transform2) {
            start = nativeMax(start === undefined2 ? func.length - 1 : start, 0);
            return function() {
              var args2 = arguments, index = -1, length3 = nativeMax(args2.length - start, 0), array3 = Array2(length3);
              while (++index < length3) {
                array3[index] = args2[start + index];
              }
              index = -1;
              var otherArgs = Array2(start + 1);
              while (++index < start) {
                otherArgs[index] = args2[index];
              }
              otherArgs[start] = transform2(array3);
              return apply(func, this, otherArgs);
            };
          }
          function parent(object4, path2) {
            return path2.length < 2 ? object4 : baseGet(object4, baseSlice(path2, 0, -1));
          }
          function reorder(array3, indexes) {
            var arrLength = array3.length, length3 = nativeMin(indexes.length, arrLength), oldArray = copyArray(array3);
            while (length3--) {
              var index = indexes[length3];
              array3[length3] = isIndex(index, arrLength) ? oldArray[index] : undefined2;
            }
            return array3;
          }
          function safeGet(object4, key) {
            if (key === "constructor" && typeof object4[key] === "function") {
              return;
            }
            if (key == "__proto__") {
              return;
            }
            return object4[key];
          }
          var setData = shortOut(baseSetData);
          var setTimeout2 = ctxSetTimeout || function(func, wait) {
            return root.setTimeout(func, wait);
          };
          var setToString = shortOut(baseSetToString);
          function setWrapToString(wrapper, reference, bitmask) {
            var source = reference + "";
            return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
          }
          function shortOut(func) {
            var count = 0, lastCalled = 0;
            return function() {
              var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
              lastCalled = stamp;
              if (remaining > 0) {
                if (++count >= HOT_COUNT) {
                  return arguments[0];
                }
              } else {
                count = 0;
              }
              return func.apply(undefined2, arguments);
            };
          }
          function shuffleSelf(array3, size2) {
            var index = -1, length3 = array3.length, lastIndex = length3 - 1;
            size2 = size2 === undefined2 ? length3 : size2;
            while (++index < size2) {
              var rand = baseRandom(index, lastIndex), value = array3[rand];
              array3[rand] = array3[index];
              array3[index] = value;
            }
            array3.length = size2;
            return array3;
          }
          var stringToPath = memoizeCapped(function(string5) {
            var result2 = [];
            if (string5.charCodeAt(0) === 46) {
              result2.push("");
            }
            string5.replace(rePropName, function(match2, number3, quote, subString) {
              result2.push(quote ? subString.replace(reEscapeChar, "$1") : number3 || match2);
            });
            return result2;
          });
          function toKey(value) {
            if (typeof value == "string" || isSymbol(value)) {
              return value;
            }
            var result2 = value + "";
            return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
          }
          function toSource(func) {
            if (func != null) {
              try {
                return funcToString.call(func);
              } catch (e4) {
              }
              try {
                return func + "";
              } catch (e4) {
              }
            }
            return "";
          }
          function updateWrapDetails(details, bitmask) {
            arrayEach(wrapFlags, function(pair2) {
              var value = "_." + pair2[0];
              if (bitmask & pair2[1] && !arrayIncludes2(details, value)) {
                details.push(value);
              }
            });
            return details.sort();
          }
          function wrapperClone(wrapper) {
            if (wrapper instanceof LazyWrapper) {
              return wrapper.clone();
            }
            var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
            result2.__actions__ = copyArray(wrapper.__actions__);
            result2.__index__ = wrapper.__index__;
            result2.__values__ = wrapper.__values__;
            return result2;
          }
          function chunk(array3, size2, guard) {
            if (guard ? isIterateeCall(array3, size2, guard) : size2 === undefined2) {
              size2 = 1;
            } else {
              size2 = nativeMax(toInteger2(size2), 0);
            }
            var length3 = array3 == null ? 0 : array3.length;
            if (!length3 || size2 < 1) {
              return [];
            }
            var index = 0, resIndex = 0, result2 = Array2(nativeCeil(length3 / size2));
            while (index < length3) {
              result2[resIndex++] = baseSlice(array3, index, index += size2);
            }
            return result2;
          }
          function compact(array3) {
            var index = -1, length3 = array3 == null ? 0 : array3.length, resIndex = 0, result2 = [];
            while (++index < length3) {
              var value = array3[index];
              if (value) {
                result2[resIndex++] = value;
              }
            }
            return result2;
          }
          function concat() {
            var length3 = arguments.length;
            if (!length3) {
              return [];
            }
            var args2 = Array2(length3 - 1), array3 = arguments[0], index = length3;
            while (index--) {
              args2[index - 1] = arguments[index];
            }
            return arrayPush(isArray4(array3) ? copyArray(array3) : [array3], baseFlatten(args2, 1));
          }
          var difference = baseRest(function(array3, values3) {
            return isArrayLikeObject(array3) ? baseDifference(array3, baseFlatten(values3, 1, isArrayLikeObject, true)) : [];
          });
          var differenceBy = baseRest(function(array3, values3) {
            var iteratee2 = last2(values3);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return isArrayLikeObject(array3) ? baseDifference(array3, baseFlatten(values3, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
          });
          var differenceWith = baseRest(function(array3, values3) {
            var comparator = last2(values3);
            if (isArrayLikeObject(comparator)) {
              comparator = undefined2;
            }
            return isArrayLikeObject(array3) ? baseDifference(array3, baseFlatten(values3, 1, isArrayLikeObject, true), undefined2, comparator) : [];
          });
          function drop(array3, n2, guard) {
            var length3 = array3 == null ? 0 : array3.length;
            if (!length3) {
              return [];
            }
            n2 = guard || n2 === undefined2 ? 1 : toInteger2(n2);
            return baseSlice(array3, n2 < 0 ? 0 : n2, length3);
          }
          function dropRight(array3, n2, guard) {
            var length3 = array3 == null ? 0 : array3.length;
            if (!length3) {
              return [];
            }
            n2 = guard || n2 === undefined2 ? 1 : toInteger2(n2);
            n2 = length3 - n2;
            return baseSlice(array3, 0, n2 < 0 ? 0 : n2);
          }
          function dropRightWhile(array3, predicate) {
            return array3 && array3.length ? baseWhile(array3, getIteratee(predicate, 3), true, true) : [];
          }
          function dropWhile(array3, predicate) {
            return array3 && array3.length ? baseWhile(array3, getIteratee(predicate, 3), true) : [];
          }
          function fill(array3, value, start, end) {
            var length3 = array3 == null ? 0 : array3.length;
            if (!length3) {
              return [];
            }
            if (start && typeof start != "number" && isIterateeCall(array3, value, start)) {
              start = 0;
              end = length3;
            }
            return baseFill(array3, value, start, end);
          }
          function findIndex(array3, predicate, fromIndex) {
            var length3 = array3 == null ? 0 : array3.length;
            if (!length3) {
              return -1;
            }
            var index = fromIndex == null ? 0 : toInteger2(fromIndex);
            if (index < 0) {
              index = nativeMax(length3 + index, 0);
            }
            return baseFindIndex(array3, getIteratee(predicate, 3), index);
          }
          function findLastIndex(array3, predicate, fromIndex) {
            var length3 = array3 == null ? 0 : array3.length;
            if (!length3) {
              return -1;
            }
            var index = length3 - 1;
            if (fromIndex !== undefined2) {
              index = toInteger2(fromIndex);
              index = fromIndex < 0 ? nativeMax(length3 + index, 0) : nativeMin(index, length3 - 1);
            }
            return baseFindIndex(array3, getIteratee(predicate, 3), index, true);
          }
          function flatten(array3) {
            var length3 = array3 == null ? 0 : array3.length;
            return length3 ? baseFlatten(array3, 1) : [];
          }
          function flattenDeep(array3) {
            var length3 = array3 == null ? 0 : array3.length;
            return length3 ? baseFlatten(array3, INFINITY) : [];
          }
          function flattenDepth(array3, depth) {
            var length3 = array3 == null ? 0 : array3.length;
            if (!length3) {
              return [];
            }
            depth = depth === undefined2 ? 1 : toInteger2(depth);
            return baseFlatten(array3, depth);
          }
          function fromPairs(pairs) {
            var index = -1, length3 = pairs == null ? 0 : pairs.length, result2 = {};
            while (++index < length3) {
              var pair2 = pairs[index];
              result2[pair2[0]] = pair2[1];
            }
            return result2;
          }
          function head(array3) {
            return array3 && array3.length ? array3[0] : undefined2;
          }
          function indexOf2(array3, value, fromIndex) {
            var length3 = array3 == null ? 0 : array3.length;
            if (!length3) {
              return -1;
            }
            var index = fromIndex == null ? 0 : toInteger2(fromIndex);
            if (index < 0) {
              index = nativeMax(length3 + index, 0);
            }
            return baseIndexOf(array3, value, index);
          }
          function initial(array3) {
            var length3 = array3 == null ? 0 : array3.length;
            return length3 ? baseSlice(array3, 0, -1) : [];
          }
          var intersection = baseRest(function(arrays) {
            var mapped = arrayMap(arrays, castArrayLikeObject);
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
          });
          var intersectionBy = baseRest(function(arrays) {
            var iteratee2 = last2(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            if (iteratee2 === last2(mapped)) {
              iteratee2 = undefined2;
            } else {
              mapped.pop();
            }
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
          });
          var intersectionWith = baseRest(function(arrays) {
            var comparator = last2(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            if (comparator) {
              mapped.pop();
            }
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined2, comparator) : [];
          });
          function join(array3, separator) {
            return array3 == null ? "" : nativeJoin.call(array3, separator);
          }
          function last2(array3) {
            var length3 = array3 == null ? 0 : array3.length;
            return length3 ? array3[length3 - 1] : undefined2;
          }
          function lastIndexOf(array3, value, fromIndex) {
            var length3 = array3 == null ? 0 : array3.length;
            if (!length3) {
              return -1;
            }
            var index = length3;
            if (fromIndex !== undefined2) {
              index = toInteger2(fromIndex);
              index = index < 0 ? nativeMax(length3 + index, 0) : nativeMin(index, length3 - 1);
            }
            return value === value ? strictLastIndexOf(array3, value, index) : baseFindIndex(array3, baseIsNaN, index, true);
          }
          function nth(array3, n2) {
            return array3 && array3.length ? baseNth(array3, toInteger2(n2)) : undefined2;
          }
          var pull = baseRest(pullAll);
          function pullAll(array3, values3) {
            return array3 && array3.length && values3 && values3.length ? basePullAll(array3, values3) : array3;
          }
          function pullAllBy(array3, values3, iteratee2) {
            return array3 && array3.length && values3 && values3.length ? basePullAll(array3, values3, getIteratee(iteratee2, 2)) : array3;
          }
          function pullAllWith(array3, values3, comparator) {
            return array3 && array3.length && values3 && values3.length ? basePullAll(array3, values3, undefined2, comparator) : array3;
          }
          var pullAt = flatRest(function(array3, indexes) {
            var length3 = array3 == null ? 0 : array3.length, result2 = baseAt(array3, indexes);
            basePullAt(array3, arrayMap(indexes, function(index) {
              return isIndex(index, length3) ? +index : index;
            }).sort(compareAscending));
            return result2;
          });
          function remove(array3, predicate) {
            var result2 = [];
            if (!(array3 && array3.length)) {
              return result2;
            }
            var index = -1, indexes = [], length3 = array3.length;
            predicate = getIteratee(predicate, 3);
            while (++index < length3) {
              var value = array3[index];
              if (predicate(value, index, array3)) {
                result2.push(value);
                indexes.push(index);
              }
            }
            basePullAt(array3, indexes);
            return result2;
          }
          function reverse(array3) {
            return array3 == null ? array3 : nativeReverse.call(array3);
          }
          function slice(array3, start, end) {
            var length3 = array3 == null ? 0 : array3.length;
            if (!length3) {
              return [];
            }
            if (end && typeof end != "number" && isIterateeCall(array3, start, end)) {
              start = 0;
              end = length3;
            } else {
              start = start == null ? 0 : toInteger2(start);
              end = end === undefined2 ? length3 : toInteger2(end);
            }
            return baseSlice(array3, start, end);
          }
          function sortedIndex(array3, value) {
            return baseSortedIndex(array3, value);
          }
          function sortedIndexBy(array3, value, iteratee2) {
            return baseSortedIndexBy(array3, value, getIteratee(iteratee2, 2));
          }
          function sortedIndexOf(array3, value) {
            var length3 = array3 == null ? 0 : array3.length;
            if (length3) {
              var index = baseSortedIndex(array3, value);
              if (index < length3 && eq(array3[index], value)) {
                return index;
              }
            }
            return -1;
          }
          function sortedLastIndex(array3, value) {
            return baseSortedIndex(array3, value, true);
          }
          function sortedLastIndexBy(array3, value, iteratee2) {
            return baseSortedIndexBy(array3, value, getIteratee(iteratee2, 2), true);
          }
          function sortedLastIndexOf(array3, value) {
            var length3 = array3 == null ? 0 : array3.length;
            if (length3) {
              var index = baseSortedIndex(array3, value, true) - 1;
              if (eq(array3[index], value)) {
                return index;
              }
            }
            return -1;
          }
          function sortedUniq(array3) {
            return array3 && array3.length ? baseSortedUniq(array3) : [];
          }
          function sortedUniqBy(array3, iteratee2) {
            return array3 && array3.length ? baseSortedUniq(array3, getIteratee(iteratee2, 2)) : [];
          }
          function tail(array3) {
            var length3 = array3 == null ? 0 : array3.length;
            return length3 ? baseSlice(array3, 1, length3) : [];
          }
          function take(array3, n2, guard) {
            if (!(array3 && array3.length)) {
              return [];
            }
            n2 = guard || n2 === undefined2 ? 1 : toInteger2(n2);
            return baseSlice(array3, 0, n2 < 0 ? 0 : n2);
          }
          function takeRight(array3, n2, guard) {
            var length3 = array3 == null ? 0 : array3.length;
            if (!length3) {
              return [];
            }
            n2 = guard || n2 === undefined2 ? 1 : toInteger2(n2);
            n2 = length3 - n2;
            return baseSlice(array3, n2 < 0 ? 0 : n2, length3);
          }
          function takeRightWhile(array3, predicate) {
            return array3 && array3.length ? baseWhile(array3, getIteratee(predicate, 3), false, true) : [];
          }
          function takeWhile(array3, predicate) {
            return array3 && array3.length ? baseWhile(array3, getIteratee(predicate, 3)) : [];
          }
          var union = baseRest(function(arrays) {
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
          });
          var unionBy = baseRest(function(arrays) {
            var iteratee2 = last2(arrays);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
          });
          var unionWith = baseRest(function(arrays) {
            var comparator = last2(arrays);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined2, comparator);
          });
          function uniq(array3) {
            return array3 && array3.length ? baseUniq(array3) : [];
          }
          function uniqBy(array3, iteratee2) {
            return array3 && array3.length ? baseUniq(array3, getIteratee(iteratee2, 2)) : [];
          }
          function uniqWith(array3, comparator) {
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return array3 && array3.length ? baseUniq(array3, undefined2, comparator) : [];
          }
          function unzip(array3) {
            if (!(array3 && array3.length)) {
              return [];
            }
            var length3 = 0;
            array3 = arrayFilter(array3, function(group) {
              if (isArrayLikeObject(group)) {
                length3 = nativeMax(group.length, length3);
                return true;
              }
            });
            return baseTimes(length3, function(index) {
              return arrayMap(array3, baseProperty(index));
            });
          }
          function unzipWith(array3, iteratee2) {
            if (!(array3 && array3.length)) {
              return [];
            }
            var result2 = unzip(array3);
            if (iteratee2 == null) {
              return result2;
            }
            return arrayMap(result2, function(group) {
              return apply(iteratee2, undefined2, group);
            });
          }
          var without = baseRest(function(array3, values3) {
            return isArrayLikeObject(array3) ? baseDifference(array3, values3) : [];
          });
          var xor = baseRest(function(arrays) {
            return baseXor(arrayFilter(arrays, isArrayLikeObject));
          });
          var xorBy = baseRest(function(arrays) {
            var iteratee2 = last2(arrays);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
          });
          var xorWith = baseRest(function(arrays) {
            var comparator = last2(arrays);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined2, comparator);
          });
          var zip = baseRest(unzip);
          function zipObject(props, values3) {
            return baseZipObject(props || [], values3 || [], assignValue);
          }
          function zipObjectDeep(props, values3) {
            return baseZipObject(props || [], values3 || [], baseSet);
          }
          var zipWith = baseRest(function(arrays) {
            var length3 = arrays.length, iteratee2 = length3 > 1 ? arrays[length3 - 1] : undefined2;
            iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined2;
            return unzipWith(arrays, iteratee2);
          });
          function chain(value) {
            var result2 = lodash(value);
            result2.__chain__ = true;
            return result2;
          }
          function tap(value, interceptor) {
            interceptor(value);
            return value;
          }
          function thru(value, interceptor) {
            return interceptor(value);
          }
          var wrapperAt = flatRest(function(paths) {
            var length3 = paths.length, start = length3 ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object4) {
              return baseAt(object4, paths);
            };
            if (length3 > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
              return this.thru(interceptor);
            }
            value = value.slice(start, +start + (length3 ? 1 : 0));
            value.__actions__.push({
              "func": thru,
              "args": [interceptor],
              "thisArg": undefined2
            });
            return new LodashWrapper(value, this.__chain__).thru(function(array3) {
              if (length3 && !array3.length) {
                array3.push(undefined2);
              }
              return array3;
            });
          });
          function wrapperChain() {
            return chain(this);
          }
          function wrapperCommit() {
            return new LodashWrapper(this.value(), this.__chain__);
          }
          function wrapperNext() {
            if (this.__values__ === undefined2) {
              this.__values__ = toArray(this.value());
            }
            var done = this.__index__ >= this.__values__.length, value = done ? undefined2 : this.__values__[this.__index__++];
            return { "done": done, "value": value };
          }
          function wrapperToIterator() {
            return this;
          }
          function wrapperPlant(value) {
            var result2, parent2 = this;
            while (parent2 instanceof baseLodash) {
              var clone2 = wrapperClone(parent2);
              clone2.__index__ = 0;
              clone2.__values__ = undefined2;
              if (result2) {
                previous.__wrapped__ = clone2;
              } else {
                result2 = clone2;
              }
              var previous = clone2;
              parent2 = parent2.__wrapped__;
            }
            previous.__wrapped__ = value;
            return result2;
          }
          function wrapperReverse() {
            var value = this.__wrapped__;
            if (value instanceof LazyWrapper) {
              var wrapped = value;
              if (this.__actions__.length) {
                wrapped = new LazyWrapper(this);
              }
              wrapped = wrapped.reverse();
              wrapped.__actions__.push({
                "func": thru,
                "args": [reverse],
                "thisArg": undefined2
              });
              return new LodashWrapper(wrapped, this.__chain__);
            }
            return this.thru(reverse);
          }
          function wrapperValue() {
            return baseWrapperValue(this.__wrapped__, this.__actions__);
          }
          var countBy = createAggregator(function(result2, value, key) {
            if (hasOwnProperty2.call(result2, key)) {
              ++result2[key];
            } else {
              baseAssignValue(result2, key, 1);
            }
          });
          function every2(collection2, predicate, guard) {
            var func = isArray4(collection2) ? arrayEvery : baseEvery;
            if (guard && isIterateeCall(collection2, predicate, guard)) {
              predicate = undefined2;
            }
            return func(collection2, getIteratee(predicate, 3));
          }
          function filter(collection2, predicate) {
            var func = isArray4(collection2) ? arrayFilter : baseFilter;
            return func(collection2, getIteratee(predicate, 3));
          }
          var find2 = createFind(findIndex);
          var findLast = createFind(findLastIndex);
          function flatMap(collection2, iteratee2) {
            return baseFlatten(map10(collection2, iteratee2), 1);
          }
          function flatMapDeep(collection2, iteratee2) {
            return baseFlatten(map10(collection2, iteratee2), INFINITY);
          }
          function flatMapDepth(collection2, iteratee2, depth) {
            depth = depth === undefined2 ? 1 : toInteger2(depth);
            return baseFlatten(map10(collection2, iteratee2), depth);
          }
          function forEach(collection2, iteratee2) {
            var func = isArray4(collection2) ? arrayEach : baseEach;
            return func(collection2, getIteratee(iteratee2, 3));
          }
          function forEachRight(collection2, iteratee2) {
            var func = isArray4(collection2) ? arrayEachRight : baseEachRight;
            return func(collection2, getIteratee(iteratee2, 3));
          }
          var groupBy = createAggregator(function(result2, value, key) {
            if (hasOwnProperty2.call(result2, key)) {
              result2[key].push(value);
            } else {
              baseAssignValue(result2, key, [value]);
            }
          });
          function includes(collection2, value, fromIndex, guard) {
            collection2 = isArrayLike(collection2) ? collection2 : values2(collection2);
            fromIndex = fromIndex && !guard ? toInteger2(fromIndex) : 0;
            var length3 = collection2.length;
            if (fromIndex < 0) {
              fromIndex = nativeMax(length3 + fromIndex, 0);
            }
            return isString(collection2) ? fromIndex <= length3 && collection2.indexOf(value, fromIndex) > -1 : !!length3 && baseIndexOf(collection2, value, fromIndex) > -1;
          }
          var invokeMap = baseRest(function(collection2, path2, args2) {
            var index = -1, isFunc = typeof path2 == "function", result2 = isArrayLike(collection2) ? Array2(collection2.length) : [];
            baseEach(collection2, function(value) {
              result2[++index] = isFunc ? apply(path2, value, args2) : baseInvoke(value, path2, args2);
            });
            return result2;
          });
          var keyBy = createAggregator(function(result2, value, key) {
            baseAssignValue(result2, key, value);
          });
          function map10(collection2, iteratee2) {
            var func = isArray4(collection2) ? arrayMap : baseMap;
            return func(collection2, getIteratee(iteratee2, 3));
          }
          function orderBy(collection2, iteratees, orders, guard) {
            if (collection2 == null) {
              return [];
            }
            if (!isArray4(iteratees)) {
              iteratees = iteratees == null ? [] : [iteratees];
            }
            orders = guard ? undefined2 : orders;
            if (!isArray4(orders)) {
              orders = orders == null ? [] : [orders];
            }
            return baseOrderBy(collection2, iteratees, orders);
          }
          var partition = createAggregator(function(result2, value, key) {
            result2[key ? 0 : 1].push(value);
          }, function() {
            return [[], []];
          });
          function reduce(collection2, iteratee2, accumulator) {
            var func = isArray4(collection2) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
            return func(collection2, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
          }
          function reduceRight(collection2, iteratee2, accumulator) {
            var func = isArray4(collection2) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
            return func(collection2, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
          }
          function reject(collection2, predicate) {
            var func = isArray4(collection2) ? arrayFilter : baseFilter;
            return func(collection2, negate(getIteratee(predicate, 3)));
          }
          function sample(collection2) {
            var func = isArray4(collection2) ? arraySample : baseSample;
            return func(collection2);
          }
          function sampleSize(collection2, n2, guard) {
            if (guard ? isIterateeCall(collection2, n2, guard) : n2 === undefined2) {
              n2 = 1;
            } else {
              n2 = toInteger2(n2);
            }
            var func = isArray4(collection2) ? arraySampleSize : baseSampleSize;
            return func(collection2, n2);
          }
          function shuffle(collection2) {
            var func = isArray4(collection2) ? arrayShuffle : baseShuffle;
            return func(collection2);
          }
          function size(collection2) {
            if (collection2 == null) {
              return 0;
            }
            if (isArrayLike(collection2)) {
              return isString(collection2) ? stringSize(collection2) : collection2.length;
            }
            var tag = getTag(collection2);
            if (tag == mapTag || tag == setTag) {
              return collection2.size;
            }
            return baseKeys(collection2).length;
          }
          function some(collection2, predicate, guard) {
            var func = isArray4(collection2) ? arraySome : baseSome;
            if (guard && isIterateeCall(collection2, predicate, guard)) {
              predicate = undefined2;
            }
            return func(collection2, getIteratee(predicate, 3));
          }
          var sortBy = baseRest(function(collection2, iteratees) {
            if (collection2 == null) {
              return [];
            }
            var length3 = iteratees.length;
            if (length3 > 1 && isIterateeCall(collection2, iteratees[0], iteratees[1])) {
              iteratees = [];
            } else if (length3 > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
              iteratees = [iteratees[0]];
            }
            return baseOrderBy(collection2, baseFlatten(iteratees, 1), []);
          });
          var now = ctxNow || function() {
            return root.Date.now();
          };
          function after(n2, func) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            n2 = toInteger2(n2);
            return function() {
              if (--n2 < 1) {
                return func.apply(this, arguments);
              }
            };
          }
          function ary(func, n2, guard) {
            n2 = guard ? undefined2 : n2;
            n2 = func && n2 == null ? func.length : n2;
            return createWrap(func, WRAP_ARY_FLAG, undefined2, undefined2, undefined2, undefined2, n2);
          }
          function before(n2, func) {
            var result2;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            n2 = toInteger2(n2);
            return function() {
              if (--n2 > 0) {
                result2 = func.apply(this, arguments);
              }
              if (n2 <= 1) {
                func = undefined2;
              }
              return result2;
            };
          }
          var bind = baseRest(function(func, thisArg, partials) {
            var bitmask = WRAP_BIND_FLAG;
            if (partials.length) {
              var holders = replaceHolders(partials, getHolder(bind));
              bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(func, bitmask, thisArg, partials, holders);
          });
          var bindKey = baseRest(function(object4, key, partials) {
            var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
            if (partials.length) {
              var holders = replaceHolders(partials, getHolder(bindKey));
              bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(key, bitmask, object4, partials, holders);
          });
          function curry(func, arity, guard) {
            arity = guard ? undefined2 : arity;
            var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
            result2.placeholder = curry.placeholder;
            return result2;
          }
          function curryRight(func, arity, guard) {
            arity = guard ? undefined2 : arity;
            var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
            result2.placeholder = curryRight.placeholder;
            return result2;
          }
          function debounce(func, wait, options) {
            var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            wait = toNumber(wait) || 0;
            if (isObject2(options)) {
              leading = !!options.leading;
              maxing = "maxWait" in options;
              maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
              trailing = "trailing" in options ? !!options.trailing : trailing;
            }
            function invokeFunc(time4) {
              var args2 = lastArgs, thisArg = lastThis;
              lastArgs = lastThis = undefined2;
              lastInvokeTime = time4;
              result2 = func.apply(thisArg, args2);
              return result2;
            }
            function leadingEdge(time4) {
              lastInvokeTime = time4;
              timerId = setTimeout2(timerExpired, wait);
              return leading ? invokeFunc(time4) : result2;
            }
            function remainingWait(time4) {
              var timeSinceLastCall = time4 - lastCallTime, timeSinceLastInvoke = time4 - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
              return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
            }
            function shouldInvoke(time4) {
              var timeSinceLastCall = time4 - lastCallTime, timeSinceLastInvoke = time4 - lastInvokeTime;
              return lastCallTime === undefined2 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
            }
            function timerExpired() {
              var time4 = now();
              if (shouldInvoke(time4)) {
                return trailingEdge(time4);
              }
              timerId = setTimeout2(timerExpired, remainingWait(time4));
            }
            function trailingEdge(time4) {
              timerId = undefined2;
              if (trailing && lastArgs) {
                return invokeFunc(time4);
              }
              lastArgs = lastThis = undefined2;
              return result2;
            }
            function cancel() {
              if (timerId !== undefined2) {
                clearTimeout2(timerId);
              }
              lastInvokeTime = 0;
              lastArgs = lastCallTime = lastThis = timerId = undefined2;
            }
            function flush() {
              return timerId === undefined2 ? result2 : trailingEdge(now());
            }
            function debounced() {
              var time4 = now(), isInvoking = shouldInvoke(time4);
              lastArgs = arguments;
              lastThis = this;
              lastCallTime = time4;
              if (isInvoking) {
                if (timerId === undefined2) {
                  return leadingEdge(lastCallTime);
                }
                if (maxing) {
                  clearTimeout2(timerId);
                  timerId = setTimeout2(timerExpired, wait);
                  return invokeFunc(lastCallTime);
                }
              }
              if (timerId === undefined2) {
                timerId = setTimeout2(timerExpired, wait);
              }
              return result2;
            }
            debounced.cancel = cancel;
            debounced.flush = flush;
            return debounced;
          }
          var defer = baseRest(function(func, args2) {
            return baseDelay(func, 1, args2);
          });
          var delay = baseRest(function(func, wait, args2) {
            return baseDelay(func, toNumber(wait) || 0, args2);
          });
          function flip(func) {
            return createWrap(func, WRAP_FLIP_FLAG);
          }
          function memoize(func, resolver) {
            if (typeof func != "function" || resolver != null && typeof resolver != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            var memoized = function() {
              var args2 = arguments, key = resolver ? resolver.apply(this, args2) : args2[0], cache = memoized.cache;
              if (cache.has(key)) {
                return cache.get(key);
              }
              var result2 = func.apply(this, args2);
              memoized.cache = cache.set(key, result2) || cache;
              return result2;
            };
            memoized.cache = new (memoize.Cache || MapCache)();
            return memoized;
          }
          memoize.Cache = MapCache;
          function negate(predicate) {
            if (typeof predicate != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return function() {
              var args2 = arguments;
              switch (args2.length) {
                case 0:
                  return !predicate.call(this);
                case 1:
                  return !predicate.call(this, args2[0]);
                case 2:
                  return !predicate.call(this, args2[0], args2[1]);
                case 3:
                  return !predicate.call(this, args2[0], args2[1], args2[2]);
              }
              return !predicate.apply(this, args2);
            };
          }
          function once(func) {
            return before(2, func);
          }
          var overArgs = castRest(function(func, transforms) {
            transforms = transforms.length == 1 && isArray4(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
            var funcsLength = transforms.length;
            return baseRest(function(args2) {
              var index = -1, length3 = nativeMin(args2.length, funcsLength);
              while (++index < length3) {
                args2[index] = transforms[index].call(this, args2[index]);
              }
              return apply(func, this, args2);
            });
          });
          var partial = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partial));
            return createWrap(func, WRAP_PARTIAL_FLAG, undefined2, partials, holders);
          });
          var partialRight = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partialRight));
            return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined2, partials, holders);
          });
          var rearg = flatRest(function(func, indexes) {
            return createWrap(func, WRAP_REARG_FLAG, undefined2, undefined2, undefined2, indexes);
          });
          function rest(func, start) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            start = start === undefined2 ? start : toInteger2(start);
            return baseRest(func, start);
          }
          function spread(func, start) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            start = start == null ? 0 : nativeMax(toInteger2(start), 0);
            return baseRest(function(args2) {
              var array3 = args2[start], otherArgs = castSlice(args2, 0, start);
              if (array3) {
                arrayPush(otherArgs, array3);
              }
              return apply(func, this, otherArgs);
            });
          }
          function throttle(func, wait, options) {
            var leading = true, trailing = true;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            if (isObject2(options)) {
              leading = "leading" in options ? !!options.leading : leading;
              trailing = "trailing" in options ? !!options.trailing : trailing;
            }
            return debounce(func, wait, {
              "leading": leading,
              "maxWait": wait,
              "trailing": trailing
            });
          }
          function unary(func) {
            return ary(func, 1);
          }
          function wrap(value, wrapper) {
            return partial(castFunction(wrapper), value);
          }
          function castArray() {
            if (!arguments.length) {
              return [];
            }
            var value = arguments[0];
            return isArray4(value) ? value : [value];
          }
          function clone(value) {
            return baseClone(value, CLONE_SYMBOLS_FLAG);
          }
          function cloneWith(value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
          }
          function cloneDeep(value) {
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
          }
          function cloneDeepWith(value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
          }
          function conformsTo(object4, source) {
            return source == null || baseConformsTo(object4, source, keys5(source));
          }
          function eq(value, other) {
            return value === other || value !== value && other !== other;
          }
          var gt2 = createRelationalOperation(baseGt);
          var gte = createRelationalOperation(function(value, other) {
            return value >= other;
          });
          var isArguments = baseIsArguments(function() {
            return arguments;
          }()) ? baseIsArguments : function(value) {
            return isObjectLike(value) && hasOwnProperty2.call(value, "callee") && !propertyIsEnumerable3.call(value, "callee");
          };
          var isArray4 = Array2.isArray;
          var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
          function isArrayLike(value) {
            return value != null && isLength(value.length) && !isFunction(value);
          }
          function isArrayLikeObject(value) {
            return isObjectLike(value) && isArrayLike(value);
          }
          function isBoolean(value) {
            return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
          }
          var isBuffer = nativeIsBuffer || stubFalse;
          var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
          function isElement(value) {
            return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
          }
          function isEmpty(value) {
            if (value == null) {
              return true;
            }
            if (isArrayLike(value) && (isArray4(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
              return !value.length;
            }
            var tag = getTag(value);
            if (tag == mapTag || tag == setTag) {
              return !value.size;
            }
            if (isPrototype(value)) {
              return !baseKeys(value).length;
            }
            for (var key in value) {
              if (hasOwnProperty2.call(value, key)) {
                return false;
              }
            }
            return true;
          }
          function isEqual(value, other) {
            return baseIsEqual(value, other);
          }
          function isEqualWith(value, other, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            var result2 = customizer ? customizer(value, other) : undefined2;
            return result2 === undefined2 ? baseIsEqual(value, other, undefined2, customizer) : !!result2;
          }
          function isError(value) {
            if (!isObjectLike(value)) {
              return false;
            }
            var tag = baseGetTag(value);
            return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject(value);
          }
          function isFinite2(value) {
            return typeof value == "number" && nativeIsFinite(value);
          }
          function isFunction(value) {
            if (!isObject2(value)) {
              return false;
            }
            var tag = baseGetTag(value);
            return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
          }
          function isInteger2(value) {
            return typeof value == "number" && value == toInteger2(value);
          }
          function isLength(value) {
            return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER2;
          }
          function isObject2(value) {
            var type = typeof value;
            return value != null && (type == "object" || type == "function");
          }
          function isObjectLike(value) {
            return value != null && typeof value == "object";
          }
          var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
          function isMatch(object4, source) {
            return object4 === source || baseIsMatch(object4, source, getMatchData(source));
          }
          function isMatchWith(object4, source, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseIsMatch(object4, source, getMatchData(source), customizer);
          }
          function isNaN4(value) {
            return isNumber(value) && value != +value;
          }
          function isNative(value) {
            if (isMaskable(value)) {
              throw new Error2(CORE_ERROR_TEXT);
            }
            return baseIsNative(value);
          }
          function isNull(value) {
            return value === null;
          }
          function isNil(value) {
            return value == null;
          }
          function isNumber(value) {
            return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
          }
          function isPlainObject(value) {
            if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
              return false;
            }
            var proto = getPrototype(value);
            if (proto === null) {
              return true;
            }
            var Ctor = hasOwnProperty2.call(proto, "constructor") && proto.constructor;
            return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
          }
          var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
          function isSafeInteger(value) {
            return isInteger2(value) && value >= -MAX_SAFE_INTEGER2 && value <= MAX_SAFE_INTEGER2;
          }
          var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
          function isString(value) {
            return typeof value == "string" || !isArray4(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
          }
          function isSymbol(value) {
            return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
          }
          var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
          function isUndefined(value) {
            return value === undefined2;
          }
          function isWeakMap(value) {
            return isObjectLike(value) && getTag(value) == weakMapTag;
          }
          function isWeakSet(value) {
            return isObjectLike(value) && baseGetTag(value) == weakSetTag;
          }
          var lt2 = createRelationalOperation(baseLt);
          var lte = createRelationalOperation(function(value, other) {
            return value <= other;
          });
          function toArray(value) {
            if (!value) {
              return [];
            }
            if (isArrayLike(value)) {
              return isString(value) ? stringToArray(value) : copyArray(value);
            }
            if (symIterator && value[symIterator]) {
              return iteratorToArray(value[symIterator]());
            }
            var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values2;
            return func(value);
          }
          function toFinite(value) {
            if (!value) {
              return value === 0 ? value : 0;
            }
            value = toNumber(value);
            if (value === INFINITY || value === -INFINITY) {
              var sign = value < 0 ? -1 : 1;
              return sign * MAX_INTEGER;
            }
            return value === value ? value : 0;
          }
          function toInteger2(value) {
            var result2 = toFinite(value), remainder = result2 % 1;
            return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
          }
          function toLength2(value) {
            return value ? baseClamp(toInteger2(value), 0, MAX_ARRAY_LENGTH) : 0;
          }
          function toNumber(value) {
            if (typeof value == "number") {
              return value;
            }
            if (isSymbol(value)) {
              return NAN;
            }
            if (isObject2(value)) {
              var other = typeof value.valueOf == "function" ? value.valueOf() : value;
              value = isObject2(other) ? other + "" : other;
            }
            if (typeof value != "string") {
              return value === 0 ? value : +value;
            }
            value = baseTrim(value);
            var isBinary = reIsBinary.test(value);
            return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
          }
          function toPlainObject(value) {
            return copyObject(value, keysIn(value));
          }
          function toSafeInteger(value) {
            return value ? baseClamp(toInteger2(value), -MAX_SAFE_INTEGER2, MAX_SAFE_INTEGER2) : value === 0 ? value : 0;
          }
          function toString3(value) {
            return value == null ? "" : baseToString(value);
          }
          var assign2 = createAssigner(function(object4, source) {
            if (isPrototype(source) || isArrayLike(source)) {
              copyObject(source, keys5(source), object4);
              return;
            }
            for (var key in source) {
              if (hasOwnProperty2.call(source, key)) {
                assignValue(object4, key, source[key]);
              }
            }
          });
          var assignIn = createAssigner(function(object4, source) {
            copyObject(source, keysIn(source), object4);
          });
          var assignInWith = createAssigner(function(object4, source, srcIndex, customizer) {
            copyObject(source, keysIn(source), object4, customizer);
          });
          var assignWith = createAssigner(function(object4, source, srcIndex, customizer) {
            copyObject(source, keys5(source), object4, customizer);
          });
          var at2 = flatRest(baseAt);
          function create8(prototype, properties) {
            var result2 = baseCreate(prototype);
            return properties == null ? result2 : baseAssign(result2, properties);
          }
          var defaults = baseRest(function(object4, sources) {
            object4 = Object2(object4);
            var index = -1;
            var length3 = sources.length;
            var guard = length3 > 2 ? sources[2] : undefined2;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              length3 = 1;
            }
            while (++index < length3) {
              var source = sources[index];
              var props = keysIn(source);
              var propsIndex = -1;
              var propsLength = props.length;
              while (++propsIndex < propsLength) {
                var key = props[propsIndex];
                var value = object4[key];
                if (value === undefined2 || eq(value, objectProto[key]) && !hasOwnProperty2.call(object4, key)) {
                  object4[key] = source[key];
                }
              }
            }
            return object4;
          });
          var defaultsDeep = baseRest(function(args2) {
            args2.push(undefined2, customDefaultsMerge);
            return apply(mergeWith, undefined2, args2);
          });
          function findKey(object4, predicate) {
            return baseFindKey(object4, getIteratee(predicate, 3), baseForOwn);
          }
          function findLastKey(object4, predicate) {
            return baseFindKey(object4, getIteratee(predicate, 3), baseForOwnRight);
          }
          function forIn(object4, iteratee2) {
            return object4 == null ? object4 : baseFor(object4, getIteratee(iteratee2, 3), keysIn);
          }
          function forInRight(object4, iteratee2) {
            return object4 == null ? object4 : baseForRight(object4, getIteratee(iteratee2, 3), keysIn);
          }
          function forOwn(object4, iteratee2) {
            return object4 && baseForOwn(object4, getIteratee(iteratee2, 3));
          }
          function forOwnRight(object4, iteratee2) {
            return object4 && baseForOwnRight(object4, getIteratee(iteratee2, 3));
          }
          function functions(object4) {
            return object4 == null ? [] : baseFunctions(object4, keys5(object4));
          }
          function functionsIn(object4) {
            return object4 == null ? [] : baseFunctions(object4, keysIn(object4));
          }
          function get2(object4, path2, defaultValue) {
            var result2 = object4 == null ? undefined2 : baseGet(object4, path2);
            return result2 === undefined2 ? defaultValue : result2;
          }
          function has2(object4, path2) {
            return object4 != null && hasPath(object4, path2, baseHas);
          }
          function hasIn(object4, path2) {
            return object4 != null && hasPath(object4, path2, baseHasIn);
          }
          var invert = createInverter(function(result2, value, key) {
            if (value != null && typeof value.toString != "function") {
              value = nativeObjectToString.call(value);
            }
            result2[value] = key;
          }, constant(identity));
          var invertBy = createInverter(function(result2, value, key) {
            if (value != null && typeof value.toString != "function") {
              value = nativeObjectToString.call(value);
            }
            if (hasOwnProperty2.call(result2, value)) {
              result2[value].push(key);
            } else {
              result2[value] = [key];
            }
          }, getIteratee);
          var invoke = baseRest(baseInvoke);
          function keys5(object4) {
            return isArrayLike(object4) ? arrayLikeKeys(object4) : baseKeys(object4);
          }
          function keysIn(object4) {
            return isArrayLike(object4) ? arrayLikeKeys(object4, true) : baseKeysIn(object4);
          }
          function mapKeys(object4, iteratee2) {
            var result2 = {};
            iteratee2 = getIteratee(iteratee2, 3);
            baseForOwn(object4, function(value, key, object5) {
              baseAssignValue(result2, iteratee2(value, key, object5), value);
            });
            return result2;
          }
          function mapValues(object4, iteratee2) {
            var result2 = {};
            iteratee2 = getIteratee(iteratee2, 3);
            baseForOwn(object4, function(value, key, object5) {
              baseAssignValue(result2, key, iteratee2(value, key, object5));
            });
            return result2;
          }
          var merge = createAssigner(function(object4, source, srcIndex) {
            baseMerge(object4, source, srcIndex);
          });
          var mergeWith = createAssigner(function(object4, source, srcIndex, customizer) {
            baseMerge(object4, source, srcIndex, customizer);
          });
          var omit = flatRest(function(object4, paths) {
            var result2 = {};
            if (object4 == null) {
              return result2;
            }
            var isDeep = false;
            paths = arrayMap(paths, function(path2) {
              path2 = castPath(path2, object4);
              isDeep || (isDeep = path2.length > 1);
              return path2;
            });
            copyObject(object4, getAllKeysIn(object4), result2);
            if (isDeep) {
              result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
            }
            var length3 = paths.length;
            while (length3--) {
              baseUnset(result2, paths[length3]);
            }
            return result2;
          });
          function omitBy(object4, predicate) {
            return pickBy(object4, negate(getIteratee(predicate)));
          }
          var pick = flatRest(function(object4, paths) {
            return object4 == null ? {} : basePick(object4, paths);
          });
          function pickBy(object4, predicate) {
            if (object4 == null) {
              return {};
            }
            var props = arrayMap(getAllKeysIn(object4), function(prop) {
              return [prop];
            });
            predicate = getIteratee(predicate);
            return basePickBy(object4, props, function(value, path2) {
              return predicate(value, path2[0]);
            });
          }
          function result(object4, path2, defaultValue) {
            path2 = castPath(path2, object4);
            var index = -1, length3 = path2.length;
            if (!length3) {
              length3 = 1;
              object4 = undefined2;
            }
            while (++index < length3) {
              var value = object4 == null ? undefined2 : object4[toKey(path2[index])];
              if (value === undefined2) {
                index = length3;
                value = defaultValue;
              }
              object4 = isFunction(value) ? value.call(object4) : value;
            }
            return object4;
          }
          function set4(object4, path2, value) {
            return object4 == null ? object4 : baseSet(object4, path2, value);
          }
          function setWith(object4, path2, value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return object4 == null ? object4 : baseSet(object4, path2, value, customizer);
          }
          var toPairs = createToPairs(keys5);
          var toPairsIn = createToPairs(keysIn);
          function transform(object4, iteratee2, accumulator) {
            var isArr = isArray4(object4), isArrLike = isArr || isBuffer(object4) || isTypedArray(object4);
            iteratee2 = getIteratee(iteratee2, 4);
            if (accumulator == null) {
              var Ctor = object4 && object4.constructor;
              if (isArrLike) {
                accumulator = isArr ? new Ctor() : [];
              } else if (isObject2(object4)) {
                accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object4)) : {};
              } else {
                accumulator = {};
              }
            }
            (isArrLike ? arrayEach : baseForOwn)(object4, function(value, index, object5) {
              return iteratee2(accumulator, value, index, object5);
            });
            return accumulator;
          }
          function unset(object4, path2) {
            return object4 == null ? true : baseUnset(object4, path2);
          }
          function update(object4, path2, updater) {
            return object4 == null ? object4 : baseUpdate(object4, path2, castFunction(updater));
          }
          function updateWith(object4, path2, updater, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return object4 == null ? object4 : baseUpdate(object4, path2, castFunction(updater), customizer);
          }
          function values2(object4) {
            return object4 == null ? [] : baseValues(object4, keys5(object4));
          }
          function valuesIn(object4) {
            return object4 == null ? [] : baseValues(object4, keysIn(object4));
          }
          function clamp(number3, lower, upper) {
            if (upper === undefined2) {
              upper = lower;
              lower = undefined2;
            }
            if (upper !== undefined2) {
              upper = toNumber(upper);
              upper = upper === upper ? upper : 0;
            }
            if (lower !== undefined2) {
              lower = toNumber(lower);
              lower = lower === lower ? lower : 0;
            }
            return baseClamp(toNumber(number3), lower, upper);
          }
          function inRange(number3, start, end) {
            start = toFinite(start);
            if (end === undefined2) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }
            number3 = toNumber(number3);
            return baseInRange(number3, start, end);
          }
          function random3(lower, upper, floating) {
            if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
              upper = floating = undefined2;
            }
            if (floating === undefined2) {
              if (typeof upper == "boolean") {
                floating = upper;
                upper = undefined2;
              } else if (typeof lower == "boolean") {
                floating = lower;
                lower = undefined2;
              }
            }
            if (lower === undefined2 && upper === undefined2) {
              lower = 0;
              upper = 1;
            } else {
              lower = toFinite(lower);
              if (upper === undefined2) {
                upper = lower;
                lower = 0;
              } else {
                upper = toFinite(upper);
              }
            }
            if (lower > upper) {
              var temp = lower;
              lower = upper;
              upper = temp;
            }
            if (floating || lower % 1 || upper % 1) {
              var rand = nativeRandom();
              return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
            }
            return baseRandom(lower, upper);
          }
          var camelCase = createCompounder(function(result2, word, index) {
            word = word.toLowerCase();
            return result2 + (index ? capitalize(word) : word);
          });
          function capitalize(string5) {
            return upperFirst(toString3(string5).toLowerCase());
          }
          function deburr(string5) {
            string5 = toString3(string5);
            return string5 && string5.replace(reLatin, deburrLetter).replace(reComboMark, "");
          }
          function endsWith(string5, target, position) {
            string5 = toString3(string5);
            target = baseToString(target);
            var length3 = string5.length;
            position = position === undefined2 ? length3 : baseClamp(toInteger2(position), 0, length3);
            var end = position;
            position -= target.length;
            return position >= 0 && string5.slice(position, end) == target;
          }
          function escape2(string5) {
            string5 = toString3(string5);
            return string5 && reHasUnescapedHtml.test(string5) ? string5.replace(reUnescapedHtml, escapeHtmlChar) : string5;
          }
          function escapeRegExp(string5) {
            string5 = toString3(string5);
            return string5 && reHasRegExpChar.test(string5) ? string5.replace(reRegExpChar, "\\$&") : string5;
          }
          var kebabCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? "-" : "") + word.toLowerCase();
          });
          var lowerCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? " " : "") + word.toLowerCase();
          });
          var lowerFirst = createCaseFirst("toLowerCase");
          function pad(string5, length3, chars) {
            string5 = toString3(string5);
            length3 = toInteger2(length3);
            var strLength = length3 ? stringSize(string5) : 0;
            if (!length3 || strLength >= length3) {
              return string5;
            }
            var mid = (length3 - strLength) / 2;
            return createPadding(nativeFloor(mid), chars) + string5 + createPadding(nativeCeil(mid), chars);
          }
          function padEnd(string5, length3, chars) {
            string5 = toString3(string5);
            length3 = toInteger2(length3);
            var strLength = length3 ? stringSize(string5) : 0;
            return length3 && strLength < length3 ? string5 + createPadding(length3 - strLength, chars) : string5;
          }
          function padStart(string5, length3, chars) {
            string5 = toString3(string5);
            length3 = toInteger2(length3);
            var strLength = length3 ? stringSize(string5) : 0;
            return length3 && strLength < length3 ? createPadding(length3 - strLength, chars) + string5 : string5;
          }
          function parseInt3(string5, radix, guard) {
            if (guard || radix == null) {
              radix = 0;
            } else if (radix) {
              radix = +radix;
            }
            return nativeParseInt(toString3(string5).replace(reTrimStart, ""), radix || 0);
          }
          function repeat(string5, n2, guard) {
            if (guard ? isIterateeCall(string5, n2, guard) : n2 === undefined2) {
              n2 = 1;
            } else {
              n2 = toInteger2(n2);
            }
            return baseRepeat(toString3(string5), n2);
          }
          function replace() {
            var args2 = arguments, string5 = toString3(args2[0]);
            return args2.length < 3 ? string5 : string5.replace(args2[1], args2[2]);
          }
          var snakeCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? "_" : "") + word.toLowerCase();
          });
          function split2(string5, separator, limit) {
            if (limit && typeof limit != "number" && isIterateeCall(string5, separator, limit)) {
              separator = limit = undefined2;
            }
            limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
            if (!limit) {
              return [];
            }
            string5 = toString3(string5);
            if (string5 && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
              separator = baseToString(separator);
              if (!separator && hasUnicode(string5)) {
                return castSlice(stringToArray(string5), 0, limit);
              }
            }
            return string5.split(separator, limit);
          }
          var startCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? " " : "") + upperFirst(word);
          });
          function startsWith(string5, target, position) {
            string5 = toString3(string5);
            position = position == null ? 0 : baseClamp(toInteger2(position), 0, string5.length);
            target = baseToString(target);
            return string5.slice(position, position + target.length) == target;
          }
          function template(string5, options, guard) {
            var settings = lodash.templateSettings;
            if (guard && isIterateeCall(string5, options, guard)) {
              options = undefined2;
            }
            string5 = toString3(string5);
            options = assignInWith({}, options, settings, customDefaultsAssignIn);
            var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys5(imports), importsValues = baseValues(imports, importsKeys);
            var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
            var reDelimiters = RegExp2((options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$", "g");
            var sourceURL = "//# sourceURL=" + (hasOwnProperty2.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
            string5.replace(reDelimiters, function(match2, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
              interpolateValue || (interpolateValue = esTemplateValue);
              source += string5.slice(index, offset).replace(reUnescapedString, escapeStringChar);
              if (escapeValue) {
                isEscaping = true;
                source += "' +\n__e(" + escapeValue + ") +\n'";
              }
              if (evaluateValue) {
                isEvaluating = true;
                source += "';\n" + evaluateValue + ";\n__p += '";
              }
              if (interpolateValue) {
                source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
              }
              index = offset + match2.length;
              return match2;
            });
            source += "';\n";
            var variable = hasOwnProperty2.call(options, "variable") && options.variable;
            if (!variable) {
              source = "with (obj) {\n" + source + "\n}\n";
            } else if (reForbiddenIdentifierChars.test(variable)) {
              throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
            }
            source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
            source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
            var result2 = attempt(function() {
              return Function2(importsKeys, sourceURL + "return " + source).apply(undefined2, importsValues);
            });
            result2.source = source;
            if (isError(result2)) {
              throw result2;
            }
            return result2;
          }
          function toLower(value) {
            return toString3(value).toLowerCase();
          }
          function toUpper(value) {
            return toString3(value).toUpperCase();
          }
          function trim(string5, chars, guard) {
            string5 = toString3(string5);
            if (string5 && (guard || chars === undefined2)) {
              return baseTrim(string5);
            }
            if (!string5 || !(chars = baseToString(chars))) {
              return string5;
            }
            var strSymbols = stringToArray(string5), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
            return castSlice(strSymbols, start, end).join("");
          }
          function trimEnd(string5, chars, guard) {
            string5 = toString3(string5);
            if (string5 && (guard || chars === undefined2)) {
              return string5.slice(0, trimmedEndIndex(string5) + 1);
            }
            if (!string5 || !(chars = baseToString(chars))) {
              return string5;
            }
            var strSymbols = stringToArray(string5), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
            return castSlice(strSymbols, 0, end).join("");
          }
          function trimStart(string5, chars, guard) {
            string5 = toString3(string5);
            if (string5 && (guard || chars === undefined2)) {
              return string5.replace(reTrimStart, "");
            }
            if (!string5 || !(chars = baseToString(chars))) {
              return string5;
            }
            var strSymbols = stringToArray(string5), start = charsStartIndex(strSymbols, stringToArray(chars));
            return castSlice(strSymbols, start).join("");
          }
          function truncate(string5, options) {
            var length3 = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
            if (isObject2(options)) {
              var separator = "separator" in options ? options.separator : separator;
              length3 = "length" in options ? toInteger2(options.length) : length3;
              omission = "omission" in options ? baseToString(options.omission) : omission;
            }
            string5 = toString3(string5);
            var strLength = string5.length;
            if (hasUnicode(string5)) {
              var strSymbols = stringToArray(string5);
              strLength = strSymbols.length;
            }
            if (length3 >= strLength) {
              return string5;
            }
            var end = length3 - stringSize(omission);
            if (end < 1) {
              return omission;
            }
            var result2 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string5.slice(0, end);
            if (separator === undefined2) {
              return result2 + omission;
            }
            if (strSymbols) {
              end += result2.length - end;
            }
            if (isRegExp(separator)) {
              if (string5.slice(end).search(separator)) {
                var match2, substring = result2;
                if (!separator.global) {
                  separator = RegExp2(separator.source, toString3(reFlags.exec(separator)) + "g");
                }
                separator.lastIndex = 0;
                while (match2 = separator.exec(substring)) {
                  var newEnd = match2.index;
                }
                result2 = result2.slice(0, newEnd === undefined2 ? end : newEnd);
              }
            } else if (string5.indexOf(baseToString(separator), end) != end) {
              var index = result2.lastIndexOf(separator);
              if (index > -1) {
                result2 = result2.slice(0, index);
              }
            }
            return result2 + omission;
          }
          function unescape2(string5) {
            string5 = toString3(string5);
            return string5 && reHasEscapedHtml.test(string5) ? string5.replace(reEscapedHtml, unescapeHtmlChar) : string5;
          }
          var upperCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? " " : "") + word.toUpperCase();
          });
          var upperFirst = createCaseFirst("toUpperCase");
          function words(string5, pattern, guard) {
            string5 = toString3(string5);
            pattern = guard ? undefined2 : pattern;
            if (pattern === undefined2) {
              return hasUnicodeWord(string5) ? unicodeWords(string5) : asciiWords(string5);
            }
            return string5.match(pattern) || [];
          }
          var attempt = baseRest(function(func, args2) {
            try {
              return apply(func, undefined2, args2);
            } catch (e4) {
              return isError(e4) ? e4 : new Error2(e4);
            }
          });
          var bindAll = flatRest(function(object4, methodNames) {
            arrayEach(methodNames, function(key) {
              key = toKey(key);
              baseAssignValue(object4, key, bind(object4[key], object4));
            });
            return object4;
          });
          function cond(pairs) {
            var length3 = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
            pairs = !length3 ? [] : arrayMap(pairs, function(pair2) {
              if (typeof pair2[1] != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              return [toIteratee(pair2[0]), pair2[1]];
            });
            return baseRest(function(args2) {
              var index = -1;
              while (++index < length3) {
                var pair2 = pairs[index];
                if (apply(pair2[0], this, args2)) {
                  return apply(pair2[1], this, args2);
                }
              }
            });
          }
          function conforms(source) {
            return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
          }
          function constant(value) {
            return function() {
              return value;
            };
          }
          function defaultTo(value, defaultValue) {
            return value == null || value !== value ? defaultValue : value;
          }
          var flow = createFlow();
          var flowRight = createFlow(true);
          function identity(value) {
            return value;
          }
          function iteratee(func) {
            return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
          }
          function matches(source) {
            return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
          }
          function matchesProperty(path2, srcValue) {
            return baseMatchesProperty(path2, baseClone(srcValue, CLONE_DEEP_FLAG));
          }
          var method = baseRest(function(path2, args2) {
            return function(object4) {
              return baseInvoke(object4, path2, args2);
            };
          });
          var methodOf = baseRest(function(object4, args2) {
            return function(path2) {
              return baseInvoke(object4, path2, args2);
            };
          });
          function mixin(object4, source, options) {
            var props = keys5(source), methodNames = baseFunctions(source, props);
            if (options == null && !(isObject2(source) && (methodNames.length || !props.length))) {
              options = source;
              source = object4;
              object4 = this;
              methodNames = baseFunctions(source, keys5(source));
            }
            var chain2 = !(isObject2(options) && "chain" in options) || !!options.chain, isFunc = isFunction(object4);
            arrayEach(methodNames, function(methodName) {
              var func = source[methodName];
              object4[methodName] = func;
              if (isFunc) {
                object4.prototype[methodName] = function() {
                  var chainAll = this.__chain__;
                  if (chain2 || chainAll) {
                    var result2 = object4(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                    actions.push({ "func": func, "args": arguments, "thisArg": object4 });
                    result2.__chain__ = chainAll;
                    return result2;
                  }
                  return func.apply(object4, arrayPush([this.value()], arguments));
                };
              }
            });
            return object4;
          }
          function noConflict() {
            if (root._ === this) {
              root._ = oldDash;
            }
            return this;
          }
          function noop() {
          }
          function nthArg(n2) {
            n2 = toInteger2(n2);
            return baseRest(function(args2) {
              return baseNth(args2, n2);
            });
          }
          var over = createOver(arrayMap);
          var overEvery = createOver(arrayEvery);
          var overSome = createOver(arraySome);
          function property(path2) {
            return isKey(path2) ? baseProperty(toKey(path2)) : basePropertyDeep(path2);
          }
          function propertyOf(object4) {
            return function(path2) {
              return object4 == null ? undefined2 : baseGet(object4, path2);
            };
          }
          var range = createRange();
          var rangeRight = createRange(true);
          function stubArray() {
            return [];
          }
          function stubFalse() {
            return false;
          }
          function stubObject() {
            return {};
          }
          function stubString() {
            return "";
          }
          function stubTrue() {
            return true;
          }
          function times(n2, iteratee2) {
            n2 = toInteger2(n2);
            if (n2 < 1 || n2 > MAX_SAFE_INTEGER2) {
              return [];
            }
            var index = MAX_ARRAY_LENGTH, length3 = nativeMin(n2, MAX_ARRAY_LENGTH);
            iteratee2 = getIteratee(iteratee2);
            n2 -= MAX_ARRAY_LENGTH;
            var result2 = baseTimes(length3, iteratee2);
            while (++index < n2) {
              iteratee2(index);
            }
            return result2;
          }
          function toPath(value) {
            if (isArray4(value)) {
              return arrayMap(value, toKey);
            }
            return isSymbol(value) ? [value] : copyArray(stringToPath(toString3(value)));
          }
          function uniqueId(prefix) {
            var id2 = ++idCounter;
            return toString3(prefix) + id2;
          }
          var add = createMathOperation(function(augend, addend) {
            return augend + addend;
          }, 0);
          var ceil2 = createRound("ceil");
          var divide = createMathOperation(function(dividend, divisor) {
            return dividend / divisor;
          }, 1);
          var floor3 = createRound("floor");
          function max3(array3) {
            return array3 && array3.length ? baseExtremum(array3, identity, baseGt) : undefined2;
          }
          function maxBy(array3, iteratee2) {
            return array3 && array3.length ? baseExtremum(array3, getIteratee(iteratee2, 2), baseGt) : undefined2;
          }
          function mean(array3) {
            return baseMean(array3, identity);
          }
          function meanBy(array3, iteratee2) {
            return baseMean(array3, getIteratee(iteratee2, 2));
          }
          function min3(array3) {
            return array3 && array3.length ? baseExtremum(array3, identity, baseLt) : undefined2;
          }
          function minBy(array3, iteratee2) {
            return array3 && array3.length ? baseExtremum(array3, getIteratee(iteratee2, 2), baseLt) : undefined2;
          }
          var multiply = createMathOperation(function(multiplier, multiplicand) {
            return multiplier * multiplicand;
          }, 1);
          var round = createRound("round");
          var subtract = createMathOperation(function(minuend, subtrahend) {
            return minuend - subtrahend;
          }, 0);
          function sum(array3) {
            return array3 && array3.length ? baseSum(array3, identity) : 0;
          }
          function sumBy(array3, iteratee2) {
            return array3 && array3.length ? baseSum(array3, getIteratee(iteratee2, 2)) : 0;
          }
          lodash.after = after;
          lodash.ary = ary;
          lodash.assign = assign2;
          lodash.assignIn = assignIn;
          lodash.assignInWith = assignInWith;
          lodash.assignWith = assignWith;
          lodash.at = at2;
          lodash.before = before;
          lodash.bind = bind;
          lodash.bindAll = bindAll;
          lodash.bindKey = bindKey;
          lodash.castArray = castArray;
          lodash.chain = chain;
          lodash.chunk = chunk;
          lodash.compact = compact;
          lodash.concat = concat;
          lodash.cond = cond;
          lodash.conforms = conforms;
          lodash.constant = constant;
          lodash.countBy = countBy;
          lodash.create = create8;
          lodash.curry = curry;
          lodash.curryRight = curryRight;
          lodash.debounce = debounce;
          lodash.defaults = defaults;
          lodash.defaultsDeep = defaultsDeep;
          lodash.defer = defer;
          lodash.delay = delay;
          lodash.difference = difference;
          lodash.differenceBy = differenceBy;
          lodash.differenceWith = differenceWith;
          lodash.drop = drop;
          lodash.dropRight = dropRight;
          lodash.dropRightWhile = dropRightWhile;
          lodash.dropWhile = dropWhile;
          lodash.fill = fill;
          lodash.filter = filter;
          lodash.flatMap = flatMap;
          lodash.flatMapDeep = flatMapDeep;
          lodash.flatMapDepth = flatMapDepth;
          lodash.flatten = flatten;
          lodash.flattenDeep = flattenDeep;
          lodash.flattenDepth = flattenDepth;
          lodash.flip = flip;
          lodash.flow = flow;
          lodash.flowRight = flowRight;
          lodash.fromPairs = fromPairs;
          lodash.functions = functions;
          lodash.functionsIn = functionsIn;
          lodash.groupBy = groupBy;
          lodash.initial = initial;
          lodash.intersection = intersection;
          lodash.intersectionBy = intersectionBy;
          lodash.intersectionWith = intersectionWith;
          lodash.invert = invert;
          lodash.invertBy = invertBy;
          lodash.invokeMap = invokeMap;
          lodash.iteratee = iteratee;
          lodash.keyBy = keyBy;
          lodash.keys = keys5;
          lodash.keysIn = keysIn;
          lodash.map = map10;
          lodash.mapKeys = mapKeys;
          lodash.mapValues = mapValues;
          lodash.matches = matches;
          lodash.matchesProperty = matchesProperty;
          lodash.memoize = memoize;
          lodash.merge = merge;
          lodash.mergeWith = mergeWith;
          lodash.method = method;
          lodash.methodOf = methodOf;
          lodash.mixin = mixin;
          lodash.negate = negate;
          lodash.nthArg = nthArg;
          lodash.omit = omit;
          lodash.omitBy = omitBy;
          lodash.once = once;
          lodash.orderBy = orderBy;
          lodash.over = over;
          lodash.overArgs = overArgs;
          lodash.overEvery = overEvery;
          lodash.overSome = overSome;
          lodash.partial = partial;
          lodash.partialRight = partialRight;
          lodash.partition = partition;
          lodash.pick = pick;
          lodash.pickBy = pickBy;
          lodash.property = property;
          lodash.propertyOf = propertyOf;
          lodash.pull = pull;
          lodash.pullAll = pullAll;
          lodash.pullAllBy = pullAllBy;
          lodash.pullAllWith = pullAllWith;
          lodash.pullAt = pullAt;
          lodash.range = range;
          lodash.rangeRight = rangeRight;
          lodash.rearg = rearg;
          lodash.reject = reject;
          lodash.remove = remove;
          lodash.rest = rest;
          lodash.reverse = reverse;
          lodash.sampleSize = sampleSize;
          lodash.set = set4;
          lodash.setWith = setWith;
          lodash.shuffle = shuffle;
          lodash.slice = slice;
          lodash.sortBy = sortBy;
          lodash.sortedUniq = sortedUniq;
          lodash.sortedUniqBy = sortedUniqBy;
          lodash.split = split2;
          lodash.spread = spread;
          lodash.tail = tail;
          lodash.take = take;
          lodash.takeRight = takeRight;
          lodash.takeRightWhile = takeRightWhile;
          lodash.takeWhile = takeWhile;
          lodash.tap = tap;
          lodash.throttle = throttle;
          lodash.thru = thru;
          lodash.toArray = toArray;
          lodash.toPairs = toPairs;
          lodash.toPairsIn = toPairsIn;
          lodash.toPath = toPath;
          lodash.toPlainObject = toPlainObject;
          lodash.transform = transform;
          lodash.unary = unary;
          lodash.union = union;
          lodash.unionBy = unionBy;
          lodash.unionWith = unionWith;
          lodash.uniq = uniq;
          lodash.uniqBy = uniqBy;
          lodash.uniqWith = uniqWith;
          lodash.unset = unset;
          lodash.unzip = unzip;
          lodash.unzipWith = unzipWith;
          lodash.update = update;
          lodash.updateWith = updateWith;
          lodash.values = values2;
          lodash.valuesIn = valuesIn;
          lodash.without = without;
          lodash.words = words;
          lodash.wrap = wrap;
          lodash.xor = xor;
          lodash.xorBy = xorBy;
          lodash.xorWith = xorWith;
          lodash.zip = zip;
          lodash.zipObject = zipObject;
          lodash.zipObjectDeep = zipObjectDeep;
          lodash.zipWith = zipWith;
          lodash.entries = toPairs;
          lodash.entriesIn = toPairsIn;
          lodash.extend = assignIn;
          lodash.extendWith = assignInWith;
          mixin(lodash, lodash);
          lodash.add = add;
          lodash.attempt = attempt;
          lodash.camelCase = camelCase;
          lodash.capitalize = capitalize;
          lodash.ceil = ceil2;
          lodash.clamp = clamp;
          lodash.clone = clone;
          lodash.cloneDeep = cloneDeep;
          lodash.cloneDeepWith = cloneDeepWith;
          lodash.cloneWith = cloneWith;
          lodash.conformsTo = conformsTo;
          lodash.deburr = deburr;
          lodash.defaultTo = defaultTo;
          lodash.divide = divide;
          lodash.endsWith = endsWith;
          lodash.eq = eq;
          lodash.escape = escape2;
          lodash.escapeRegExp = escapeRegExp;
          lodash.every = every2;
          lodash.find = find2;
          lodash.findIndex = findIndex;
          lodash.findKey = findKey;
          lodash.findLast = findLast;
          lodash.findLastIndex = findLastIndex;
          lodash.findLastKey = findLastKey;
          lodash.floor = floor3;
          lodash.forEach = forEach;
          lodash.forEachRight = forEachRight;
          lodash.forIn = forIn;
          lodash.forInRight = forInRight;
          lodash.forOwn = forOwn;
          lodash.forOwnRight = forOwnRight;
          lodash.get = get2;
          lodash.gt = gt2;
          lodash.gte = gte;
          lodash.has = has2;
          lodash.hasIn = hasIn;
          lodash.head = head;
          lodash.identity = identity;
          lodash.includes = includes;
          lodash.indexOf = indexOf2;
          lodash.inRange = inRange;
          lodash.invoke = invoke;
          lodash.isArguments = isArguments;
          lodash.isArray = isArray4;
          lodash.isArrayBuffer = isArrayBuffer;
          lodash.isArrayLike = isArrayLike;
          lodash.isArrayLikeObject = isArrayLikeObject;
          lodash.isBoolean = isBoolean;
          lodash.isBuffer = isBuffer;
          lodash.isDate = isDate;
          lodash.isElement = isElement;
          lodash.isEmpty = isEmpty;
          lodash.isEqual = isEqual;
          lodash.isEqualWith = isEqualWith;
          lodash.isError = isError;
          lodash.isFinite = isFinite2;
          lodash.isFunction = isFunction;
          lodash.isInteger = isInteger2;
          lodash.isLength = isLength;
          lodash.isMap = isMap;
          lodash.isMatch = isMatch;
          lodash.isMatchWith = isMatchWith;
          lodash.isNaN = isNaN4;
          lodash.isNative = isNative;
          lodash.isNil = isNil;
          lodash.isNull = isNull;
          lodash.isNumber = isNumber;
          lodash.isObject = isObject2;
          lodash.isObjectLike = isObjectLike;
          lodash.isPlainObject = isPlainObject;
          lodash.isRegExp = isRegExp;
          lodash.isSafeInteger = isSafeInteger;
          lodash.isSet = isSet;
          lodash.isString = isString;
          lodash.isSymbol = isSymbol;
          lodash.isTypedArray = isTypedArray;
          lodash.isUndefined = isUndefined;
          lodash.isWeakMap = isWeakMap;
          lodash.isWeakSet = isWeakSet;
          lodash.join = join;
          lodash.kebabCase = kebabCase;
          lodash.last = last2;
          lodash.lastIndexOf = lastIndexOf;
          lodash.lowerCase = lowerCase;
          lodash.lowerFirst = lowerFirst;
          lodash.lt = lt2;
          lodash.lte = lte;
          lodash.max = max3;
          lodash.maxBy = maxBy;
          lodash.mean = mean;
          lodash.meanBy = meanBy;
          lodash.min = min3;
          lodash.minBy = minBy;
          lodash.stubArray = stubArray;
          lodash.stubFalse = stubFalse;
          lodash.stubObject = stubObject;
          lodash.stubString = stubString;
          lodash.stubTrue = stubTrue;
          lodash.multiply = multiply;
          lodash.nth = nth;
          lodash.noConflict = noConflict;
          lodash.noop = noop;
          lodash.now = now;
          lodash.pad = pad;
          lodash.padEnd = padEnd;
          lodash.padStart = padStart;
          lodash.parseInt = parseInt3;
          lodash.random = random3;
          lodash.reduce = reduce;
          lodash.reduceRight = reduceRight;
          lodash.repeat = repeat;
          lodash.replace = replace;
          lodash.result = result;
          lodash.round = round;
          lodash.runInContext = runInContext2;
          lodash.sample = sample;
          lodash.size = size;
          lodash.snakeCase = snakeCase;
          lodash.some = some;
          lodash.sortedIndex = sortedIndex;
          lodash.sortedIndexBy = sortedIndexBy;
          lodash.sortedIndexOf = sortedIndexOf;
          lodash.sortedLastIndex = sortedLastIndex;
          lodash.sortedLastIndexBy = sortedLastIndexBy;
          lodash.sortedLastIndexOf = sortedLastIndexOf;
          lodash.startCase = startCase;
          lodash.startsWith = startsWith;
          lodash.subtract = subtract;
          lodash.sum = sum;
          lodash.sumBy = sumBy;
          lodash.template = template;
          lodash.times = times;
          lodash.toFinite = toFinite;
          lodash.toInteger = toInteger2;
          lodash.toLength = toLength2;
          lodash.toLower = toLower;
          lodash.toNumber = toNumber;
          lodash.toSafeInteger = toSafeInteger;
          lodash.toString = toString3;
          lodash.toUpper = toUpper;
          lodash.trim = trim;
          lodash.trimEnd = trimEnd;
          lodash.trimStart = trimStart;
          lodash.truncate = truncate;
          lodash.unescape = unescape2;
          lodash.uniqueId = uniqueId;
          lodash.upperCase = upperCase;
          lodash.upperFirst = upperFirst;
          lodash.each = forEach;
          lodash.eachRight = forEachRight;
          lodash.first = head;
          mixin(lodash, function() {
            var source = {};
            baseForOwn(lodash, function(func, methodName) {
              if (!hasOwnProperty2.call(lodash.prototype, methodName)) {
                source[methodName] = func;
              }
            });
            return source;
          }(), { "chain": false });
          lodash.VERSION = VERSION;
          arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
            lodash[methodName].placeholder = lodash;
          });
          arrayEach(["drop", "take"], function(methodName, index) {
            LazyWrapper.prototype[methodName] = function(n2) {
              n2 = n2 === undefined2 ? 1 : nativeMax(toInteger2(n2), 0);
              var result2 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
              if (result2.__filtered__) {
                result2.__takeCount__ = nativeMin(n2, result2.__takeCount__);
              } else {
                result2.__views__.push({
                  "size": nativeMin(n2, MAX_ARRAY_LENGTH),
                  "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
                });
              }
              return result2;
            };
            LazyWrapper.prototype[methodName + "Right"] = function(n2) {
              return this.reverse()[methodName](n2).reverse();
            };
          });
          arrayEach(["filter", "map", "takeWhile"], function(methodName, index) {
            var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
            LazyWrapper.prototype[methodName] = function(iteratee2) {
              var result2 = this.clone();
              result2.__iteratees__.push({
                "iteratee": getIteratee(iteratee2, 3),
                "type": type
              });
              result2.__filtered__ = result2.__filtered__ || isFilter;
              return result2;
            };
          });
          arrayEach(["head", "last"], function(methodName, index) {
            var takeName = "take" + (index ? "Right" : "");
            LazyWrapper.prototype[methodName] = function() {
              return this[takeName](1).value()[0];
            };
          });
          arrayEach(["initial", "tail"], function(methodName, index) {
            var dropName = "drop" + (index ? "" : "Right");
            LazyWrapper.prototype[methodName] = function() {
              return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
            };
          });
          LazyWrapper.prototype.compact = function() {
            return this.filter(identity);
          };
          LazyWrapper.prototype.find = function(predicate) {
            return this.filter(predicate).head();
          };
          LazyWrapper.prototype.findLast = function(predicate) {
            return this.reverse().find(predicate);
          };
          LazyWrapper.prototype.invokeMap = baseRest(function(path2, args2) {
            if (typeof path2 == "function") {
              return new LazyWrapper(this);
            }
            return this.map(function(value) {
              return baseInvoke(value, path2, args2);
            });
          });
          LazyWrapper.prototype.reject = function(predicate) {
            return this.filter(negate(getIteratee(predicate)));
          };
          LazyWrapper.prototype.slice = function(start, end) {
            start = toInteger2(start);
            var result2 = this;
            if (result2.__filtered__ && (start > 0 || end < 0)) {
              return new LazyWrapper(result2);
            }
            if (start < 0) {
              result2 = result2.takeRight(-start);
            } else if (start) {
              result2 = result2.drop(start);
            }
            if (end !== undefined2) {
              end = toInteger2(end);
              result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start);
            }
            return result2;
          };
          LazyWrapper.prototype.takeRightWhile = function(predicate) {
            return this.reverse().takeWhile(predicate).reverse();
          };
          LazyWrapper.prototype.toArray = function() {
            return this.take(MAX_ARRAY_LENGTH);
          };
          baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
            if (!lodashFunc) {
              return;
            }
            lodash.prototype[methodName] = function() {
              var value = this.__wrapped__, args2 = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args2[0], useLazy = isLazy || isArray4(value);
              var interceptor = function(value2) {
                var result3 = lodashFunc.apply(lodash, arrayPush([value2], args2));
                return isTaker && chainAll ? result3[0] : result3;
              };
              if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
                isLazy = useLazy = false;
              }
              var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
              if (!retUnwrapped && useLazy) {
                value = onlyLazy ? value : new LazyWrapper(this);
                var result2 = func.apply(value, args2);
                result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined2 });
                return new LodashWrapper(result2, chainAll);
              }
              if (isUnwrapped && onlyLazy) {
                return func.apply(this, args2);
              }
              result2 = this.thru(interceptor);
              return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
            };
          });
          arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
            var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
            lodash.prototype[methodName] = function() {
              var args2 = arguments;
              if (retUnwrapped && !this.__chain__) {
                var value = this.value();
                return func.apply(isArray4(value) ? value : [], args2);
              }
              return this[chainName](function(value2) {
                return func.apply(isArray4(value2) ? value2 : [], args2);
              });
            };
          });
          baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var lodashFunc = lodash[methodName];
            if (lodashFunc) {
              var key = lodashFunc.name + "";
              if (!hasOwnProperty2.call(realNames, key)) {
                realNames[key] = [];
              }
              realNames[key].push({ "name": methodName, "func": lodashFunc });
            }
          });
          realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [{
            "name": "wrapper",
            "func": undefined2
          }];
          LazyWrapper.prototype.clone = lazyClone;
          LazyWrapper.prototype.reverse = lazyReverse;
          LazyWrapper.prototype.value = lazyValue;
          lodash.prototype.at = wrapperAt;
          lodash.prototype.chain = wrapperChain;
          lodash.prototype.commit = wrapperCommit;
          lodash.prototype.next = wrapperNext;
          lodash.prototype.plant = wrapperPlant;
          lodash.prototype.reverse = wrapperReverse;
          lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
          lodash.prototype.first = lodash.prototype.head;
          if (symIterator) {
            lodash.prototype[symIterator] = wrapperToIterator;
          }
          return lodash;
        };
        var _2 = runInContext();
        if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
          root._ = _2;
          define(function() {
            return _2;
          });
        } else if (freeModule) {
          (freeModule.exports = _2)._ = _2;
          freeExports._ = _2;
        } else {
          root._ = _2;
        }
      }).call(exports);
    }
  });

  // node_modules/immer/dist/immer.cjs.development.js
  var require_immer_cjs_development = __commonJS({
    "node_modules/immer/dist/immer.cjs.development.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var _ref;
      var hasSymbol = typeof Symbol !== "undefined" && typeof /* @__PURE__ */ Symbol("x") === "symbol";
      var hasMap = typeof Map !== "undefined";
      var hasSet = typeof Set !== "undefined";
      var hasProxies = typeof Proxy !== "undefined" && typeof Proxy.revocable !== "undefined" && typeof Reflect !== "undefined";
      var NOTHING = hasSymbol ? /* @__PURE__ */ Symbol.for("immer-nothing") : (_ref = {}, _ref["immer-nothing"] = true, _ref);
      var DRAFTABLE = hasSymbol ? /* @__PURE__ */ Symbol.for("immer-draftable") : "__$immer_draftable";
      var DRAFT_STATE = hasSymbol ? /* @__PURE__ */ Symbol.for("immer-state") : "__$immer_state";
      var iteratorSymbol = typeof Symbol != "undefined" && Symbol.iterator || "@@iterator";
      var errors = {
        0: "Illegal state",
        1: "Immer drafts cannot have computed properties",
        2: "This object has been frozen and should not be mutated",
        3: function _2(data2) {
          return "Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? " + data2;
        },
        4: "An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.",
        5: "Immer forbids circular references",
        6: "The first or second argument to `produce` must be a function",
        7: "The third argument to `produce` must be a function or undefined",
        8: "First argument to `createDraft` must be a plain object, an array, or an immerable object",
        9: "First argument to `finishDraft` must be a draft returned by `createDraft`",
        10: "The given draft is already finalized",
        11: "Object.defineProperty() cannot be used on an Immer draft",
        12: "Object.setPrototypeOf() cannot be used on an Immer draft",
        13: "Immer only supports deleting array indices",
        14: "Immer only supports setting array indices and the 'length' property",
        15: function _2(path2) {
          return "Cannot apply patch, path doesn't resolve: " + path2;
        },
        16: 'Sets cannot have "replace" patches.',
        17: function _2(op) {
          return "Unsupported patch operation: " + op;
        },
        18: function _2(plugin) {
          return "The plugin for '" + plugin + "' has not been loaded into Immer. To enable the plugin, import and call `enable" + plugin + "()` when initializing your application.";
        },
        20: "Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available",
        21: function _2(thing) {
          return "produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '" + thing + "'";
        },
        22: function _2(thing) {
          return "'current' expects a draft, got: " + thing;
        },
        23: function _2(thing) {
          return "'original' expects a draft, got: " + thing;
        },
        24: "Patching reserved attributes like __proto__, prototype and constructor is not allowed"
      };
      function die(error2) {
        for (var _len = arguments.length, args2 = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args2[_key - 1] = arguments[_key];
        }
        {
          var e4 = errors[error2];
          var msg = !e4 ? "unknown error nr: " + error2 : typeof e4 === "function" ? e4.apply(null, args2) : e4;
          throw new Error("[Immer] " + msg);
        }
      }
      function isDraft(value) {
        return !!value && !!value[DRAFT_STATE];
      }
      function isDraftable(value) {
        if (!value)
          return false;
        return isPlainObject(value) || Array.isArray(value) || !!value[DRAFTABLE] || !!value.constructor[DRAFTABLE] || isMap(value) || isSet(value);
      }
      var objectCtorString = /* @__PURE__ */ Object.prototype.constructor.toString();
      function isPlainObject(value) {
        if (!value || typeof value !== "object")
          return false;
        var proto = Object.getPrototypeOf(value);
        if (proto === null) {
          return true;
        }
        var Ctor = Object.hasOwnProperty.call(proto, "constructor") && proto.constructor;
        if (Ctor === Object)
          return true;
        return typeof Ctor == "function" && Function.toString.call(Ctor) === objectCtorString;
      }
      function original(value) {
        if (!isDraft(value))
          die(23, value);
        return value[DRAFT_STATE].base_;
      }
      var ownKeys3 = typeof Reflect !== "undefined" && Reflect.ownKeys ? Reflect.ownKeys : typeof Object.getOwnPropertySymbols !== "undefined" ? function(obj) {
        return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));
      } : Object.getOwnPropertyNames;
      var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors2(target) {
        var res = {};
        ownKeys3(target).forEach(function(key) {
          res[key] = Object.getOwnPropertyDescriptor(target, key);
        });
        return res;
      };
      function each(obj, iter, enumerableOnly) {
        if (enumerableOnly === void 0) {
          enumerableOnly = false;
        }
        if (getArchtype(obj) === 0) {
          (enumerableOnly ? Object.keys : ownKeys3)(obj).forEach(function(key) {
            if (!enumerableOnly || typeof key !== "symbol")
              iter(key, obj[key], obj);
          });
        } else {
          obj.forEach(function(entry, index) {
            return iter(index, entry, obj);
          });
        }
      }
      function getArchtype(thing) {
        var state2 = thing[DRAFT_STATE];
        return state2 ? state2.type_ > 3 ? state2.type_ - 4 : state2.type_ : Array.isArray(thing) ? 1 : isMap(thing) ? 2 : isSet(thing) ? 3 : 0;
      }
      function has2(thing, prop) {
        return getArchtype(thing) === 2 ? thing.has(prop) : Object.prototype.hasOwnProperty.call(thing, prop);
      }
      function get2(thing, prop) {
        return getArchtype(thing) === 2 ? thing.get(prop) : thing[prop];
      }
      function set4(thing, propOrOldValue, value) {
        var t4 = getArchtype(thing);
        if (t4 === 2)
          thing.set(propOrOldValue, value);
        else if (t4 === 3) {
          thing.delete(propOrOldValue);
          thing.add(value);
        } else
          thing[propOrOldValue] = value;
      }
      function is(x3, y2) {
        if (x3 === y2) {
          return x3 !== 0 || 1 / x3 === 1 / y2;
        } else {
          return x3 !== x3 && y2 !== y2;
        }
      }
      function isMap(target) {
        return hasMap && target instanceof Map;
      }
      function isSet(target) {
        return hasSet && target instanceof Set;
      }
      function latest(state2) {
        return state2.copy_ || state2.base_;
      }
      function shallowCopy(base) {
        if (Array.isArray(base))
          return Array.prototype.slice.call(base);
        var descriptors2 = getOwnPropertyDescriptors(base);
        delete descriptors2[DRAFT_STATE];
        var keys5 = ownKeys3(descriptors2);
        for (var i3 = 0; i3 < keys5.length; i3++) {
          var key = keys5[i3];
          var desc = descriptors2[key];
          if (desc.writable === false) {
            desc.writable = true;
            desc.configurable = true;
          }
          if (desc.get || desc.set)
            descriptors2[key] = {
              configurable: true,
              writable: true,
              enumerable: desc.enumerable,
              value: base[key]
            };
        }
        return Object.create(Object.getPrototypeOf(base), descriptors2);
      }
      function freeze(obj, deep) {
        if (deep === void 0) {
          deep = false;
        }
        if (isFrozen(obj) || isDraft(obj) || !isDraftable(obj))
          return obj;
        if (getArchtype(obj) > 1) {
          obj.set = obj.add = obj.clear = obj.delete = dontMutateFrozenCollections;
        }
        Object.freeze(obj);
        if (deep)
          each(obj, function(key, value) {
            return freeze(value, true);
          }, true);
        return obj;
      }
      function dontMutateFrozenCollections() {
        die(2);
      }
      function isFrozen(obj) {
        if (obj == null || typeof obj !== "object")
          return true;
        return Object.isFrozen(obj);
      }
      var plugins = {};
      function getPlugin(pluginKey) {
        var plugin = plugins[pluginKey];
        if (!plugin) {
          die(18, pluginKey);
        }
        return plugin;
      }
      function loadPlugin(pluginKey, implementation) {
        if (!plugins[pluginKey])
          plugins[pluginKey] = implementation;
      }
      var currentScope;
      function getCurrentScope() {
        if (!currentScope)
          die(0);
        return currentScope;
      }
      function createScope(parent_, immer_) {
        return {
          drafts_: [],
          parent_,
          immer_,
          canAutoFreeze_: true,
          unfinalizedDrafts_: 0
        };
      }
      function usePatchesInScope(scope, patchListener) {
        if (patchListener) {
          getPlugin("Patches");
          scope.patches_ = [];
          scope.inversePatches_ = [];
          scope.patchListener_ = patchListener;
        }
      }
      function revokeScope(scope) {
        leaveScope(scope);
        scope.drafts_.forEach(revokeDraft);
        scope.drafts_ = null;
      }
      function leaveScope(scope) {
        if (scope === currentScope) {
          currentScope = scope.parent_;
        }
      }
      function enterScope(immer2) {
        return currentScope = createScope(currentScope, immer2);
      }
      function revokeDraft(draft) {
        var state2 = draft[DRAFT_STATE];
        if (state2.type_ === 0 || state2.type_ === 1)
          state2.revoke_();
        else
          state2.revoked_ = true;
      }
      function processResult(result, scope) {
        scope.unfinalizedDrafts_ = scope.drafts_.length;
        var baseDraft = scope.drafts_[0];
        var isReplaced = result !== void 0 && result !== baseDraft;
        if (!scope.immer_.useProxies_)
          getPlugin("ES5").willFinalizeES5_(scope, result, isReplaced);
        if (isReplaced) {
          if (baseDraft[DRAFT_STATE].modified_) {
            revokeScope(scope);
            die(4);
          }
          if (isDraftable(result)) {
            result = finalize(scope, result);
            if (!scope.parent_)
              maybeFreeze(scope, result);
          }
          if (scope.patches_) {
            getPlugin("Patches").generateReplacementPatches_(baseDraft[DRAFT_STATE], result, scope.patches_, scope.inversePatches_);
          }
        } else {
          result = finalize(scope, baseDraft, []);
        }
        revokeScope(scope);
        if (scope.patches_) {
          scope.patchListener_(scope.patches_, scope.inversePatches_);
        }
        return result !== NOTHING ? result : void 0;
      }
      function finalize(rootScope, value, path2) {
        if (isFrozen(value))
          return value;
        var state2 = value[DRAFT_STATE];
        if (!state2) {
          each(value, function(key, childValue) {
            return finalizeProperty(rootScope, state2, value, key, childValue, path2);
          }, true);
          return value;
        }
        if (state2.scope_ !== rootScope)
          return value;
        if (!state2.modified_) {
          maybeFreeze(rootScope, state2.base_, true);
          return state2.base_;
        }
        if (!state2.finalized_) {
          state2.finalized_ = true;
          state2.scope_.unfinalizedDrafts_--;
          var result = state2.type_ === 4 || state2.type_ === 5 ? state2.copy_ = shallowCopy(state2.draft_) : state2.copy_;
          each(state2.type_ === 3 ? new Set(result) : result, function(key, childValue) {
            return finalizeProperty(rootScope, state2, result, key, childValue, path2);
          });
          maybeFreeze(rootScope, result, false);
          if (path2 && rootScope.patches_) {
            getPlugin("Patches").generatePatches_(state2, path2, rootScope.patches_, rootScope.inversePatches_);
          }
        }
        return state2.copy_;
      }
      function finalizeProperty(rootScope, parentState, targetObject, prop, childValue, rootPath) {
        if (childValue === targetObject)
          die(5);
        if (isDraft(childValue)) {
          var path2 = rootPath && parentState && parentState.type_ !== 3 && !has2(parentState.assigned_, prop) ? rootPath.concat(prop) : void 0;
          var res = finalize(rootScope, childValue, path2);
          set4(targetObject, prop, res);
          if (isDraft(res)) {
            rootScope.canAutoFreeze_ = false;
          } else
            return;
        }
        if (isDraftable(childValue) && !isFrozen(childValue)) {
          if (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {
            return;
          }
          finalize(rootScope, childValue);
          if (!parentState || !parentState.scope_.parent_)
            maybeFreeze(rootScope, childValue);
        }
      }
      function maybeFreeze(scope, value, deep) {
        if (deep === void 0) {
          deep = false;
        }
        if (scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {
          freeze(value, deep);
        }
      }
      function createProxyProxy(base, parent) {
        var isArray4 = Array.isArray(base);
        var state2 = {
          type_: isArray4 ? 1 : 0,
          scope_: parent ? parent.scope_ : getCurrentScope(),
          modified_: false,
          finalized_: false,
          assigned_: {},
          parent_: parent,
          base_: base,
          draft_: null,
          copy_: null,
          revoke_: null,
          isManual_: false
        };
        var target = state2;
        var traps = objectTraps;
        if (isArray4) {
          target = [state2];
          traps = arrayTraps;
        }
        var _Proxy$revocable = Proxy.revocable(target, traps), revoke = _Proxy$revocable.revoke, proxy = _Proxy$revocable.proxy;
        state2.draft_ = proxy;
        state2.revoke_ = revoke;
        return proxy;
      }
      var objectTraps = {
        get: function get3(state2, prop) {
          if (prop === DRAFT_STATE)
            return state2;
          var source = latest(state2);
          if (!has2(source, prop)) {
            return readPropFromProto(state2, source, prop);
          }
          var value = source[prop];
          if (state2.finalized_ || !isDraftable(value)) {
            return value;
          }
          if (value === peek(state2.base_, prop)) {
            prepareCopy(state2);
            return state2.copy_[prop] = createProxy(state2.scope_.immer_, value, state2);
          }
          return value;
        },
        has: function has3(state2, prop) {
          return prop in latest(state2);
        },
        ownKeys: function ownKeys4(state2) {
          return Reflect.ownKeys(latest(state2));
        },
        set: function set5(state2, prop, value) {
          var desc = getDescriptorFromProto(latest(state2), prop);
          if (desc === null || desc === void 0 ? void 0 : desc.set) {
            desc.set.call(state2.draft_, value);
            return true;
          }
          if (!state2.modified_) {
            var current3 = peek(latest(state2), prop);
            var currentState = current3 === null || current3 === void 0 ? void 0 : current3[DRAFT_STATE];
            if (currentState && currentState.base_ === value) {
              state2.copy_[prop] = value;
              state2.assigned_[prop] = false;
              return true;
            }
            if (is(value, current3) && (value !== void 0 || has2(state2.base_, prop)))
              return true;
            prepareCopy(state2);
            markChanged(state2);
          }
          if (state2.copy_[prop] === value && typeof value !== "number" && (value !== void 0 || prop in state2.copy_))
            return true;
          state2.copy_[prop] = value;
          state2.assigned_[prop] = true;
          return true;
        },
        deleteProperty: function deleteProperty(state2, prop) {
          if (peek(state2.base_, prop) !== void 0 || prop in state2.base_) {
            state2.assigned_[prop] = false;
            prepareCopy(state2);
            markChanged(state2);
          } else {
            delete state2.assigned_[prop];
          }
          if (state2.copy_)
            delete state2.copy_[prop];
          return true;
        },
        getOwnPropertyDescriptor: function getOwnPropertyDescriptor3(state2, prop) {
          var owner = latest(state2);
          var desc = Reflect.getOwnPropertyDescriptor(owner, prop);
          if (!desc)
            return desc;
          return {
            writable: true,
            configurable: state2.type_ !== 1 || prop !== "length",
            enumerable: desc.enumerable,
            value: owner[prop]
          };
        },
        defineProperty: function defineProperty3() {
          die(11);
        },
        getPrototypeOf: function getPrototypeOf(state2) {
          return Object.getPrototypeOf(state2.base_);
        },
        setPrototypeOf: function setPrototypeOf() {
          die(12);
        }
      };
      var arrayTraps = {};
      each(objectTraps, function(key, fn2) {
        arrayTraps[key] = function() {
          arguments[0] = arguments[0][0];
          return fn2.apply(this, arguments);
        };
      });
      arrayTraps.deleteProperty = function(state2, prop) {
        if (isNaN(parseInt(prop)))
          die(13);
        return objectTraps.deleteProperty.call(this, state2[0], prop);
      };
      arrayTraps.set = function(state2, prop, value) {
        if (prop !== "length" && isNaN(parseInt(prop)))
          die(14);
        return objectTraps.set.call(this, state2[0], prop, value, state2[0]);
      };
      function peek(draft, prop) {
        var state2 = draft[DRAFT_STATE];
        var source = state2 ? latest(state2) : draft;
        return source[prop];
      }
      function readPropFromProto(state2, source, prop) {
        var _desc$get;
        var desc = getDescriptorFromProto(source, prop);
        return desc ? "value" in desc ? desc.value : (_desc$get = desc.get) === null || _desc$get === void 0 ? void 0 : _desc$get.call(state2.draft_) : void 0;
      }
      function getDescriptorFromProto(source, prop) {
        if (!(prop in source))
          return void 0;
        var proto = Object.getPrototypeOf(source);
        while (proto) {
          var desc = Object.getOwnPropertyDescriptor(proto, prop);
          if (desc)
            return desc;
          proto = Object.getPrototypeOf(proto);
        }
        return void 0;
      }
      function markChanged(state2) {
        if (!state2.modified_) {
          state2.modified_ = true;
          if (state2.parent_) {
            markChanged(state2.parent_);
          }
        }
      }
      function prepareCopy(state2) {
        if (!state2.copy_) {
          state2.copy_ = shallowCopy(state2.base_);
        }
      }
      var Immer = /* @__PURE__ */ function() {
        function Immer2(config) {
          var _this = this;
          this.useProxies_ = hasProxies;
          this.autoFreeze_ = true;
          this.produce = function(base, recipe, patchListener) {
            if (typeof base === "function" && typeof recipe !== "function") {
              var defaultBase = recipe;
              recipe = base;
              var self2 = _this;
              return function curriedProduce(base2) {
                var _this2 = this;
                if (base2 === void 0) {
                  base2 = defaultBase;
                }
                for (var _len = arguments.length, args2 = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args2[_key - 1] = arguments[_key];
                }
                return self2.produce(base2, function(draft) {
                  var _recipe;
                  return (_recipe = recipe).call.apply(_recipe, [_this2, draft].concat(args2));
                });
              };
            }
            if (typeof recipe !== "function")
              die(6);
            if (patchListener !== void 0 && typeof patchListener !== "function")
              die(7);
            var result;
            if (isDraftable(base)) {
              var scope = enterScope(_this);
              var proxy = createProxy(_this, base, void 0);
              var hasError = true;
              try {
                result = recipe(proxy);
                hasError = false;
              } finally {
                if (hasError)
                  revokeScope(scope);
                else
                  leaveScope(scope);
              }
              if (typeof Promise !== "undefined" && result instanceof Promise) {
                return result.then(function(result2) {
                  usePatchesInScope(scope, patchListener);
                  return processResult(result2, scope);
                }, function(error2) {
                  revokeScope(scope);
                  throw error2;
                });
              }
              usePatchesInScope(scope, patchListener);
              return processResult(result, scope);
            } else if (!base || typeof base !== "object") {
              result = recipe(base);
              if (result === NOTHING)
                return void 0;
              if (result === void 0)
                result = base;
              if (_this.autoFreeze_)
                freeze(result, true);
              return result;
            } else
              die(21, base);
          };
          this.produceWithPatches = function(arg1, arg2, arg3) {
            if (typeof arg1 === "function") {
              return function(state2) {
                for (var _len2 = arguments.length, args2 = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args2[_key2 - 1] = arguments[_key2];
                }
                return _this.produceWithPatches(state2, function(draft) {
                  return arg1.apply(void 0, [draft].concat(args2));
                });
              };
            }
            var patches, inversePatches;
            var nextState = _this.produce(arg1, arg2, function(p3, ip) {
              patches = p3;
              inversePatches = ip;
            });
            return [nextState, patches, inversePatches];
          };
          if (typeof (config === null || config === void 0 ? void 0 : config.useProxies) === "boolean")
            this.setUseProxies(config.useProxies);
          if (typeof (config === null || config === void 0 ? void 0 : config.autoFreeze) === "boolean")
            this.setAutoFreeze(config.autoFreeze);
        }
        var _proto = Immer2.prototype;
        _proto.createDraft = function createDraft2(base) {
          if (!isDraftable(base))
            die(8);
          if (isDraft(base))
            base = current2(base);
          var scope = enterScope(this);
          var proxy = createProxy(this, base, void 0);
          proxy[DRAFT_STATE].isManual_ = true;
          leaveScope(scope);
          return proxy;
        };
        _proto.finishDraft = function finishDraft2(draft, patchListener) {
          var state2 = draft && draft[DRAFT_STATE];
          {
            if (!state2 || !state2.isManual_)
              die(9);
            if (state2.finalized_)
              die(10);
          }
          var scope = state2.scope_;
          usePatchesInScope(scope, patchListener);
          return processResult(void 0, scope);
        };
        _proto.setAutoFreeze = function setAutoFreeze2(value) {
          this.autoFreeze_ = value;
        };
        _proto.setUseProxies = function setUseProxies2(value) {
          if (value && !hasProxies) {
            die(20);
          }
          this.useProxies_ = value;
        };
        _proto.applyPatches = function applyPatches2(base, patches) {
          var i3;
          for (i3 = patches.length - 1; i3 >= 0; i3--) {
            var patch = patches[i3];
            if (patch.path.length === 0 && patch.op === "replace") {
              base = patch.value;
              break;
            }
          }
          var applyPatchesImpl = getPlugin("Patches").applyPatches_;
          if (isDraft(base)) {
            return applyPatchesImpl(base, patches);
          }
          return this.produce(base, function(draft) {
            return applyPatchesImpl(draft, patches.slice(i3 + 1));
          });
        };
        return Immer2;
      }();
      function createProxy(immer2, value, parent) {
        var draft = isMap(value) ? getPlugin("MapSet").proxyMap_(value, parent) : isSet(value) ? getPlugin("MapSet").proxySet_(value, parent) : immer2.useProxies_ ? createProxyProxy(value, parent) : getPlugin("ES5").createES5Proxy_(value, parent);
        var scope = parent ? parent.scope_ : getCurrentScope();
        scope.drafts_.push(draft);
        return draft;
      }
      function current2(value) {
        if (!isDraft(value))
          die(22, value);
        return currentImpl(value);
      }
      function currentImpl(value) {
        if (!isDraftable(value))
          return value;
        var state2 = value[DRAFT_STATE];
        var copy2;
        var archType = getArchtype(value);
        if (state2) {
          if (!state2.modified_ && (state2.type_ < 4 || !getPlugin("ES5").hasChanges_(state2)))
            return state2.base_;
          state2.finalized_ = true;
          copy2 = copyHelper(value, archType);
          state2.finalized_ = false;
        } else {
          copy2 = copyHelper(value, archType);
        }
        each(copy2, function(key, childValue) {
          if (state2 && get2(state2.base_, key) === childValue)
            return;
          set4(copy2, key, currentImpl(childValue));
        });
        return archType === 3 ? new Set(copy2) : copy2;
      }
      function copyHelper(value, archType) {
        switch (archType) {
          case 2:
            return new Map(value);
          case 3:
            return Array.from(value);
        }
        return shallowCopy(value);
      }
      function enableES5() {
        function willFinalizeES5_(scope, result, isReplaced) {
          if (!isReplaced) {
            if (scope.patches_) {
              markChangesRecursively(scope.drafts_[0]);
            }
            markChangesSweep(scope.drafts_);
          } else if (isDraft(result) && result[DRAFT_STATE].scope_ === scope) {
            markChangesSweep(scope.drafts_);
          }
        }
        function createES5Draft(isArray4, base) {
          if (isArray4) {
            var draft = new Array(base.length);
            for (var i3 = 0; i3 < base.length; i3++) {
              Object.defineProperty(draft, "" + i3, proxyProperty(i3, true));
            }
            return draft;
          } else {
            var _descriptors = getOwnPropertyDescriptors(base);
            delete _descriptors[DRAFT_STATE];
            var keys5 = ownKeys3(_descriptors);
            for (var _i = 0; _i < keys5.length; _i++) {
              var key = keys5[_i];
              _descriptors[key] = proxyProperty(key, isArray4 || !!_descriptors[key].enumerable);
            }
            return Object.create(Object.getPrototypeOf(base), _descriptors);
          }
        }
        function createES5Proxy_(base, parent) {
          var isArray4 = Array.isArray(base);
          var draft = createES5Draft(isArray4, base);
          var state2 = {
            type_: isArray4 ? 5 : 4,
            scope_: parent ? parent.scope_ : getCurrentScope(),
            modified_: false,
            finalized_: false,
            assigned_: {},
            parent_: parent,
            base_: base,
            draft_: draft,
            copy_: null,
            revoked_: false,
            isManual_: false
          };
          Object.defineProperty(draft, DRAFT_STATE, {
            value: state2,
            writable: true
          });
          return draft;
        }
        var descriptors2 = {};
        function proxyProperty(prop, enumerable) {
          var desc = descriptors2[prop];
          if (desc) {
            desc.enumerable = enumerable;
          } else {
            descriptors2[prop] = desc = {
              configurable: true,
              enumerable,
              get: function get3() {
                var state2 = this[DRAFT_STATE];
                assertUnrevoked(state2);
                return objectTraps.get(state2, prop);
              },
              set: function set5(value) {
                var state2 = this[DRAFT_STATE];
                assertUnrevoked(state2);
                objectTraps.set(state2, prop, value);
              }
            };
          }
          return desc;
        }
        function markChangesSweep(drafts) {
          for (var i3 = drafts.length - 1; i3 >= 0; i3--) {
            var state2 = drafts[i3][DRAFT_STATE];
            if (!state2.modified_) {
              switch (state2.type_) {
                case 5:
                  if (hasArrayChanges(state2))
                    markChanged(state2);
                  break;
                case 4:
                  if (hasObjectChanges(state2))
                    markChanged(state2);
                  break;
              }
            }
          }
        }
        function markChangesRecursively(object4) {
          if (!object4 || typeof object4 !== "object")
            return;
          var state2 = object4[DRAFT_STATE];
          if (!state2)
            return;
          var base_ = state2.base_, draft_ = state2.draft_, assigned_ = state2.assigned_, type_ = state2.type_;
          if (type_ === 4) {
            each(draft_, function(key) {
              if (key === DRAFT_STATE)
                return;
              if (base_[key] === void 0 && !has2(base_, key)) {
                assigned_[key] = true;
                markChanged(state2);
              } else if (!assigned_[key]) {
                markChangesRecursively(draft_[key]);
              }
            });
            each(base_, function(key) {
              if (draft_[key] === void 0 && !has2(draft_, key)) {
                assigned_[key] = false;
                markChanged(state2);
              }
            });
          } else if (type_ === 5) {
            if (hasArrayChanges(state2)) {
              markChanged(state2);
              assigned_.length = true;
            }
            if (draft_.length < base_.length) {
              for (var i3 = draft_.length; i3 < base_.length; i3++) {
                assigned_[i3] = false;
              }
            } else {
              for (var _i2 = base_.length; _i2 < draft_.length; _i2++) {
                assigned_[_i2] = true;
              }
            }
            var min3 = Math.min(draft_.length, base_.length);
            for (var _i3 = 0; _i3 < min3; _i3++) {
              if (assigned_[_i3] === void 0)
                markChangesRecursively(draft_[_i3]);
            }
          }
        }
        function hasObjectChanges(state2) {
          var base_ = state2.base_, draft_ = state2.draft_;
          var keys5 = ownKeys3(draft_);
          for (var i3 = keys5.length - 1; i3 >= 0; i3--) {
            var key = keys5[i3];
            if (key === DRAFT_STATE)
              continue;
            var baseValue = base_[key];
            if (baseValue === void 0 && !has2(base_, key)) {
              return true;
            } else {
              var value = draft_[key];
              var _state = value && value[DRAFT_STATE];
              if (_state ? _state.base_ !== baseValue : !is(value, baseValue)) {
                return true;
              }
            }
          }
          var baseIsDraft = !!base_[DRAFT_STATE];
          return keys5.length !== ownKeys3(base_).length + (baseIsDraft ? 0 : 1);
        }
        function hasArrayChanges(state2) {
          var draft_ = state2.draft_;
          if (draft_.length !== state2.base_.length)
            return true;
          var descriptor = Object.getOwnPropertyDescriptor(draft_, draft_.length - 1);
          if (descriptor && !descriptor.get)
            return true;
          return false;
        }
        function hasChanges_(state2) {
          return state2.type_ === 4 ? hasObjectChanges(state2) : hasArrayChanges(state2);
        }
        function assertUnrevoked(state2) {
          if (state2.revoked_)
            die(3, JSON.stringify(latest(state2)));
        }
        loadPlugin("ES5", {
          createES5Proxy_,
          willFinalizeES5_,
          hasChanges_
        });
      }
      function enablePatches() {
        var REPLACE = "replace";
        var ADD = "add";
        var REMOVE = "remove";
        function generatePatches_(state2, basePath, patches, inversePatches) {
          switch (state2.type_) {
            case 0:
            case 4:
            case 2:
              return generatePatchesFromAssigned(state2, basePath, patches, inversePatches);
            case 5:
            case 1:
              return generateArrayPatches(state2, basePath, patches, inversePatches);
            case 3:
              return generateSetPatches(state2, basePath, patches, inversePatches);
          }
        }
        function generateArrayPatches(state2, basePath, patches, inversePatches) {
          var base_ = state2.base_, assigned_ = state2.assigned_;
          var copy_ = state2.copy_;
          if (copy_.length < base_.length) {
            var _ref2 = [copy_, base_];
            base_ = _ref2[0];
            copy_ = _ref2[1];
            var _ref22 = [inversePatches, patches];
            patches = _ref22[0];
            inversePatches = _ref22[1];
          }
          for (var i3 = 0; i3 < base_.length; i3++) {
            if (assigned_[i3] && copy_[i3] !== base_[i3]) {
              var path2 = basePath.concat([i3]);
              patches.push({
                op: REPLACE,
                path: path2,
                value: clonePatchValueIfNeeded(copy_[i3])
              });
              inversePatches.push({
                op: REPLACE,
                path: path2,
                value: clonePatchValueIfNeeded(base_[i3])
              });
            }
          }
          for (var _i = base_.length; _i < copy_.length; _i++) {
            var _path = basePath.concat([_i]);
            patches.push({
              op: ADD,
              path: _path,
              value: clonePatchValueIfNeeded(copy_[_i])
            });
          }
          if (base_.length < copy_.length) {
            inversePatches.push({
              op: REPLACE,
              path: basePath.concat(["length"]),
              value: base_.length
            });
          }
        }
        function generatePatchesFromAssigned(state2, basePath, patches, inversePatches) {
          var base_ = state2.base_, copy_ = state2.copy_;
          each(state2.assigned_, function(key, assignedValue) {
            var origValue = get2(base_, key);
            var value = get2(copy_, key);
            var op = !assignedValue ? REMOVE : has2(base_, key) ? REPLACE : ADD;
            if (origValue === value && op === REPLACE)
              return;
            var path2 = basePath.concat(key);
            patches.push(op === REMOVE ? {
              op,
              path: path2
            } : {
              op,
              path: path2,
              value
            });
            inversePatches.push(op === ADD ? {
              op: REMOVE,
              path: path2
            } : op === REMOVE ? {
              op: ADD,
              path: path2,
              value: clonePatchValueIfNeeded(origValue)
            } : {
              op: REPLACE,
              path: path2,
              value: clonePatchValueIfNeeded(origValue)
            });
          });
        }
        function generateSetPatches(state2, basePath, patches, inversePatches) {
          var base_ = state2.base_, copy_ = state2.copy_;
          var i3 = 0;
          base_.forEach(function(value) {
            if (!copy_.has(value)) {
              var path2 = basePath.concat([i3]);
              patches.push({
                op: REMOVE,
                path: path2,
                value
              });
              inversePatches.unshift({
                op: ADD,
                path: path2,
                value
              });
            }
            i3++;
          });
          i3 = 0;
          copy_.forEach(function(value) {
            if (!base_.has(value)) {
              var path2 = basePath.concat([i3]);
              patches.push({
                op: ADD,
                path: path2,
                value
              });
              inversePatches.unshift({
                op: REMOVE,
                path: path2,
                value
              });
            }
            i3++;
          });
        }
        function generateReplacementPatches_(rootState, replacement2, patches, inversePatches) {
          patches.push({
            op: REPLACE,
            path: [],
            value: replacement2 === NOTHING ? void 0 : replacement2
          });
          inversePatches.push({
            op: REPLACE,
            path: [],
            value: rootState.base_
          });
        }
        function applyPatches_(draft, patches) {
          patches.forEach(function(patch) {
            var path2 = patch.path, op = patch.op;
            var base = draft;
            for (var i3 = 0; i3 < path2.length - 1; i3++) {
              var parentType = getArchtype(base);
              var p3 = "" + path2[i3];
              if ((parentType === 0 || parentType === 1) && (p3 === "__proto__" || p3 === "constructor"))
                die(24);
              if (typeof base === "function" && p3 === "prototype")
                die(24);
              base = get2(base, p3);
              if (typeof base !== "object")
                die(15, path2.join("/"));
            }
            var type = getArchtype(base);
            var value = deepClonePatchValue(patch.value);
            var key = path2[path2.length - 1];
            switch (op) {
              case REPLACE:
                switch (type) {
                  case 2:
                    return base.set(key, value);
                  case 3:
                    die(16);
                  default:
                    return base[key] = value;
                }
              case ADD:
                switch (type) {
                  case 1:
                    return base.splice(key, 0, value);
                  case 2:
                    return base.set(key, value);
                  case 3:
                    return base.add(value);
                  default:
                    return base[key] = value;
                }
              case REMOVE:
                switch (type) {
                  case 1:
                    return base.splice(key, 1);
                  case 2:
                    return base.delete(key);
                  case 3:
                    return base.delete(patch.value);
                  default:
                    return delete base[key];
                }
              default:
                die(17, op);
            }
          });
          return draft;
        }
        function deepClonePatchValue(obj) {
          if (!isDraftable(obj))
            return obj;
          if (Array.isArray(obj))
            return obj.map(deepClonePatchValue);
          if (isMap(obj))
            return new Map(Array.from(obj.entries()).map(function(_ref3) {
              var k3 = _ref3[0], v3 = _ref3[1];
              return [k3, deepClonePatchValue(v3)];
            }));
          if (isSet(obj))
            return new Set(Array.from(obj).map(deepClonePatchValue));
          var cloned = Object.create(Object.getPrototypeOf(obj));
          for (var key in obj) {
            cloned[key] = deepClonePatchValue(obj[key]);
          }
          if (has2(obj, DRAFTABLE))
            cloned[DRAFTABLE] = obj[DRAFTABLE];
          return cloned;
        }
        function clonePatchValueIfNeeded(obj) {
          if (isDraft(obj)) {
            return deepClonePatchValue(obj);
          } else
            return obj;
        }
        loadPlugin("Patches", {
          applyPatches_,
          generatePatches_,
          generateReplacementPatches_
        });
      }
      function enableMapSet() {
        var _extendStatics = function extendStatics(d4, b3) {
          _extendStatics = Object.setPrototypeOf || {
            __proto__: []
          } instanceof Array && function(d5, b4) {
            d5.__proto__ = b4;
          } || function(d5, b4) {
            for (var p3 in b4) {
              if (b4.hasOwnProperty(p3))
                d5[p3] = b4[p3];
            }
          };
          return _extendStatics(d4, b3);
        };
        function __extends(d4, b3) {
          _extendStatics(d4, b3);
          function __() {
            this.constructor = d4;
          }
          d4.prototype = (__.prototype = b3.prototype, new __());
        }
        var DraftMap = function(_super) {
          __extends(DraftMap2, _super);
          function DraftMap2(target, parent) {
            this[DRAFT_STATE] = {
              type_: 2,
              parent_: parent,
              scope_: parent ? parent.scope_ : getCurrentScope(),
              modified_: false,
              finalized_: false,
              copy_: void 0,
              assigned_: void 0,
              base_: target,
              draft_: this,
              isManual_: false,
              revoked_: false
            };
            return this;
          }
          var p3 = DraftMap2.prototype;
          Object.defineProperty(p3, "size", {
            get: function get3() {
              return latest(this[DRAFT_STATE]).size;
            }
          });
          p3.has = function(key) {
            return latest(this[DRAFT_STATE]).has(key);
          };
          p3.set = function(key, value) {
            var state2 = this[DRAFT_STATE];
            assertUnrevoked(state2);
            if (!latest(state2).has(key) || latest(state2).get(key) !== value) {
              prepareMapCopy(state2);
              markChanged(state2);
              state2.assigned_.set(key, true);
              state2.copy_.set(key, value);
              state2.assigned_.set(key, true);
            }
            return this;
          };
          p3.delete = function(key) {
            if (!this.has(key)) {
              return false;
            }
            var state2 = this[DRAFT_STATE];
            assertUnrevoked(state2);
            prepareMapCopy(state2);
            markChanged(state2);
            state2.assigned_.set(key, false);
            state2.copy_.delete(key);
            return true;
          };
          p3.clear = function() {
            var state2 = this[DRAFT_STATE];
            assertUnrevoked(state2);
            if (latest(state2).size) {
              prepareMapCopy(state2);
              markChanged(state2);
              state2.assigned_ = new Map();
              each(state2.base_, function(key) {
                state2.assigned_.set(key, false);
              });
              state2.copy_.clear();
            }
          };
          p3.forEach = function(cb, thisArg) {
            var _this = this;
            var state2 = this[DRAFT_STATE];
            latest(state2).forEach(function(_value, key, _map) {
              cb.call(thisArg, _this.get(key), key, _this);
            });
          };
          p3.get = function(key) {
            var state2 = this[DRAFT_STATE];
            assertUnrevoked(state2);
            var value = latest(state2).get(key);
            if (state2.finalized_ || !isDraftable(value)) {
              return value;
            }
            if (value !== state2.base_.get(key)) {
              return value;
            }
            var draft = createProxy(state2.scope_.immer_, value, state2);
            prepareMapCopy(state2);
            state2.copy_.set(key, draft);
            return draft;
          };
          p3.keys = function() {
            return latest(this[DRAFT_STATE]).keys();
          };
          p3.values = function() {
            var _this2 = this, _ref2;
            var iterator2 = this.keys();
            return _ref2 = {}, _ref2[iteratorSymbol] = function() {
              return _this2.values();
            }, _ref2.next = function next2() {
              var r2 = iterator2.next();
              if (r2.done)
                return r2;
              var value = _this2.get(r2.value);
              return {
                done: false,
                value
              };
            }, _ref2;
          };
          p3.entries = function() {
            var _this3 = this, _ref2;
            var iterator2 = this.keys();
            return _ref2 = {}, _ref2[iteratorSymbol] = function() {
              return _this3.entries();
            }, _ref2.next = function next2() {
              var r2 = iterator2.next();
              if (r2.done)
                return r2;
              var value = _this3.get(r2.value);
              return {
                done: false,
                value: [r2.value, value]
              };
            }, _ref2;
          };
          p3[iteratorSymbol] = function() {
            return this.entries();
          };
          return DraftMap2;
        }(Map);
        function proxyMap_(target, parent) {
          return new DraftMap(target, parent);
        }
        function prepareMapCopy(state2) {
          if (!state2.copy_) {
            state2.assigned_ = new Map();
            state2.copy_ = new Map(state2.base_);
          }
        }
        var DraftSet = function(_super) {
          __extends(DraftSet2, _super);
          function DraftSet2(target, parent) {
            this[DRAFT_STATE] = {
              type_: 3,
              parent_: parent,
              scope_: parent ? parent.scope_ : getCurrentScope(),
              modified_: false,
              finalized_: false,
              copy_: void 0,
              base_: target,
              draft_: this,
              drafts_: new Map(),
              revoked_: false,
              isManual_: false
            };
            return this;
          }
          var p3 = DraftSet2.prototype;
          Object.defineProperty(p3, "size", {
            get: function get3() {
              return latest(this[DRAFT_STATE]).size;
            }
          });
          p3.has = function(value) {
            var state2 = this[DRAFT_STATE];
            assertUnrevoked(state2);
            if (!state2.copy_) {
              return state2.base_.has(value);
            }
            if (state2.copy_.has(value))
              return true;
            if (state2.drafts_.has(value) && state2.copy_.has(state2.drafts_.get(value)))
              return true;
            return false;
          };
          p3.add = function(value) {
            var state2 = this[DRAFT_STATE];
            assertUnrevoked(state2);
            if (!this.has(value)) {
              prepareSetCopy(state2);
              markChanged(state2);
              state2.copy_.add(value);
            }
            return this;
          };
          p3.delete = function(value) {
            if (!this.has(value)) {
              return false;
            }
            var state2 = this[DRAFT_STATE];
            assertUnrevoked(state2);
            prepareSetCopy(state2);
            markChanged(state2);
            return state2.copy_.delete(value) || (state2.drafts_.has(value) ? state2.copy_.delete(state2.drafts_.get(value)) : false);
          };
          p3.clear = function() {
            var state2 = this[DRAFT_STATE];
            assertUnrevoked(state2);
            if (latest(state2).size) {
              prepareSetCopy(state2);
              markChanged(state2);
              state2.copy_.clear();
            }
          };
          p3.values = function() {
            var state2 = this[DRAFT_STATE];
            assertUnrevoked(state2);
            prepareSetCopy(state2);
            return state2.copy_.values();
          };
          p3.entries = function entries() {
            var state2 = this[DRAFT_STATE];
            assertUnrevoked(state2);
            prepareSetCopy(state2);
            return state2.copy_.entries();
          };
          p3.keys = function() {
            return this.values();
          };
          p3[iteratorSymbol] = function() {
            return this.values();
          };
          p3.forEach = function forEach(cb, thisArg) {
            var iterator2 = this.values();
            var result = iterator2.next();
            while (!result.done) {
              cb.call(thisArg, result.value, result.value, this);
              result = iterator2.next();
            }
          };
          return DraftSet2;
        }(Set);
        function proxySet_(target, parent) {
          return new DraftSet(target, parent);
        }
        function prepareSetCopy(state2) {
          if (!state2.copy_) {
            state2.copy_ = new Set();
            state2.base_.forEach(function(value) {
              if (isDraftable(value)) {
                var draft = createProxy(state2.scope_.immer_, value, state2);
                state2.drafts_.set(value, draft);
                state2.copy_.add(draft);
              } else {
                state2.copy_.add(value);
              }
            });
          }
        }
        function assertUnrevoked(state2) {
          if (state2.revoked_)
            die(3, JSON.stringify(latest(state2)));
        }
        loadPlugin("MapSet", {
          proxyMap_,
          proxySet_
        });
      }
      function enableAllPlugins() {
        enableES5();
        enableMapSet();
        enablePatches();
      }
      var immer = /* @__PURE__ */ new Immer();
      var produce = immer.produce;
      var produceWithPatches = /* @__PURE__ */ immer.produceWithPatches.bind(immer);
      var setAutoFreeze = /* @__PURE__ */ immer.setAutoFreeze.bind(immer);
      var setUseProxies = /* @__PURE__ */ immer.setUseProxies.bind(immer);
      var applyPatches = /* @__PURE__ */ immer.applyPatches.bind(immer);
      var createDraft = /* @__PURE__ */ immer.createDraft.bind(immer);
      var finishDraft = /* @__PURE__ */ immer.finishDraft.bind(immer);
      function castDraft(value) {
        return value;
      }
      function castImmutable(value) {
        return value;
      }
      exports.Immer = Immer;
      exports.applyPatches = applyPatches;
      exports.castDraft = castDraft;
      exports.castImmutable = castImmutable;
      exports.createDraft = createDraft;
      exports.current = current2;
      exports.default = produce;
      exports.enableAllPlugins = enableAllPlugins;
      exports.enableES5 = enableES5;
      exports.enableMapSet = enableMapSet;
      exports.enablePatches = enablePatches;
      exports.finishDraft = finishDraft;
      exports.freeze = freeze;
      exports.immerable = DRAFTABLE;
      exports.isDraft = isDraft;
      exports.isDraftable = isDraftable;
      exports.nothing = NOTHING;
      exports.original = original;
      exports.produce = produce;
      exports.produceWithPatches = produceWithPatches;
      exports.setAutoFreeze = setAutoFreeze;
      exports.setUseProxies = setUseProxies;
    }
  });

  // node_modules/immer/dist/index.js
  var require_dist = __commonJS({
    "node_modules/immer/dist/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_immer_cjs_development();
      }
    }
  });

  // node_modules/@state-designer/core/src/lib/testEventHandlerConditions.js
  var require_testEventHandlerConditions = __commonJS({
    "node_modules/@state-designer/core/src/lib/testEventHandlerConditions.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.testEventHandlerConditions = void 0;
      function testEventHandlerConditions(h4, d4, p3, r2) {
        try {
          if (h4.if[0] && !h4.if.every((c3) => c3(d4, p3, r2)))
            return false;
          if (h4.ifAny[0] && !h4.ifAny.some((c3) => c3(d4, p3, r2)))
            return false;
          if (h4.unless[0] && !h4.unless.every((c3) => !c3(d4, p3, r2)))
            return false;
          if (h4.unlessAny[0] && !h4.unlessAny.some((c3) => !c3(d4, p3, r2)))
            return false;
          return true;
        } catch (e4) {
          throw Error(`Error while testing conditions! ` + e4.message);
        }
      }
      exports.testEventHandlerConditions = testEventHandlerConditions;
    }
  });

  // node_modules/@state-designer/core/src/lib/customError.js
  var require_customError = __commonJS({
    "node_modules/@state-designer/core/src/lib/customError.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function customError(message, error2) {
        const err = new Error(message + " " + error2.message);
        err.stack = error2.stack;
        return err;
      }
      exports.default = customError;
    }
  });

  // node_modules/@state-designer/core/src/lib/createEventChain.js
  var require_createEventChain = __commonJS({
    "node_modules/@state-designer/core/src/lib/createEventChain.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.createEventChain = void 0;
      var immer_1 = require_dist();
      var testEventHandlerConditions_1 = require_testEventHandlerConditions();
      var customError_1 = require_customError();
      function createEventChain(options) {
        const { state: state2, onDelayedOutcome, getFreshDataAfterWait } = options;
        const handlers = [...options.handler];
        const { payload } = options;
        let waiting = false;
        let core = {
          data: options.data,
          payload: options.payload,
          result: options.result
        };
        const finalOutcome = Object.assign(Object.assign({}, core), { shouldBreak: false, shouldNotify: false, pendingTransition: [] });
        let draftCore = immer_1.createDraft(core);
        let tResult = options.result;
        function complete(draft) {
          core = immer_1.finishDraft(draft);
          finalOutcome.result = core.result;
          finalOutcome.data = core.data;
        }
        function processHandlerObject(handler, draft) {
          if (handler.get.length > 0) {
            let fnName = "";
            try {
              for (const result of handler.get) {
                fnName = result.name;
                tResult = result(draft.data, payload, tResult);
              }
            } catch (e4) {
              throw customError_1.default(`Error in result (${fnName})!`, e4);
            }
            draft.result = tResult;
          }
          const passedConditions = testEventHandlerConditions_1.testEventHandlerConditions(handler, draft.data, draft.payload, draft.result);
          if (passedConditions) {
            if (handler.do.length > 0) {
              finalOutcome.shouldNotify = true;
              let fnName = "";
              try {
                for (const action of handler.do) {
                  fnName = action.name;
                  const result = action(draft.data, draft.payload, draft.result);
                  if (result) {
                    Object.assign(draft.data, Object.freeze(result));
                  }
                }
              } catch (e4) {
                throw customError_1.default(`Error in action (${fnName})!`, e4);
              }
            }
            if (handler.secretlyDo.length > 0) {
              let fnName = "";
              try {
                for (const action of handler.secretlyDo) {
                  fnName = action.name;
                  const result = action(draft.data, draft.payload, draft.result);
                  if (result) {
                    Object.assign(draft.data, Object.freeze(result));
                  }
                }
              } catch (e4) {
                throw customError_1.default(`Error in secret action (${fnName})!`, e4);
              }
            }
            if (handler.to.length > 0) {
              let fnName = "";
              try {
                for (const fn2 of handler.to) {
                  fnName = fn2.name;
                  finalOutcome.pendingTransition.push(fn2(draft.data, draft.payload, draft.result));
                }
                finalOutcome.shouldBreak = true;
                finalOutcome.shouldNotify = true;
                return { shouldBreak: true };
              } catch (e4) {
                throw customError_1.default(`Error computing transition (${fnName})!`, e4);
              }
            }
            if (handler.secretlyTo.length > 0) {
              let fnName = "";
              try {
                for (const fn2 of handler.secretlyTo) {
                  fnName = fn2.name;
                  finalOutcome.pendingTransition.push(fn2(draft.data, draft.payload, draft.result));
                }
                finalOutcome.shouldBreak = true;
                return { shouldBreak: true };
              } catch (e4) {
                throw customError_1.default(`Error computing secret transition (${fnName})!`, e4);
              }
            }
            if (handler.then !== void 0) {
              processEventHandler([...handler.then], draft);
            }
            if (handler.break !== void 0) {
              try {
                if (handler.break(draft.data, draft.payload, draft.result)) {
                  return { shouldBreak: true };
                }
              } catch (e4) {
                throw customError_1.default(`Error computing break (${handler.break.name})!`, e4);
              }
            }
          } else {
            if (handler.else !== void 0) {
              processEventHandler([...handler.else], draft);
            }
          }
          return { shouldBreak: false };
        }
        function processEventHandler(eventHandler, draft) {
          if (finalOutcome.shouldBreak) {
            return { shouldBreakDueToWait: false };
          }
          const nextHandlerObject = eventHandler.shift();
          if (nextHandlerObject === void 0) {
            return { shouldBreakDueToWait: false };
          } else if (nextHandlerObject.wait !== void 0) {
            const waitTime = nextHandlerObject.wait(draft.data, payload, draft.result) * 1e3;
            if (waiting && finalOutcome.shouldNotify) {
              complete(draftCore);
              onDelayedOutcome(finalOutcome);
            }
            waiting = true;
            state2.times.timeouts[0] = setTimeout(() => {
              core.data = getFreshDataAfterWait();
              core.result = void 0;
              draftCore = immer_1.createDraft(core);
              const { shouldBreak } = processHandlerObject(nextHandlerObject, draftCore);
              if (!shouldBreak) {
                const { shouldBreakDueToWait } = processEventHandler(handlers, draftCore);
                if (shouldBreakDueToWait) {
                  return;
                }
              }
              complete(draftCore);
              onDelayedOutcome(finalOutcome);
            }, waitTime);
            return { shouldBreakDueToWait: true };
          } else {
            const { shouldBreak } = processHandlerObject(nextHandlerObject, draft);
            if (!shouldBreak) {
              return processEventHandler(eventHandler, draft);
            }
            return { shouldBreakDueToWait: false };
          }
        }
        processEventHandler(handlers, draftCore);
        complete(draftCore);
        return finalOutcome;
      }
      exports.createEventChain = createEventChain;
    }
  });

  // node_modules/@state-designer/core/src/lib/utils.js
  var require_utils = __commonJS({
    "node_modules/@state-designer/core/src/lib/utils.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.fromEntries = exports.last = void 0;
      function last2(array3) {
        const length3 = array3 == null ? 0 : array3.length;
        return length3 ? array3[length3 - 1] : void 0;
      }
      exports.last = last2;
      function fromEntries(arr) {
        return arr.reduce((a3, [k3, v3]) => (a3[k3] = v3, a3), {});
      }
      exports.fromEntries = fromEntries;
    }
  });

  // node_modules/@state-designer/core/src/lib/stateTree.js
  var require_stateTree = __commonJS({
    "node_modules/@state-designer/core/src/lib/stateTree.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.recursivelyEndStateIntervals = exports.endStateIntervals = exports.setIntitialStates = exports.getInitialState = exports.findTransitionTargets = exports.activateState = exports.getActiveStates = exports.deactivateState = void 0;
      var utils_1 = require_utils();
      var testEventHandlerConditions_1 = require_testEventHandlerConditions();
      function deactivateState(state2) {
        state2.active = false;
        for (const childState of Object.values(state2.states)) {
          deactivateState(childState);
        }
      }
      exports.deactivateState = deactivateState;
      function getActiveStates(state2) {
        const acc = [];
        if (state2.active) {
          acc.push(state2);
          for (const childState of Object.values(state2.states)) {
            acc.push(...getActiveStates(childState));
          }
        }
        return acc;
      }
      exports.getActiveStates = getActiveStates;
      function activateState(state2, path2, before, prev, deep) {
        let isTarget = false;
        state2.active = true;
        if (state2.name === path2[0]) {
          path2.shift();
          if (path2.length === 0) {
            isTarget = true;
          }
        }
        if (state2.initial === void 0) {
          Object.values(state2.states).forEach((c3) => activateState(c3, path2, before, prev, deep));
        } else if (prev && path2.length === 0) {
          const c3 = state2.states[utils_1.last(state2.history) || state2.initial];
          activateState(c3, path2, before, deep, deep);
        } else if (state2.states[path2[0]] !== void 0) {
          const c3 = state2.states[path2[0]];
          state2.history.push(c3.name);
          activateState(c3, path2, before, prev, deep);
        } else if (!isTarget && before.includes(state2)) {
          const c3 = state2.states[utils_1.last(state2.history) || state2.initial];
          activateState(c3, path2, before, false, false);
        } else {
          const c3 = state2.states[state2.initial];
          state2.history.push(c3.name);
          activateState(c3, path2, before, false, false);
        }
      }
      exports.activateState = activateState;
      function findTransitionTargets(state2, path2) {
        const acc = [];
        const safePath = path2.startsWith(".") ? path2 : "." + path2;
        if (state2.path.endsWith(safePath)) {
          acc.push(state2);
        }
        for (const childState of Object.values(state2.states)) {
          acc.push(...findTransitionTargets(childState, path2));
        }
        return acc;
      }
      exports.findTransitionTargets = findTransitionTargets;
      function getInitialState(initial, payload, data2) {
        if (initial.else !== void 0) {
          let result = void 0;
          for (const resu of initial.get) {
            result = resu(data2, payload, result);
          }
          if (testEventHandlerConditions_1.testEventHandlerConditions(initial, data2, payload, result)) {
            if (initial.then !== void 0) {
              return getInitialState(initial.then, payload, data2);
            } else {
              return initial.to(data2, payload, result);
            }
          } else {
            return getInitialState(initial.else, payload, data2);
          }
        } else {
          return initial.to(data2, payload, void 0);
        }
      }
      exports.getInitialState = getInitialState;
      function setIntitialStates(state2, payload, data2) {
        if (state2.initialFn !== void 0) {
          state2.initial = getInitialState(state2.initialFn, payload, data2);
        }
        if (state2.states !== void 0) {
          for (const child of Object.values(state2.states)) {
            setIntitialStates(child, payload, data2);
          }
        }
      }
      exports.setIntitialStates = setIntitialStates;
      function endStateIntervals(state2) {
        const { cancelAsync, timeouts, interval, animationFrame } = state2.times;
        if (cancelAsync !== void 0) {
          cancelAsync();
          state2.times.cancelAsync = void 0;
        }
        for (const timeout of timeouts) {
          clearTimeout(timeout);
        }
        state2.times.timeouts = [];
        if (interval !== void 0) {
          clearInterval(interval);
          state2.times.interval = void 0;
        }
        if (animationFrame !== void 0) {
          cancelAnimationFrame(animationFrame);
          state2.times.animationFrame = void 0;
        }
      }
      exports.endStateIntervals = endStateIntervals;
      function recursivelyEndStateIntervals(state2) {
        endStateIntervals(state2);
        for (const child of Object.values(state2.states)) {
          recursivelyEndStateIntervals(child);
        }
      }
      exports.recursivelyEndStateIntervals = recursivelyEndStateIntervals;
    }
  });

  // node_modules/@state-designer/core/src/lib/getStateTreeFromDesign.js
  var require_getStateTreeFromDesign = __commonJS({
    "node_modules/@state-designer/core/src/lib/getStateTreeFromDesign.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getStateTreeFromDesign = void 0;
      var lodash_1 = require_lodash();
      var utils_1 = require_utils();
      function getStateTreeFromDesign(config, id2) {
        const times = utils_1.fromEntries(lodash_1.entries(config.times || {}).map(([k3, v3]) => {
          return [k3, castToFunction(v3)];
        }));
        function getEventFn(item, collection2, collectionName) {
          if (lodash_1.isString(item)) {
            if (lodash_1.isUndefined(collection2)) {
              throw Error(`No ${collectionName} in config!`);
            } else {
              const itemFromCollection = collection2[item];
              if (lodash_1.isUndefined(itemFromCollection)) {
                throw Error(`No item in ${collectionName} named ${item}!`);
              }
              return itemFromCollection;
            }
          } else {
            return item;
          }
        }
        function castToNamedFunction(item) {
          const fn2 = () => item;
          Object.defineProperty(fn2, "name", { value: item, writable: false });
          return fn2;
        }
        function castToFunction(item) {
          if (lodash_1.isUndefined(item))
            return void 0;
          return lodash_1.isFunction(item) ? item : castToNamedFunction(item);
        }
        function getTransitions(items) {
          if (lodash_1.isUndefined(items))
            return [];
          const targets = Array.isArray(items) ? items : [items];
          return targets.map((t4) => lodash_1.isFunction(t4) ? t4 : castToNamedFunction(t4));
        }
        function getResults(items) {
          if (lodash_1.isUndefined(items))
            return [];
          return lodash_1.castArray(items).map((item) => getEventFn(item, config.results, "results"));
        }
        function getConditions(items) {
          if (lodash_1.isUndefined(items))
            return [];
          return lodash_1.castArray(items).map((item) => getEventFn(item, config.conditions, "conditions"));
        }
        function getActions(items) {
          if (lodash_1.isUndefined(items))
            return [];
          return lodash_1.castArray(items).map((item) => getEventFn(item, config.actions, "actions"));
        }
        function getAsync(item) {
          return getEventFn(item, config.asyncs, "asyncs");
        }
        function getTime(item) {
          if (lodash_1.isUndefined(item))
            return void 0;
          return lodash_1.isNumber(item) ? castToNamedFunction(item) : getEventFn(item, times, "times");
        }
        function getEventHandlerObject(itemCfg) {
          return {
            get: getResults(itemCfg.get),
            if: getConditions(itemCfg.if),
            ifAny: getConditions(itemCfg.ifAny),
            unless: getConditions(itemCfg.unless),
            unlessAny: getConditions(itemCfg.unlessAny),
            do: getActions(itemCfg.do),
            secretlyDo: getActions(itemCfg.secretlyDo),
            to: getTransitions(itemCfg.to),
            secretlyTo: getTransitions(itemCfg.secretlyTo),
            wait: getTime(itemCfg.wait),
            break: castToFunction(itemCfg.break),
            then: itemCfg.then ? getEventHandler(itemCfg.then) : void 0,
            else: itemCfg.else ? getEventHandler(itemCfg.else) : void 0
          };
        }
        function getEventHandler(event) {
          return lodash_1.castArray(event).map((eventHandler) => {
            switch (typeof eventHandler) {
              case "string": {
                if (lodash_1.isUndefined(config.actions)) {
                  throw new Error("Actions is undefined!");
                } else {
                  const eventFn = config.actions && config.actions[eventHandler];
                  return getEventHandlerObject({ do: eventFn });
                }
              }
              case "function": {
                return getEventHandlerObject({ do: eventHandler });
              }
              default: {
                return getEventHandlerObject(eventHandler);
              }
            }
          });
        }
        function getInitialState(initial) {
          if (lodash_1.isUndefined(initial)) {
            return;
          }
          if (typeof initial === "string" || !("else" in initial)) {
            const target = typeof initial === "string" ? initial : initial.to;
            return {
              get: [],
              if: [],
              unless: [],
              ifAny: [],
              unlessAny: [],
              to: lodash_1.isFunction(target) ? target : castToNamedFunction(target)
            };
          } else {
            return {
              get: getResults(initial.get),
              if: getConditions(initial.if),
              unless: getConditions(initial.unless),
              ifAny: getConditions(initial.ifAny),
              unlessAny: getConditions(initial.unlessAny),
              to: lodash_1.isFunction(initial.to) ? initial.to : castToNamedFunction(initial.to),
              then: getInitialState(initial.then),
              else: getInitialState(initial.else)
            };
          }
        }
        function createState3(state2, name2, path2, active, depth, isInitial, parentType) {
          if (state2.initial !== void 0 && state2.states === void 0) {
            throw Error(`In ${path2 + name2}, you've provided an initial state but no states!`);
          }
          const type = state2.states ? state2.initial ? "branch" : "parallel" : "leaf";
          return {
            name: name2,
            type,
            isInitial,
            parentType,
            depth,
            path: path2 + name2,
            active,
            activeId: 0,
            history: [],
            times: {
              timeouts: [],
              interval: void 0,
              animationFrame: void 0
            },
            initialFn: getInitialState(state2.initial),
            initial: void 0,
            onEnter: state2.onEnter ? getEventHandler(state2.onEnter) : void 0,
            onExit: state2.onExit ? getEventHandler(state2.onExit) : void 0,
            onEvent: state2.onEvent ? getEventHandler(state2.onEvent) : void 0,
            async: state2.async ? {
              await: getAsync(state2.async.await),
              onResolve: getEventHandler(state2.async.onResolve),
              onReject: state2.async.onReject ? getEventHandler(state2.async.onReject) : void 0
            } : void 0,
            repeat: state2.repeat ? {
              onRepeat: getEventHandler(state2.repeat.onRepeat),
              delay: state2.repeat.delay ? getTime(state2.repeat.delay) : void 0
            } : void 0,
            on: utils_1.fromEntries(state2.on ? lodash_1.entries(state2.on).map(([name3, event]) => [
              name3,
              getEventHandler(event)
            ]) : []),
            states: utils_1.fromEntries(state2.states ? lodash_1.entries(state2.states).map(([childName, childState]) => {
              return [
                childName,
                createState3(childState, childName, path2 + name2 + ".", false, depth + 1, state2.initial === childName, type)
              ];
            }) : [])
          };
        }
        return createState3(config, "root", id2 + ".", true, 0, true, null);
      }
      exports.getStateTreeFromDesign = getStateTreeFromDesign;
    }
  });

  // node_modules/@state-designer/core/src/lib/createState.js
  var require_createState = __commonJS({
    "node_modules/@state-designer/core/src/lib/createState.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.createState = void 0;
      var lodash_1 = require_lodash();
      var immer_1 = require_dist();
      var testEventHandlerConditions_1 = require_testEventHandlerConditions();
      var createEventChain_1 = require_createEventChain();
      var StateTree = require_stateTree();
      var getStateTreeFromDesign_1 = require_getStateTreeFromDesign();
      var customError_1 = require_customError();
      var utils_1 = require_utils();
      immer_1.enableMapSet();
      immer_1.setAutoFreeze(false);
      function createState3(design) {
        var _a;
        const { options = {} } = design;
        const { suppressErrors = false, onSend } = options;
        let logEnabled = (_a = design.options) === null || _a === void 0 ? void 0 : _a.enableLog;
        function handleError(err, prefix) {
          var _a2;
          if (prefix) {
            err.message = prefix + ": " + err.message;
          }
          if ((_a2 = design.options) === null || _a2 === void 0 ? void 0 : _a2.onError) {
            design.options.onError(err);
          }
          if (suppressErrors) {
            throw err;
          } else {
            throw err;
          }
        }
        const subscribers = new Set([]);
        function subscribe2(callbackFn) {
          subscribers.add(callbackFn);
        }
        function unsubscribe2(callbackFn) {
          if (subscribers.has(callbackFn)) {
            subscribers.delete(callbackFn);
          }
          if (subscribers.size === 0) {
            stopLoop();
            StateTree.recursivelyEndStateIntervals(snapshot2.stateTree);
          }
        }
        function notifySubscribers() {
          setValues();
          setLog();
          setActiveStates();
          subscribers.forEach((subscriber) => subscriber(snapshot2));
        }
        function handleEventHandlerChainOutcome(outcome, payload) {
          snapshot2.data = outcome.data;
          for (const transition of outcome.pendingTransition) {
            runTransition(transition, payload, outcome.result);
          }
        }
        function runEventHandlerChain(state2, eventHandler, payload, result) {
          const outcome = createEventChain_1.createEventChain({
            state: state2,
            data: snapshot2.data,
            result,
            payload,
            handler: eventHandler,
            onDelayedOutcome: (outcome2) => {
              handleEventHandlerChainOutcome(outcome2, payload);
              if (outcome2.shouldNotify) {
                notifySubscribers();
              }
            },
            getFreshDataAfterWait: () => snapshot2.data
          });
          handleEventHandlerChainOutcome(outcome, payload);
          return outcome;
        }
        function handleEventOnState(state2, sent) {
          const record = { shouldHalt: false, shouldNotify: false };
          if (!state2.active)
            return record;
          const activeChildren = Object.values(state2.states).filter((state3) => state3.active);
          const eventHandler = state2.on[sent.event];
          let outcome = void 0;
          if (!lodash_1.isUndefined(eventHandler)) {
            outcome = runEventHandlerChain(state2, eventHandler, sent.payload, void 0);
            if (outcome.shouldNotify) {
              record.shouldNotify = true;
            }
            if (outcome.shouldBreak) {
              record.shouldNotify = true;
              record.shouldHalt = true;
              return record;
            }
          }
          if (!lodash_1.isUndefined(state2.onEvent)) {
            outcome = runEventHandlerChain(state2, state2.onEvent, sent.payload, outcome === null || outcome === void 0 ? void 0 : outcome.result);
            if (outcome.shouldNotify) {
              record.shouldNotify = true;
            }
            if (outcome.shouldBreak) {
              record.shouldNotify = true;
              record.shouldHalt = true;
              return record;
            }
          }
          for (const childState of activeChildren) {
            const childRecord = handleEventOnState(childState, sent);
            if (childRecord.shouldNotify) {
              record.shouldNotify = true;
            }
            if (childRecord.shouldHalt) {
              record.shouldNotify = true;
              record.shouldHalt = true;
              return record;
            }
          }
          return record;
        }
        function runTransition(path2, payload, result) {
          const isPreviousTransition = path2.endsWith(".previous");
          const isRestoreTransition = path2.endsWith(".restore");
          if (isPreviousTransition) {
            path2 = path2.slice(0, path2.length - 9);
          } else if (isRestoreTransition) {
            path2 = path2.slice(0, path2.length - 8);
          }
          const targets = StateTree.findTransitionTargets(snapshot2.stateTree, path2);
          const target = utils_1.last(targets);
          if (lodash_1.isUndefined(target)) {
            throw Error(`Error in transition (${path2})! Could not find that state.`);
          }
          const pathDown = target.path.split(".").slice(1);
          const beforeActive = StateTree.getActiveStates(snapshot2.stateTree);
          StateTree.deactivateState(snapshot2.stateTree);
          StateTree.setIntitialStates(snapshot2.stateTree, payload, snapshot2.data);
          StateTree.activateState(snapshot2.stateTree, pathDown, beforeActive, isPreviousTransition || isRestoreTransition, isRestoreTransition);
          const afterActive = StateTree.getActiveStates(snapshot2.stateTree);
          const deactivatedStates = beforeActive.filter((state2) => !afterActive.includes(state2));
          const newlyActivatedStates = afterActive.filter((state2) => !beforeActive.includes(state2));
          deactivatedStates.forEach((state2) => {
            StateTree.endStateIntervals(state2);
            removeOnFrameEventHandler(state2);
          });
          for (const state2 of deactivatedStates) {
            const { onExit } = state2;
            state2.activeId++;
            if (!lodash_1.isUndefined(onExit)) {
              const onExitOutcome = runEventHandlerChain(state2, onExit, payload, result);
              if (onExitOutcome.shouldBreak)
                return;
            }
          }
          for (const state2 of newlyActivatedStates) {
            const { async, repeat, onEnter } = state2;
            if (!lodash_1.isUndefined(repeat)) {
              const { onRepeat, delay } = repeat;
              let now = performance.now();
              let elapsed = 0;
              let realInterval = 0;
              if (delay === void 0) {
                addOnFrameState(state2, { payload, start: now });
              } else {
                let lastTime2 = performance.now();
                const s3 = delay(snapshot2.data, payload, result);
                state2.times.interval = setInterval(() => {
                  now = performance.now();
                  realInterval = now - lastTime2;
                  elapsed += realInterval;
                  lastTime2 = now;
                  const outcome = runEventHandlerChain(state2, onRepeat, payload, {
                    interval: realInterval,
                    elapsed
                  });
                  if (outcome.shouldNotify)
                    notifySubscribers();
                }, Math.max(1 / 60, s3 * 1e3));
              }
            }
            if (!lodash_1.isUndefined(onEnter)) {
              const onEnterOutcome = runEventHandlerChain(state2, onEnter, payload, result);
              if (onEnterOutcome.shouldBreak)
                return;
            }
            if (!lodash_1.isUndefined(async)) {
              let finished = false;
              state2.times.cancelAsync = () => finished = true;
              async.await(snapshot2.data, payload, result).then((resolved) => {
                if (finished)
                  return;
                const localUpdate = runEventHandlerChain(state2, async.onResolve, payload, resolved);
                if (localUpdate.shouldNotify)
                  notifySubscribers();
              }, (rejected) => {
                if (!lodash_1.isUndefined(async.onReject)) {
                  if (finished)
                    return;
                  const localUpdate = runEventHandlerChain(state2, async.onReject, payload, rejected);
                  if (localUpdate.shouldNotify)
                    notifySubscribers();
                }
              });
            }
          }
        }
        function enableLog(enabled) {
          logEnabled = enabled;
        }
        function logEvent(event) {
          if (logEnabled) {
            _log.unshift(event);
          } else {
            _log = [event];
          }
        }
        function setLog() {
          snapshot2.index++;
          snapshot2.log = [..._log];
        }
        function setValues() {
          snapshot2.values = getValues(snapshot2.data, design.values);
        }
        function setActiveStates() {
          _activeStates = StateTree.getActiveStates(snapshot2.stateTree);
          snapshot2.active = getPaths(_activeStates);
        }
        let lastTime = -1;
        let interval = -1;
        let frameInterval = void 0;
        const onFrameStates = new Map([]);
        function loop(ms) {
          var _a2;
          let shouldNotify = false;
          if (lastTime < 0)
            lastTime = ms;
          interval = ms - lastTime;
          lastTime = ms;
          const states = Array.from(onFrameStates.entries());
          for (const [state2, info] of states) {
            if (((_a2 = state2.repeat) === null || _a2 === void 0 ? void 0 : _a2.onRepeat) !== void 0) {
              const outcome = runEventHandlerChain(state2, state2.repeat.onRepeat, info.payload, {
                interval,
                elapsed: ms - info.start
              });
              if (outcome.shouldNotify) {
                shouldNotify = true;
              }
              if (outcome.shouldBreak) {
                break;
              }
            }
          }
          if (shouldNotify)
            notifySubscribers();
          if (frameInterval === void 0)
            return;
          frameInterval = requestAnimationFrame(loop);
        }
        function stopLoop() {
          if (frameInterval !== void 0) {
            cancelAnimationFrame(frameInterval);
            frameInterval = void 0;
            lastTime = -1;
            interval = -1;
          }
        }
        function startLoop() {
          frameInterval = requestAnimationFrame(loop);
        }
        function addOnFrameState(state2, info) {
          onFrameStates.set(state2, info);
          if (frameInterval === void 0) {
            startLoop();
          }
        }
        function removeOnFrameEventHandler(state2) {
          if (onFrameStates.has(state2)) {
            onFrameStates.delete(state2);
            if (onFrameStates.size === 0) {
              stopLoop();
            }
          }
        }
        function onUpdate(callbackFn) {
          subscribe2(callbackFn);
          return () => unsubscribe2(callbackFn);
        }
        function getUpdate(callbackFn) {
          setValues();
          setActiveStates();
          setLog();
          callbackFn(snapshot2);
        }
        function send(eventName, payload, onSettle) {
          try {
            const { shouldNotify } = handleEventOnState(snapshot2.stateTree, {
              event: eventName,
              payload
            });
            logEvent(eventName);
            if (shouldNotify)
              notifySubscribers();
            onSettle === null || onSettle === void 0 ? void 0 : onSettle(snapshot2);
            onSend === null || onSend === void 0 ? void 0 : onSend(eventName, payload, shouldNotify);
          } catch (e4) {
            handleError(e4, eventName);
          }
          return snapshot2;
        }
        const sendCache = new Map([]);
        function thenSend(eventName) {
          let cached = sendCache.get(eventName);
          if (!cached) {
            cached = () => send(eventName);
            sendCache.set(eventName, cached);
          }
          return cached;
        }
        function isIn(...paths) {
          try {
            return lodash_1.castArray(paths).map((path2) => path2.startsWith(".") ? path2 : "." + path2).every((path2) => _activeStates.find((state2) => state2.path.endsWith(path2)) !== void 0);
          } catch (e4) {
            handleError(customError_1.default(`Error testing isIn(${paths.join()})!`, e4));
            return false;
          }
        }
        function isInAny(...paths) {
          try {
            return lodash_1.castArray(paths).map((path2) => path2.startsWith(".") ? path2 : "." + path2).some((path2) => _activeStates.find((state2) => state2.path.endsWith(path2)) !== void 0);
          } catch (e4) {
            handleError(customError_1.default(`Error testing isInAny(${paths.join()})!`, e4));
            return false;
          }
        }
        function can(eventName, payload, result) {
          return !lodash_1.isUndefined(_activeStates.find((state2) => {
            const eventHandler = state2.on[eventName];
            if (lodash_1.isUndefined(eventHandler))
              return;
            try {
              return eventHandler.some((handler) => {
                result = void 0;
                for (const resu of handler.get) {
                  result = resu(snapshot2.data, payload, result);
                }
                return testEventHandlerConditions_1.testEventHandlerConditions(handler, snapshot2.data, payload, result);
              });
            } catch (e4) {
              handleError(customError_1.default(`Error testing can(${eventName})!`, e4));
              return false;
            }
          }));
        }
        function whenIn(paths, reducer = "value", initialValue) {
          const entries = [];
          Object.entries(paths).forEach(([key, value]) => {
            const v3 = lodash_1.isFunction(value) ? value() : value;
            if (key === "root") {
              entries.push([key, v3]);
            } else {
              if (_activeStates.find((v4) => {
                const safeKey = key.startsWith(".") ? key : "." + key;
                return v4.path.endsWith(safeKey);
              })) {
                entries.push([key, v3]);
              }
            }
          });
          if (entries.length === 0) {
            if (!lodash_1.isUndefined(paths.default)) {
              entries.push(["default", paths.default]);
            }
          }
          let returnValue;
          let rdcr;
          if (reducer === "array") {
            returnValue = [];
            rdcr = (a3, [_2, v3]) => [...a3, v3];
          } else if (reducer === "value") {
            returnValue = void 0;
            rdcr = (_2, [__, v3]) => v3;
          } else {
            returnValue = initialValue;
            rdcr = reducer;
          }
          entries.forEach((entry, i3) => returnValue = rdcr(returnValue, entry, i3, entries));
          return returnValue;
        }
        function getDesign() {
          return design;
        }
        function clone() {
          return createState3(design);
        }
        function forceTransition(target, payload) {
          logEvent(`Forced transition to: ${target}`);
          runTransition(target, payload, void 0);
          notifySubscribers();
          return snapshot2;
        }
        function forceData(data2) {
          snapshot2.data = data2;
          logEvent("Forced data.");
          notifySubscribers();
          return snapshot2;
        }
        function reset() {
          stopLoop();
          StateTree.recursivelyEndStateIntervals(snapshot2.stateTree);
          _log = [];
          Object.assign(snapshot2, {
            data: immer_1.produce(design.data, (d4) => d4),
            stateTree: getStateTreeFromDesign_1.getStateTreeFromDesign(design, id2),
            log: []
          });
          StateTree.deactivateState(snapshot2.stateTree);
          runTransition("root", void 0, void 0);
          notifySubscribers();
          return snapshot2;
        }
        const id2 = "#" + (lodash_1.isUndefined(design.id) ? `state_${lodash_1.uniqueId()}` : design.id);
        const initialStateTree = getStateTreeFromDesign_1.getStateTreeFromDesign(design, id2);
        let _log = [];
        let _activeStates = StateTree.getActiveStates(initialStateTree);
        const snapshot2 = {
          id: id2,
          data: immer_1.produce(design.data, (d4) => d4),
          active: getPaths(_activeStates),
          values: getValues(design.data, design.values),
          stateTree: initialStateTree,
          log: _log,
          index: 0,
          send,
          thenSend,
          isIn,
          isInAny,
          can,
          whenIn,
          getDesign,
          onUpdate,
          getUpdate,
          enableLog,
          forceData,
          forceTransition,
          clone,
          reset
        };
        StateTree.deactivateState(snapshot2.stateTree);
        runTransition("root", void 0, void 0);
        setValues();
        setActiveStates();
        setLog();
        return snapshot2;
      }
      exports.createState = createState3;
      function getPaths(states) {
        return states.map((state2) => state2.path);
      }
      function getValues(data2, values2) {
        return Object.entries(values2 || {}).reduce((acc, [key, fn2]) => {
          acc[key] = fn2(data2);
          return acc;
        }, {});
      }
    }
  });

  // node_modules/@state-designer/core/src/index.js
  var require_src = __commonJS({
    "node_modules/@state-designer/core/src/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.createState = exports.createDesign = exports.S = void 0;
      var S4 = require_types();
      exports.S = S4;
      var createDesign_1 = require_createDesign();
      Object.defineProperty(exports, "createDesign", { enumerable: true, get: function() {
        return createDesign_1.createDesign;
      } });
      var createState_1 = require_createState();
      Object.defineProperty(exports, "createState", { enumerable: true, get: function() {
        return createState_1.createState;
      } });
    }
  });

  // node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React10 = require_react();
          var _assign = require_object_assign();
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          exports.Fragment = 60107;
          var REACT_STRICT_MODE_TYPE = 60108;
          var REACT_PROFILER_TYPE = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          var REACT_SUSPENSE_TYPE = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            exports.Fragment = symbolFor("react.fragment");
            REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
            REACT_PROFILER_TYPE = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactSharedInternals = React10.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error2(format) {
            {
              for (var _len2 = arguments.length, args2 = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args2[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args2);
            }
          }
          function printWarning(level, format, args2) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args2 = args2.concat([stack]);
              }
              var argsWithFormat = args2.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var enableScopeAPI = false;
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === exports.Fragment || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
                return true;
              }
            }
            return false;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error2("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case exports.Fragment:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider2 = type;
                  return getContextName(provider2._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentName(init(payload));
                  } catch (x3) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name2, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x3) {
                  var match2 = x3.stack.trim().match(/\n( *(at )?)/);
                  prefix = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix + name2;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn2, construct) {
            if (!fn2 || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn2);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x3) {
                    control = x3;
                  }
                  Reflect.construct(fn2, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x3) {
                    control = x3;
                  }
                  fn2.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x3) {
                  control = x3;
                }
                fn2();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s3 = sampleLines.length - 1;
                var c3 = controlLines.length - 1;
                while (s3 >= 1 && c3 >= 0 && sampleLines[s3] !== controlLines[c3]) {
                  c3--;
                }
                for (; s3 >= 1 && c3 >= 0; s3--, c3--) {
                  if (sampleLines[s3] !== controlLines[c3]) {
                    if (s3 !== 1 || c3 !== 1) {
                      do {
                        s3--;
                        c3--;
                        if (c3 < 0 || sampleLines[s3] !== controlLines[c3]) {
                          var _frame = "\n" + sampleLines[s3].replace(" at new ", " at ");
                          {
                            if (typeof fn2 === "function") {
                              componentFrameCache.set(fn2, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s3 >= 1 && c3 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name2 = fn2 ? fn2.displayName || fn2.name : "";
            var syntheticFrame = name2 ? describeBuiltInComponentFrame(name2) : "";
            {
              if (typeof fn2 === "function") {
                componentFrameCache.set(fn2, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn2, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn2, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x3) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element2) {
            {
              if (element2) {
                var owner = element2._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element2.type, element2._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values2, location2, componentName, element2) {
            {
              var has2 = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element2);
                    error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element2);
                    error2("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty2.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty2.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function warnIfStringRefCannotBeAutoConverted(config, self2) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
                var componentName = getComponentName(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error2('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error2("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error2("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element2 = {
              $$typeof: REACT_ELEMENT_TYPE,
              type,
              key,
              ref,
              props,
              _owner: owner
            };
            {
              element2._store = {};
              Object.defineProperty(element2._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element2, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element2, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element2.props);
                Object.freeze(element2);
              }
            }
            return element2;
          };
          function jsxDEV(type, config, maybeKey, source, self2) {
            {
              var propName;
              var props = {};
              var key = null;
              var ref = null;
              if (maybeKey !== void 0) {
                key = "" + maybeKey;
              }
              if (hasValidKey(config)) {
                key = "" + config.key;
              }
              if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config, self2);
              }
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
              if (type && type.defaultProps) {
                var defaultProps = type.defaultProps;
                for (propName in defaultProps) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps[propName];
                  }
                }
              }
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element2) {
            {
              if (element2) {
                var owner = element2._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element2.type, element2._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement(object4) {
            {
              return typeof object4 === "object" && object4 !== null && object4.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name2 = getComponentName(ReactCurrentOwner$1.current.type);
                if (name2) {
                  return "\n\nCheck the render method of `" + name2 + "`.";
                }
              }
              return "";
            }
          }
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info = getDeclarationErrorAddendum();
              if (!info) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info;
            }
          }
          function validateExplicitKey(element2, parentType) {
            {
              if (!element2._store || element2._store.validated || element2.key != null) {
                return;
              }
              element2._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element2 && element2._owner && element2._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentName(element2._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element2);
              error2('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            {
              if (typeof node !== "object") {
                return;
              }
              if (Array.isArray(node)) {
                for (var i3 = 0; i3 < node.length; i3++) {
                  var child = node[i3];
                  if (isValidElement(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement(node)) {
                if (node._store) {
                  node._store.validated = true;
                }
              } else if (node) {
                var iteratorFn = getIteratorFn(node);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node.entries) {
                    var iterator2 = iteratorFn.call(node);
                    var step;
                    while (!(step = iterator2.next()).done) {
                      if (isValidElement(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element2) {
            {
              var type = element2.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name2 = getComponentName(type);
                checkPropTypes(propTypes, element2.props, "prop", name2, element2);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentName(type);
                error2("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error2("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys5 = Object.keys(fragment.props);
              for (var i3 = 0; i3 < keys5.length; i3++) {
                var key = keys5[i3];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error2("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error2("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
            {
              var validType = isValidElementType(type);
              if (!validType) {
                var info = "";
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type === null) {
                  typeString = "null";
                } else if (Array.isArray(type)) {
                  typeString = "array";
                } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
                  info = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type;
                }
                error2("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
              var element2 = jsxDEV(type, props, key, source, self2);
              if (element2 == null) {
                return element2;
              }
              if (validType) {
                var children = props.children;
                if (children !== void 0) {
                  if (isStaticChildren) {
                    if (Array.isArray(children)) {
                      for (var i3 = 0; i3 < children.length; i3++) {
                        validateChildKeys(children[i3], type);
                      }
                      if (Object.freeze) {
                        Object.freeze(children);
                      }
                    } else {
                      error2("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children, type);
                  }
                }
              }
              if (type === exports.Fragment) {
                validateFragmentProps(element2);
              } else {
                validatePropTypes(element2);
              }
              return element2;
            }
          }
          function jsxWithValidationStatic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, true);
            }
          }
          function jsxWithValidationDynamic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, false);
            }
          }
          var jsx2 = jsxWithValidationDynamic;
          var jsxs2 = jsxWithValidationStatic;
          exports.jsx = jsx2;
          exports.jsxs = jsxs2;
        })();
      }
    }
  });

  // node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "node_modules/react/jsx-runtime.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object4) {
            if (typeof object4 === "object" && object4 !== null) {
              var $$typeof = object4.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object4.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object4) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object4) || typeOf(object4) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object4) {
            return typeOf(object4) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object4) {
            return typeOf(object4) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object4) {
            return typeOf(object4) === REACT_PROVIDER_TYPE;
          }
          function isElement(object4) {
            return typeof object4 === "object" && object4 !== null && object4.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object4) {
            return typeOf(object4) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object4) {
            return typeOf(object4) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object4) {
            return typeOf(object4) === REACT_LAZY_TYPE;
          }
          function isMemo(object4) {
            return typeOf(object4) === REACT_MEMO_TYPE;
          }
          function isPortal(object4) {
            return typeOf(object4) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object4) {
            return typeOf(object4) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object4) {
            return typeOf(object4) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object4) {
            return typeOf(object4) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development();
      }
    }
  });

  // node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS({
    "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
      "use strict";
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      module.exports = ReactPropTypesSecret;
    }
  });

  // node_modules/prop-types/lib/has.js
  var require_has = __commonJS({
    "node_modules/prop-types/lib/has.js"(exports, module) {
      module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
    }
  });

  // node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS({
    "node_modules/prop-types/checkPropTypes.js"(exports, module) {
      "use strict";
      var printWarning = function() {
      };
      if (true) {
        ReactPropTypesSecret = require_ReactPropTypesSecret();
        loggedTypeFailures = {};
        has2 = require_has();
        printWarning = function(text2) {
          var message = "Warning: " + text2;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x3) {
          }
        };
      }
      var ReactPropTypesSecret;
      var loggedTypeFailures;
      var has2;
      function checkPropTypes(typeSpecs, values2, location2, componentName, getStack) {
        if (true) {
          for (var typeSpecName in typeSpecs) {
            if (has2(typeSpecs, typeSpecName)) {
              var error2;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error2 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location2, null, ReactPropTypesSecret);
              } catch (ex) {
                error2 = ex;
              }
              if (error2 && !(error2 instanceof Error)) {
                printWarning((componentName || "React class") + ": type specification of " + location2 + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error2 + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).");
              }
              if (error2 instanceof Error && !(error2.message in loggedTypeFailures)) {
                loggedTypeFailures[error2.message] = true;
                var stack = getStack ? getStack() : "";
                printWarning("Failed " + location2 + " type: " + error2.message + (stack != null ? stack : ""));
              }
            }
          }
        }
      }
      checkPropTypes.resetWarningCache = function() {
        if (true) {
          loggedTypeFailures = {};
        }
      };
      module.exports = checkPropTypes;
    }
  });

  // node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS({
    "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
      "use strict";
      var ReactIs = require_react_is();
      var assign2 = require_object_assign();
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var has2 = require_has();
      var checkPropTypes = require_checkPropTypes();
      var printWarning = function() {
      };
      if (true) {
        printWarning = function(text2) {
          var message = "Warning: " + text2;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x3) {
          }
        };
      }
      function emptyFunctionThatReturnsNull() {
        return null;
      }
      module.exports = function(isValidElement, throwOnDirectAccess) {
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        var ANONYMOUS = "<<anonymous>>";
        var ReactPropTypes = {
          array: createPrimitiveTypeChecker("array"),
          bigint: createPrimitiveTypeChecker("bigint"),
          bool: createPrimitiveTypeChecker("boolean"),
          func: createPrimitiveTypeChecker("function"),
          number: createPrimitiveTypeChecker("number"),
          object: createPrimitiveTypeChecker("object"),
          string: createPrimitiveTypeChecker("string"),
          symbol: createPrimitiveTypeChecker("symbol"),
          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          elementType: createElementTypeTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker,
          exact: createStrictShapeTypeChecker
        };
        function is(x3, y2) {
          if (x3 === y2) {
            return x3 !== 0 || 1 / x3 === 1 / y2;
          } else {
            return x3 !== x3 && y2 !== y2;
          }
        }
        function PropTypeError(message, data2) {
          this.message = message;
          this.data = data2 && typeof data2 === "object" ? data2 : {};
          this.stack = "";
        }
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate) {
          if (true) {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
          }
          function checkType(isRequired, props, propName, componentName, location2, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess) {
                var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
                err.name = "Invariant Violation";
                throw err;
              } else if (typeof console !== "undefined") {
                var cacheKey = componentName + ":" + propName;
                if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                  printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.");
                  manualPropTypeCallCache[cacheKey] = true;
                  manualPropTypeWarningCount++;
                }
              }
            }
            if (props[propName] == null) {
              if (isRequired) {
                if (props[propName] === null) {
                  return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                }
                return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
              }
              return null;
            } else {
              return validate(props, propName, componentName, location2, propFullName);
            }
          }
          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);
          return chainedCheckType;
        }
        function createPrimitiveTypeChecker(expectedType) {
          function validate(props, propName, componentName, location2, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var preciseType = getPreciseType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."), { expectedType });
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        function createArrayOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location2, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
            }
            for (var i3 = 0; i3 < propValue.length; i3++) {
              var error2 = typeChecker(propValue, i3, componentName, location2, propFullName + "[" + i3 + "]", ReactPropTypesSecret);
              if (error2 instanceof Error) {
                return error2;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeChecker() {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            if (!isValidElement(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeTypeChecker() {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createInstanceTypeChecker(expectedClass) {
          function validate(props, propName, componentName, location2, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName(props[propName]);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            if (true) {
              if (arguments.length > 1) {
                printWarning("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).");
              } else {
                printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
            }
            return emptyFunctionThatReturnsNull;
          }
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            for (var i3 = 0; i3 < expectedValues.length; i3++) {
              if (is(propValue, expectedValues[i3])) {
                return null;
              }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
              var type = getPreciseType(value);
              if (type === "symbol") {
                return String(value);
              }
              return value;
            });
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createObjectOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location2, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
            }
            for (var key in propValue) {
              if (has2(propValue, key)) {
                var error2 = typeChecker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
                if (error2 instanceof Error) {
                  return error2;
                }
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
            return emptyFunctionThatReturnsNull;
          }
          for (var i3 = 0; i3 < arrayOfTypeCheckers.length; i3++) {
            var checker = arrayOfTypeCheckers[i3];
            if (typeof checker !== "function") {
              printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i3 + ".");
              return emptyFunctionThatReturnsNull;
            }
          }
          function validate(props, propName, componentName, location2, propFullName) {
            var expectedTypes = [];
            for (var i4 = 0; i4 < arrayOfTypeCheckers.length; i4++) {
              var checker2 = arrayOfTypeCheckers[i4];
              var checkerResult = checker2(props, propName, componentName, location2, propFullName, ReactPropTypesSecret);
              if (checkerResult == null) {
                return null;
              }
              if (checkerResult.data && has2(checkerResult.data, "expectedType")) {
                expectedTypes.push(checkerResult.data.expectedType);
              }
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createNodeChecker() {
          function validate(props, propName, componentName, location2, propFullName) {
            if (!isNode2(props[propName])) {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function invalidValidatorError(componentName, location2, propFullName, key, type) {
          return new PropTypeError((componentName || "React class") + ": " + location2 + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`.");
        }
        function createShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            for (var key in shapeTypes) {
              var checker = shapeTypes[key];
              if (typeof checker !== "function") {
                return invalidValidatorError(componentName, location2, propFullName, key, getPreciseType(checker));
              }
              var error2 = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
              if (error2) {
                return error2;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createStrictShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            var allKeys = assign2({}, props[propName], shapeTypes);
            for (var key in allKeys) {
              var checker = shapeTypes[key];
              if (has2(shapeTypes, key) && typeof checker !== "function") {
                return invalidValidatorError(componentName, location2, propFullName, key, getPreciseType(checker));
              }
              if (!checker) {
                return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  "));
              }
              var error2 = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
              if (error2) {
                return error2;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function isNode2(propValue) {
          switch (typeof propValue) {
            case "number":
            case "string":
            case "undefined":
              return true;
            case "boolean":
              return !propValue;
            case "object":
              if (Array.isArray(propValue)) {
                return propValue.every(isNode2);
              }
              if (propValue === null || isValidElement(propValue)) {
                return true;
              }
              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator2 = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator2.next()).done) {
                    if (!isNode2(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator2.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode2(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }
              return true;
            default:
              return false;
          }
        }
        function isSymbol(propType, propValue) {
          if (propType === "symbol") {
            return true;
          }
          if (!propValue) {
            return false;
          }
          if (propValue["@@toStringTag"] === "Symbol") {
            return true;
          }
          if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
          }
          return false;
        }
        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return "array";
          }
          if (propValue instanceof RegExp) {
            return "object";
          }
          if (isSymbol(propType, propValue)) {
            return "symbol";
          }
          return propType;
        }
        function getPreciseType(propValue) {
          if (typeof propValue === "undefined" || propValue === null) {
            return "" + propValue;
          }
          var propType = getPropType(propValue);
          if (propType === "object") {
            if (propValue instanceof Date) {
              return "date";
            } else if (propValue instanceof RegExp) {
              return "regexp";
            }
          }
          return propType;
        }
        function getPostfixForTypeWarning(value) {
          var type = getPreciseType(value);
          switch (type) {
            case "array":
            case "object":
              return "an " + type;
            case "boolean":
            case "date":
            case "regexp":
              return "a " + type;
            default:
              return type;
          }
        }
        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }
        ReactPropTypes.checkPropTypes = checkPropTypes;
        ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
    }
  });

  // node_modules/prop-types/index.js
  var require_prop_types = __commonJS({
    "node_modules/prop-types/index.js"(exports, module) {
      if (true) {
        ReactIs = require_react_is();
        throwOnDirectAccess = true;
        module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
      } else {
        module.exports = null();
      }
      var ReactIs;
      var throwOnDirectAccess;
    }
  });

  // src/index.tsx
  var import_react67 = __toModule(require_react());
  var import_react_dom = __toModule(require_react_dom());

  // src/app.tsx
  var React8 = __toModule(require_react());

  // node_modules/@tldraw/core/dist/esm/index.js
  var import_react = __toModule(require_react());
  var import_react2 = __toModule(require_react());
  var import_react3 = __toModule(require_react());
  var import_react4 = __toModule(require_react());
  var import_react5 = __toModule(require_react());

  // node_modules/@tldraw/vec/dist/esm/index.js
  var t = class {
    static clamp(r2, n2, u2) {
      return Math.max(n2, typeof u2 != "undefined" ? Math.min(r2, u2) : r2);
    }
    static clampV(r2, n2, u2) {
      return r2.map((m3) => u2 ? t.clamp(m3, n2, u2) : t.clamp(m3, n2));
    }
    static cross(r2, n2, u2) {
      return (n2[0] - r2[0]) * (u2[1] - r2[1]) - (u2[0] - r2[0]) * (n2[1] - r2[1]);
    }
  };
  var e = t;
  e.neg = (r2) => [-r2[0], -r2[1]], e.add = (r2, n2) => [r2[0] + n2[0], r2[1] + n2[1]], e.addScalar = (r2, n2) => [r2[0] + n2, r2[1] + n2], e.sub = (r2, n2) => [r2[0] - n2[0], r2[1] - n2[1]], e.subScalar = (r2, n2) => [r2[0] - n2, r2[1] - n2], e.vec = (r2, n2) => [n2[0] - r2[0], n2[1] - r2[1]], e.mul = (r2, n2) => [r2[0] * n2, r2[1] * n2], e.mulV = (r2, n2) => [r2[0] * n2[0], r2[1] * n2[1]], e.div = (r2, n2) => [r2[0] / n2, r2[1] / n2], e.divV = (r2, n2) => [r2[0] / n2[0], r2[1] / n2[1]], e.per = (r2) => [r2[1], -r2[0]], e.dpr = (r2, n2) => r2[0] * n2[0] + r2[1] * n2[1], e.cpr = (r2, n2) => r2[0] * n2[1] - n2[0] * r2[1], e.len2 = (r2) => r2[0] * r2[0] + r2[1] * r2[1], e.len = (r2) => Math.hypot(r2[0], r2[1]), e.pry = (r2, n2) => t.dpr(r2, n2) / t.len(n2), e.uni = (r2) => t.div(r2, t.len(r2)), e.normalize = (r2) => t.uni(r2), e.tangent = (r2, n2) => t.uni(t.sub(r2, n2)), e.dist2 = (r2, n2) => t.len2(t.sub(r2, n2)), e.dist = (r2, n2) => Math.hypot(r2[1] - n2[1], r2[0] - n2[0]), e.fastDist = (r2, n2) => {
    let u2 = [n2[0] - r2[0], n2[1] - r2[1]], m3 = [Math.abs(u2[0]), Math.abs(u2[1])], b3 = 1 / Math.max(m3[0], m3[1]);
    return b3 = b3 * (1.29289 - (m3[0] + m3[1]) * b3 * 0.29289), [u2[0] * b3, u2[1] * b3];
  }, e.ang = (r2, n2) => Math.atan2(t.cpr(r2, n2), t.dpr(r2, n2)), e.angle = (r2, n2) => Math.atan2(n2[1] - r2[1], n2[0] - r2[0]), e.med = (r2, n2) => t.mul(t.add(r2, n2), 0.5), e.rot = (r2, n2 = 0) => [r2[0] * Math.cos(n2) - r2[1] * Math.sin(n2), r2[0] * Math.sin(n2) + r2[1] * Math.cos(n2)], e.rotWith = (r2, n2, u2 = 0) => {
    if (u2 === 0)
      return r2;
    let m3 = Math.sin(u2), b3 = Math.cos(u2), a3 = r2[0] - n2[0], s3 = r2[1] - n2[1], i3 = a3 * b3 - s3 * m3, o3 = a3 * m3 + s3 * b3;
    return [i3 + n2[0], o3 + n2[1]];
  }, e.isEqual = (r2, n2) => r2[0] === n2[0] && r2[1] === n2[1], e.lrp = (r2, n2, u2) => t.add(r2, t.mul(t.sub(n2, r2), u2)), e.int = (r2, n2, u2, m3, b3 = 1) => {
    let a3 = (t.clamp(u2, m3) - u2) / (m3 - u2);
    return t.add(t.mul(r2, 1 - a3), t.mul(n2, b3));
  }, e.ang3 = (r2, n2, u2) => {
    let m3 = t.vec(n2, r2), b3 = t.vec(n2, u2);
    return t.ang(m3, b3);
  }, e.abs = (r2) => [Math.abs(r2[0]), Math.abs(r2[1])], e.rescale = (r2, n2) => {
    let u2 = t.len(r2);
    return [n2 * r2[0] / u2, n2 * r2[1] / u2];
  }, e.isLeft = (r2, n2, u2) => (n2[0] - r2[0]) * (u2[1] - r2[1]) - (u2[0] - r2[0]) * (n2[1] - r2[1]), e.clockwise = (r2, n2, u2) => t.isLeft(r2, n2, u2) > 0, e.round = (r2, n2 = 2) => r2.map((u2) => +u2.toFixed(n2)), e.nearestPointOnLineThroughPoint = (r2, n2, u2) => t.add(r2, t.mul(n2, t.pry(t.sub(u2, r2), n2))), e.distanceToLineThroughPoint = (r2, n2, u2) => t.dist(u2, t.nearestPointOnLineThroughPoint(r2, n2, u2)), e.nearestPointOnLineSegment = (r2, n2, u2, m3 = true) => {
    let b3 = t.uni(t.sub(n2, r2)), a3 = t.add(r2, t.mul(b3, t.pry(t.sub(u2, r2), b3)));
    if (m3) {
      if (a3[0] < Math.min(r2[0], n2[0]))
        return r2[0] < n2[0] ? r2 : n2;
      if (a3[0] > Math.max(r2[0], n2[0]))
        return r2[0] > n2[0] ? r2 : n2;
      if (a3[1] < Math.min(r2[1], n2[1]))
        return r2[1] < n2[1] ? r2 : n2;
      if (a3[1] > Math.max(r2[1], n2[1]))
        return r2[1] > n2[1] ? r2 : n2;
    }
    return a3;
  }, e.distanceToLineSegment = (r2, n2, u2, m3 = true) => t.dist(u2, t.nearestPointOnLineSegment(r2, n2, u2, m3)), e.nudge = (r2, n2, u2) => t.add(r2, t.mul(t.uni(t.sub(n2, r2)), u2)), e.nudgeAtAngle = (r2, n2, u2) => [Math.cos(n2) * u2 + r2[0], Math.sin(n2) * u2 + r2[1]], e.toPrecision = (r2, n2 = 4) => [+r2[0].toPrecision(n2), +r2[1].toPrecision(n2)], e.pointsBetween = (r2, n2, u2 = 6) => Array.from(Array(u2)).map((m3, b3) => {
    let a3 = b3 / (u2 - 1), s3 = Math.min(1, 0.5 + Math.abs(0.5 - a3));
    return [...t.lrp(r2, n2, a3), s3];
  });
  var c = e;

  // node_modules/@tldraw/core/dist/esm/index.js
  var import_react6 = __toModule(require_react());
  var import_react7 = __toModule(require_react());
  var import_react8 = __toModule(require_react());
  var import_react9 = __toModule(require_react());
  var import_react10 = __toModule(require_react());
  var import_react11 = __toModule(require_react());
  var import_react12 = __toModule(require_react());
  var import_react13 = __toModule(require_react());
  var import_react14 = __toModule(require_react());
  var import_react15 = __toModule(require_react());
  var import_react16 = __toModule(require_react());
  var import_react17 = __toModule(require_react());
  var import_react18 = __toModule(require_react());
  var import_react19 = __toModule(require_react());
  var import_react20 = __toModule(require_react());
  var import_react21 = __toModule(require_react());
  var import_react22 = __toModule(require_react());
  var import_react23 = __toModule(require_react());
  var import_react24 = __toModule(require_react());
  var import_react25 = __toModule(require_react());
  var import_react26 = __toModule(require_react());
  var import_react27 = __toModule(require_react());
  var import_react28 = __toModule(require_react());
  var import_react29 = __toModule(require_react());
  var import_react30 = __toModule(require_react());
  var import_react31 = __toModule(require_react());
  var import_react32 = __toModule(require_react());
  var import_react33 = __toModule(require_react());
  var import_react34 = __toModule(require_react());
  var import_react35 = __toModule(require_react());
  var import_react36 = __toModule(require_react());
  var import_react37 = __toModule(require_react());
  var import_react38 = __toModule(require_react());
  var import_react39 = __toModule(require_react());
  var import_react40 = __toModule(require_react());
  var import_react41 = __toModule(require_react());
  var import_react42 = __toModule(require_react());
  var import_react43 = __toModule(require_react());
  var import_react44 = __toModule(require_react());
  var import_react45 = __toModule(require_react());
  var import_react46 = __toModule(require_react());
  var import_react47 = __toModule(require_react());
  var import_react48 = __toModule(require_react());

  // node_modules/@tldraw/intersect/node_modules/@tldraw/vec/dist/index.mjs
  var h = Object.defineProperty;
  var d = (s3, n2, r2) => n2 in s3 ? h(s3, n2, { enumerable: true, configurable: true, writable: true, value: r2 }) : s3[n2] = r2;
  var m = (s3, n2, r2) => (d(s3, typeof n2 != "symbol" ? n2 + "" : n2, r2), r2);
  var t2 = class {
    static clamp(n2, r2, u2) {
      return Math.max(r2, typeof u2 != "undefined" ? Math.min(n2, u2) : n2);
    }
    static clampV(n2, r2, u2) {
      return n2.map((b3) => u2 ? t2.clamp(b3, r2, u2) : t2.clamp(b3, r2));
    }
    static cross(n2, r2, u2) {
      return (r2[0] - n2[0]) * (u2[1] - n2[1]) - (u2[0] - n2[0]) * (r2[1] - n2[1]);
    }
    static snap(n2, r2 = 1) {
      return [Math.round(n2[0] / r2) * r2, Math.round(n2[1] / r2) * r2];
    }
  };
  var e2 = t2;
  m(e2, "neg", (n2) => [-n2[0], -n2[1]]), m(e2, "add", (n2, r2) => [n2[0] + r2[0], n2[1] + r2[1]]), m(e2, "addScalar", (n2, r2) => [n2[0] + r2, n2[1] + r2]), m(e2, "sub", (n2, r2) => [n2[0] - r2[0], n2[1] - r2[1]]), m(e2, "subScalar", (n2, r2) => [n2[0] - r2, n2[1] - r2]), m(e2, "vec", (n2, r2) => [r2[0] - n2[0], r2[1] - n2[1]]), m(e2, "mul", (n2, r2) => [n2[0] * r2, n2[1] * r2]), m(e2, "mulV", (n2, r2) => [n2[0] * r2[0], n2[1] * r2[1]]), m(e2, "div", (n2, r2) => [n2[0] / r2, n2[1] / r2]), m(e2, "divV", (n2, r2) => [n2[0] / r2[0], n2[1] / r2[1]]), m(e2, "per", (n2) => [n2[1], -n2[0]]), m(e2, "dpr", (n2, r2) => n2[0] * r2[0] + n2[1] * r2[1]), m(e2, "cpr", (n2, r2) => n2[0] * r2[1] - r2[0] * n2[1]), m(e2, "len2", (n2) => n2[0] * n2[0] + n2[1] * n2[1]), m(e2, "len", (n2) => Math.hypot(n2[0], n2[1])), m(e2, "pry", (n2, r2) => t2.dpr(n2, r2) / t2.len(r2)), m(e2, "uni", (n2) => t2.div(n2, t2.len(n2))), m(e2, "normalize", (n2) => t2.uni(n2)), m(e2, "tangent", (n2, r2) => t2.uni(t2.sub(n2, r2))), m(e2, "dist2", (n2, r2) => t2.len2(t2.sub(n2, r2))), m(e2, "dist", (n2, r2) => Math.hypot(n2[1] - r2[1], n2[0] - r2[0])), m(e2, "fastDist", (n2, r2) => {
    let u2 = [r2[0] - n2[0], r2[1] - n2[1]], b3 = [Math.abs(u2[0]), Math.abs(u2[1])], a3 = 1 / Math.max(b3[0], b3[1]);
    return a3 = a3 * (1.29289 - (b3[0] + b3[1]) * a3 * 0.29289), [u2[0] * a3, u2[1] * a3];
  }), m(e2, "ang", (n2, r2) => Math.atan2(t2.cpr(n2, r2), t2.dpr(n2, r2))), m(e2, "angle", (n2, r2) => Math.atan2(r2[1] - n2[1], r2[0] - n2[0])), m(e2, "med", (n2, r2) => t2.mul(t2.add(n2, r2), 0.5)), m(e2, "rot", (n2, r2 = 0) => [n2[0] * Math.cos(r2) - n2[1] * Math.sin(r2), n2[0] * Math.sin(r2) + n2[1] * Math.cos(r2)]), m(e2, "rotWith", (n2, r2, u2 = 0) => {
    if (u2 === 0)
      return n2;
    let b3 = Math.sin(u2), a3 = Math.cos(u2), i3 = n2[0] - r2[0], o3 = n2[1] - r2[1], c3 = i3 * a3 - o3 * b3, l2 = i3 * b3 + o3 * a3;
    return [c3 + r2[0], l2 + r2[1]];
  }), m(e2, "isEqual", (n2, r2) => n2[0] === r2[0] && n2[1] === r2[1]), m(e2, "lrp", (n2, r2, u2) => t2.add(n2, t2.mul(t2.sub(r2, n2), u2))), m(e2, "int", (n2, r2, u2, b3, a3 = 1) => {
    let i3 = (t2.clamp(u2, b3) - u2) / (b3 - u2);
    return t2.add(t2.mul(n2, 1 - i3), t2.mul(r2, a3));
  }), m(e2, "ang3", (n2, r2, u2) => {
    let b3 = t2.vec(r2, n2), a3 = t2.vec(r2, u2);
    return t2.ang(b3, a3);
  }), m(e2, "abs", (n2) => [Math.abs(n2[0]), Math.abs(n2[1])]), m(e2, "rescale", (n2, r2) => {
    let u2 = t2.len(n2);
    return [r2 * n2[0] / u2, r2 * n2[1] / u2];
  }), m(e2, "isLeft", (n2, r2, u2) => (r2[0] - n2[0]) * (u2[1] - n2[1]) - (u2[0] - n2[0]) * (r2[1] - n2[1])), m(e2, "clockwise", (n2, r2, u2) => t2.isLeft(n2, r2, u2) > 0), m(e2, "toFixed", (n2) => n2.map((r2) => Math.round(r2 * 100) / 100)), m(e2, "nearestPointOnLineThroughPoint", (n2, r2, u2) => t2.add(n2, t2.mul(r2, t2.pry(t2.sub(u2, n2), r2)))), m(e2, "distanceToLineThroughPoint", (n2, r2, u2) => t2.dist(u2, t2.nearestPointOnLineThroughPoint(n2, r2, u2))), m(e2, "nearestPointOnLineSegment", (n2, r2, u2, b3 = true) => {
    let a3 = t2.uni(t2.sub(r2, n2)), i3 = t2.add(n2, t2.mul(a3, t2.pry(t2.sub(u2, n2), a3)));
    if (b3) {
      if (i3[0] < Math.min(n2[0], r2[0]))
        return n2[0] < r2[0] ? n2 : r2;
      if (i3[0] > Math.max(n2[0], r2[0]))
        return n2[0] > r2[0] ? n2 : r2;
      if (i3[1] < Math.min(n2[1], r2[1]))
        return n2[1] < r2[1] ? n2 : r2;
      if (i3[1] > Math.max(n2[1], r2[1]))
        return n2[1] > r2[1] ? n2 : r2;
    }
    return i3;
  }), m(e2, "distanceToLineSegment", (n2, r2, u2, b3 = true) => t2.dist(u2, t2.nearestPointOnLineSegment(n2, r2, u2, b3))), m(e2, "nearestPointOnBounds", (n2, r2) => [t2.clamp(r2[0], n2.minX, n2.maxX), t2.clamp(r2[1], n2.minY, n2.maxY)]), m(e2, "distanceToBounds", (n2, r2) => t2.dist(r2, t2.nearestPointOnBounds(n2, r2))), m(e2, "nudge", (n2, r2, u2) => t2.isEqual(n2, r2) ? n2 : t2.add(n2, t2.mul(t2.uni(t2.sub(r2, n2)), u2))), m(e2, "nudgeAtAngle", (n2, r2, u2) => [Math.cos(r2) * u2 + n2[0], Math.sin(r2) * u2 + n2[1]]), m(e2, "toPrecision", (n2, r2 = 4) => [+n2[0].toPrecision(r2), +n2[1].toPrecision(r2)]), m(e2, "pointsBetween", (n2, r2, u2 = 6) => Array.from(Array(u2)).map((b3, a3) => {
    let i3 = a3 / (u2 - 1), o3 = Math.min(1, 0.5 + Math.abs(0.5 - i3));
    return [...t2.lrp(n2, r2, i3), o3];
  })), m(e2, "slope", (n2, r2) => n2[0] === r2[0] ? NaN : (n2[1] - r2[1]) / (n2[0] - r2[0])), m(e2, "max", (...n2) => [Math.max(...n2.map((r2) => r2[0])), Math.max(...n2.map((r2) => r2[1]))]), m(e2, "min", (...n2) => [Math.min(...n2.map((r2) => r2[0])), Math.min(...n2.map((r2) => r2[1]))]);

  // node_modules/@tldraw/intersect/dist/index.mjs
  function createIntersection(message, ...points) {
    const didIntersect = points.length > 0;
    return { didIntersect, message, points };
  }
  function getRectangleSides(point, size, rotation = 0) {
    const center = [point[0] + size[0] / 2, point[1] + size[1] / 2];
    const tl = e2.rotWith(point, center, rotation);
    const tr2 = e2.rotWith(e2.add(point, [size[0], 0]), center, rotation);
    const br2 = e2.rotWith(e2.add(point, size), center, rotation);
    const bl = e2.rotWith(e2.add(point, [0, size[1]]), center, rotation);
    return [
      ["top", [tl, tr2]],
      ["right", [tr2, br2]],
      ["bottom", [br2, bl]],
      ["left", [bl, tl]]
    ];
  }
  function intersectLineSegmentLineSegment(a1, a22, b1, b22) {
    const AB = e2.sub(a1, b1);
    const BV = e2.sub(b22, b1);
    const AV = e2.sub(a22, a1);
    const ua_t = BV[0] * AB[1] - BV[1] * AB[0];
    const ub_t = AV[0] * AB[1] - AV[1] * AB[0];
    const u_b = BV[1] * AV[0] - BV[0] * AV[1];
    if (ua_t === 0 || ub_t === 0) {
      return createIntersection("coincident");
    }
    if (u_b === 0) {
      return createIntersection("parallel");
    }
    if (u_b !== 0) {
      const ua = ua_t / u_b;
      const ub = ub_t / u_b;
      if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {
        return createIntersection("intersection", e2.add(a1, e2.mul(AV, ua)));
      }
    }
    return createIntersection("no intersection");
  }
  function intersectLineSegmentPolyline(a1, a22, points) {
    const pts = [];
    for (let i3 = 1; i3 < points.length; i3++) {
      const int = intersectLineSegmentLineSegment(a1, a22, points[i3 - 1], points[i3]);
      if (int) {
        pts.push(...int.points);
      }
    }
    if (pts.length === 0) {
      return createIntersection("no intersection");
    }
    return createIntersection("intersection", ...points);
  }
  function intersectRectanglePolyline(point, size, points) {
    const sideIntersections = getRectangleSides(point, size).reduce((acc, [message, [a1, a22]]) => {
      const intersection = intersectLineSegmentPolyline(a1, a22, points);
      if (intersection.didIntersect) {
        acc.push(createIntersection(message, ...intersection.points));
      }
      return acc;
    }, []);
    return sideIntersections.filter((int) => int.didIntersect);
  }
  function intersectPolylineBounds(points, bounds) {
    return intersectRectanglePolyline([bounds.minX, bounds.minY], [bounds.width, bounds.height], points);
  }

  // node_modules/@tldraw/core/dist/esm/index.js
  var _n = Object.defineProperty;
  var Dn = Object.defineProperties;
  var Un = Object.getOwnPropertyDescriptors;
  var Ee = Object.getOwnPropertySymbols;
  var ct = Object.prototype.hasOwnProperty;
  var ut = Object.prototype.propertyIsEnumerable;
  var lt = (r2, e4, t4) => e4 in r2 ? _n(r2, e4, { enumerable: true, configurable: true, writable: true, value: t4 }) : r2[e4] = t4;
  var L = (r2, e4) => {
    for (var t4 in e4 || (e4 = {}))
      ct.call(e4, t4) && lt(r2, t4, e4[t4]);
    if (Ee)
      for (var t4 of Ee(e4))
        ut.call(e4, t4) && lt(r2, t4, e4[t4]);
    return r2;
  };
  var A = (r2, e4) => Dn(r2, Un(e4));
  var Q = (r2, e4) => {
    var t4 = {};
    for (var n2 in r2)
      ct.call(r2, n2) && e4.indexOf(n2) < 0 && (t4[n2] = r2[n2]);
    if (r2 != null && Ee)
      for (var n2 of Ee(r2))
        e4.indexOf(n2) < 0 && ut.call(r2, n2) && (t4[n2] = r2[n2]);
    return t4;
  };
  var ie = (0, import_react3.createContext)({});
  function P() {
    return (0, import_react3.useContext)(ie);
  }
  function Xn(r2, e4, t4) {
    return Math.max(e4, Math.min(r2, t4));
  }
  var C = { toVector(r2, e4) {
    return r2 === void 0 && (r2 = e4), Array.isArray(r2) ? r2 : [r2, r2];
  }, add(r2, e4) {
    return [r2[0] + e4[0], r2[1] + e4[1]];
  }, sub(r2, e4) {
    return [r2[0] - e4[0], r2[1] - e4[1]];
  }, addTo(r2, e4) {
    r2[0] += e4[0], r2[1] += e4[1];
  }, subTo(r2, e4) {
    r2[0] -= e4[0], r2[1] -= e4[1];
  } };
  function dt(r2, e4, t4) {
    return e4 === 0 || Math.abs(e4) === 1 / 0 ? Math.pow(r2, t4 * 5) : r2 * e4 * t4 / (e4 + t4 * r2);
  }
  function pt(r2, e4, t4, n2 = 0.15) {
    return n2 === 0 ? Xn(r2, e4, t4) : r2 < e4 ? -dt(e4 - r2, t4 - e4, n2) + e4 : r2 > t4 ? +dt(r2 - t4, t4 - e4, n2) + t4 : r2;
  }
  function ht(r2, [e4, t4], [n2, o3]) {
    let [[s3, a3], [c3, i3]] = r2;
    return [pt(e4, s3, a3, n2), pt(t4, c3, i3, o3)];
  }
  function H(r2, e4, t4) {
    return e4 in r2 ? Object.defineProperty(r2, e4, { value: t4, enumerable: true, configurable: true, writable: true }) : r2[e4] = t4, r2;
  }
  function mt(r2, e4) {
    var t4 = Object.keys(r2);
    if (Object.getOwnPropertySymbols) {
      var n2 = Object.getOwnPropertySymbols(r2);
      e4 && (n2 = n2.filter(function(o3) {
        return Object.getOwnPropertyDescriptor(r2, o3).enumerable;
      })), t4.push.apply(t4, n2);
    }
    return t4;
  }
  function D(r2) {
    for (var e4 = 1; e4 < arguments.length; e4++) {
      var t4 = arguments[e4] != null ? arguments[e4] : {};
      e4 % 2 ? mt(Object(t4), true).forEach(function(n2) {
        H(r2, n2, t4[n2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(r2, Object.getOwnPropertyDescriptors(t4)) : mt(Object(t4)).forEach(function(n2) {
        Object.defineProperty(r2, n2, Object.getOwnPropertyDescriptor(t4, n2));
      });
    }
    return r2;
  }
  var ft = { pointer: { start: "down", change: "move", end: "up" }, mouse: { start: "down", change: "move", end: "up" }, touch: { start: "start", change: "move", end: "end" }, gesture: { start: "start", change: "change", end: "end" } };
  function gt(r2) {
    return r2 ? r2[0].toUpperCase() + r2.slice(1) : "";
  }
  function Tt(r2, e4 = "", t4 = false) {
    let n2 = ft[r2], o3 = n2 && n2[e4] || e4;
    return "on" + gt(r2) + gt(o3) + (t4 ? "Capture" : "");
  }
  function vt(r2, e4 = "") {
    let t4 = ft[r2], n2 = t4 && t4[e4] || e4;
    return r2 + n2;
  }
  function xe(r2) {
    return "touches" in r2;
  }
  function Yn(r2) {
    return Array.from(r2.touches).filter((e4) => {
      var t4, n2;
      return e4.target === r2.currentTarget || ((t4 = r2.currentTarget) === null || t4 === void 0 || (n2 = t4.contains) === null || n2 === void 0 ? void 0 : n2.call(t4, e4.target));
    });
  }
  function On(r2) {
    return r2.type === "touchend" ? r2.changedTouches : r2.targetTouches;
  }
  function yt(r2) {
    return xe(r2) ? On(r2)[0] : r2;
  }
  function He(r2, e4) {
    let t4 = e4.clientX - r2.clientX, n2 = e4.clientY - r2.clientY, o3 = (e4.clientX + r2.clientX) / 2, s3 = (e4.clientY + r2.clientY) / 2, a3 = Math.hypot(t4, n2);
    return { angle: -(Math.atan2(t4, n2) * 180) / Math.PI, distance: a3, origin: [o3, s3] };
  }
  function bt(r2) {
    return Yn(r2).map((e4) => e4.identifier);
  }
  function Lt(r2, e4) {
    let [t4, n2] = Array.from(r2.touches).filter((o3) => e4.includes(o3.identifier));
    return He(t4, n2);
  }
  function _e(r2) {
    let e4 = yt(r2);
    return xe(r2) ? e4.identifier : e4.pointerId;
  }
  function ee(r2) {
    let e4 = yt(r2);
    return [e4.clientX, e4.clientY];
  }
  var Et = 40;
  var xt = 800;
  function Pt(r2) {
    let { deltaX: e4, deltaY: t4, deltaMode: n2 } = r2;
    return n2 === 1 ? (e4 *= Et, t4 *= Et) : n2 === 2 && (e4 *= xt, t4 *= xt), [e4, t4];
  }
  function Nn(r2) {
    var e4, t4;
    let { scrollX: n2, scrollY: o3, scrollLeft: s3, scrollTop: a3 } = r2.currentTarget;
    return [(e4 = n2 != null ? n2 : s3) !== null && e4 !== void 0 ? e4 : 0, (t4 = o3 != null ? o3 : a3) !== null && t4 !== void 0 ? t4 : 0];
  }
  function Fn(r2) {
    let e4 = {};
    if ("buttons" in r2 && (e4.buttons = r2.buttons), "shiftKey" in r2) {
      let { shiftKey: t4, altKey: n2, metaKey: o3, ctrlKey: s3 } = r2;
      Object.assign(e4, { shiftKey: t4, altKey: n2, metaKey: o3, ctrlKey: s3 });
    }
    return e4;
  }
  function Pe(r2, ...e4) {
    return typeof r2 == "function" ? r2(...e4) : r2;
  }
  function Wn() {
  }
  function Rt(...r2) {
    return r2.length === 0 ? Wn : r2.length === 1 ? r2[0] : function() {
      let e4;
      for (let t4 of r2)
        e4 = t4.apply(this, arguments) || e4;
      return e4;
    };
  }
  function wt(r2, e4) {
    return Object.assign({}, e4, r2 || {});
  }
  var Vn = 32;
  var De = class {
    constructor(e4, t4, n2) {
      this.ctrl = e4, this.args = t4, this.key = n2, this.state || (this.state = { values: [0, 0], initial: [0, 0] }, this.init && this.init(), this.reset());
    }
    get state() {
      return this.ctrl.state[this.key];
    }
    set state(e4) {
      this.ctrl.state[this.key] = e4;
    }
    get shared() {
      return this.ctrl.state.shared;
    }
    get eventStore() {
      return this.ctrl.gestureEventStores[this.key];
    }
    get timeoutStore() {
      return this.ctrl.gestureTimeoutStores[this.key];
    }
    get config() {
      return this.ctrl.config[this.key];
    }
    get sharedConfig() {
      return this.ctrl.config.shared;
    }
    get handler() {
      return this.ctrl.handlers[this.key];
    }
    reset() {
      let { state: e4, shared: t4, config: n2, ingKey: o3, args: s3 } = this, { transform: a3, threshold: c3 = [0, 0] } = n2;
      t4[o3] = e4._active = e4.active = e4._blocked = e4._force = false, e4._step = [false, false], e4.intentional = false, e4._movement = [0, 0], e4._distance = [0, 0], e4._delta = [0, 0], e4._threshold = C.sub(a3(c3), a3([0, 0])).map(Math.abs), e4._bounds = [[-1 / 0, 1 / 0], [-1 / 0, 1 / 0]], e4.args = s3, e4.axis = void 0, e4.memo = void 0, e4.elapsedTime = 0, e4.direction = [0, 0], e4.distance = [0, 0], e4.velocity = [0, 0], e4.movement = [0, 0], e4.delta = [0, 0], e4.timeStamp = 0;
    }
    start(e4) {
      let t4 = this.state, n2 = this.config;
      t4._active || (this.reset(), t4._active = true, t4.target = e4.target, t4.currentTarget = e4.currentTarget, t4.initial = t4.values, t4.lastOffset = n2.from ? Pe(n2.from, t4) : t4.offset, t4.offset = t4.lastOffset), t4.startTime = t4.timeStamp = e4.timeStamp;
    }
    compute(e4) {
      let { state: t4, config: n2, shared: o3 } = this;
      t4.args = this.args;
      let s3 = 0;
      if (e4 && (t4.event = e4, n2.preventDefault && e4.cancelable && t4.event.preventDefault(), t4.type = e4.type, o3.touches = this.ctrl.pointerIds.size || this.ctrl.touchIds.size, o3.locked = !!document.pointerLockElement, Object.assign(o3, Fn(e4)), o3.down = o3.pressed = o3.buttons % 2 == 1 || o3.touches > 0, s3 = e4.timeStamp - t4.timeStamp, t4.timeStamp = e4.timeStamp, t4.elapsedTime = t4.timeStamp - t4.startTime), t4._active) {
        let f5 = t4._delta.map(Math.abs);
        C.addTo(t4._distance, f5);
      }
      let [a3, c3] = n2.transform(t4._movement), [i3, l2] = t4._threshold, [u2, d4] = t4._step;
      if (u2 === false && (u2 = Math.abs(a3) >= i3 && Math.sign(a3) * i3), d4 === false && (d4 = Math.abs(c3) >= l2 && Math.sign(c3) * l2), t4.intentional = u2 !== false || d4 !== false, !t4.intentional)
        return;
      t4._step = [u2, d4];
      let p3 = [0, 0];
      if (p3[0] = u2 !== false ? a3 - u2 : 0, p3[1] = d4 !== false ? c3 - d4 : 0, this.intent && this.intent(p3), (t4._active && !t4._blocked || t4.active) && (t4.first = t4._active && !t4.active, t4.last = !t4._active && t4.active, t4.active = o3[this.ingKey] = t4._active, e4)) {
        t4.first && ("bounds" in n2 && (t4._bounds = Pe(n2.bounds, t4)), this.setup && this.setup()), t4.movement = p3;
        let f5 = t4.offset;
        if (this.computeOffset(), !t4.last || s3 > Vn) {
          t4.delta = C.sub(t4.offset, f5);
          let T2 = t4.delta.map(Math.abs);
          C.addTo(t4.distance, T2), t4.direction = t4.delta.map(Math.sign), !t4.first && s3 > 0 && (t4.velocity = [T2[0] / s3, T2[1] / s3]);
        }
      }
      let h4 = t4._active ? n2.rubberband || [0, 0] : [0, 0];
      t4.offset = ht(t4._bounds, t4.offset, h4), this.computeMovement();
    }
    emit() {
      let e4 = this.state, t4 = this.shared, n2 = this.config;
      if (e4._active || this.clean(), (e4._blocked || !e4.intentional) && !e4._force && !n2.triggerAllEvents)
        return;
      let o3 = this.handler(D(D(D({}, t4), e4), {}, { [this.aliasKey]: e4.values }));
      o3 !== void 0 && (e4.memo = o3);
    }
    clean() {
      this.eventStore.clean(), this.timeoutStore.clean();
    }
  };
  function $n([r2, e4]) {
    let t4 = Math.abs(r2) - Math.abs(e4);
    if (t4 > 0)
      return "x";
    if (t4 < 0)
      return "y";
  }
  function jn(r2, e4) {
    switch (e4) {
      case "x":
        r2[1] = 0;
        break;
      case "y":
        r2[0] = 0;
        break;
    }
  }
  var te = class extends De {
    constructor(...e4) {
      super(...e4);
      H(this, "aliasKey", "xy");
    }
    reset() {
      super.reset(), this.state.axis = void 0;
    }
    init() {
      this.state.offset = [0, 0], this.state.lastOffset = [0, 0];
    }
    computeOffset() {
      this.state.offset = C.add(this.state.lastOffset, this.state.movement);
    }
    computeMovement() {
      this.state.movement = C.sub(this.state.offset, this.state.lastOffset);
    }
    intent(e4) {
      this.state.axis = this.state.axis || $n(e4), this.state._blocked = (this.config.lockDirection || !!this.config.axis) && !this.state.axis || !!this.config.axis && this.config.axis !== this.state.axis, !this.state._blocked && (this.config.axis || this.config.lockDirection) && jn(e4, this.state.axis);
    }
  };
  var St = 0.15;
  var Ct = { enabled(r2 = true) {
    return r2;
  }, preventDefault(r2 = false) {
    return r2;
  }, triggerAllEvents(r2 = false) {
    return r2;
  }, rubberband(r2 = 0) {
    switch (r2) {
      case true:
        return [St, St];
      case false:
        return [0, 0];
      default:
        return C.toVector(r2);
    }
  }, from(r2) {
    if (typeof r2 == "function")
      return r2;
    if (r2 != null)
      return C.toVector(r2);
  }, transform(r2, e4, t4) {
    return r2 || t4.shared.transform;
  } };
  var q = D(D({}, Ct), {}, { axis(r2, e4, { axis: t4 }) {
    if (this.lockDirection = t4 === "lock", !this.lockDirection)
      return t4;
  }, bounds(r2 = {}) {
    if (typeof r2 == "function")
      return (s3) => q.bounds(r2(s3));
    if ("current" in r2)
      return () => r2.current;
    if (typeof HTMLElement == "function" && r2 instanceof HTMLElement)
      return r2;
    let { left: e4 = -1 / 0, right: t4 = 1 / 0, top: n2 = -1 / 0, bottom: o3 = 1 / 0 } = r2;
    return [[e4, t4], [n2, o3]];
  } });
  var Re = 10;
  var Bt = { ArrowRight: (r2 = 1) => [Re * r2, 0], ArrowLeft: (r2 = 1) => [-Re * r2, 0], ArrowUp: (r2 = 1) => [0, -Re * r2], ArrowDown: (r2 = 1) => [0, Re * r2] };
  var It = class extends te {
    constructor(...e4) {
      super(...e4);
      H(this, "ingKey", "dragging");
    }
    reset() {
      super.reset();
      let e4 = this.state;
      e4._pointerId = void 0, e4._pointerActive = false, e4._keyboardActive = false, e4._preventScroll = false, e4._delayed = false, e4.swipe = [0, 0], e4.tap = false, e4.canceled = false, e4.cancel = this.cancel.bind(this);
    }
    setup() {
      let e4 = this.state;
      if (e4._bounds instanceof HTMLElement) {
        let t4 = e4._bounds.getBoundingClientRect(), n2 = e4.currentTarget.getBoundingClientRect(), o3 = { left: t4.left - n2.left + e4.offset[0], right: t4.right - n2.right + e4.offset[0], top: t4.top - n2.top + e4.offset[1], bottom: t4.bottom - n2.bottom + e4.offset[1] };
        e4._bounds = q.bounds(o3);
      }
    }
    cancel() {
      let e4 = this.state;
      e4.canceled || (e4.canceled = true, e4._active = false, setTimeout(() => {
        this.compute(), this.emit();
      }, 0));
    }
    setActive() {
      this.state._active = this.state._pointerActive || this.state._keyboardActive;
    }
    clean() {
      this.pointerClean(), this.state._pointerActive = false, this.state._keyboardActive = false, super.clean();
    }
    pointerDown(e4) {
      let t4 = this.config, n2 = this.state;
      e4.buttons != null && e4.buttons !== t4.pointerButtons || (this.ctrl.setEventIds(e4), t4.pointerCapture && e4.target.setPointerCapture(e4.pointerId), !n2._pointerActive && (this.start(e4), this.setupPointer(e4), n2._pointerId = _e(e4), n2._pointerActive = true, n2.values = ee(e4), n2.initial = n2.values, t4.preventScroll ? this.setupScrollPrevention(e4) : t4.delay > 0 ? this.setupDelayTrigger(e4) : this.startPointerDrag(e4)));
    }
    startPointerDrag(e4) {
      let t4 = this.state;
      t4._active = true, t4._preventScroll = true, t4._delayed = false, this.compute(e4), this.emit();
    }
    pointerMove(e4) {
      let t4 = this.state, n2 = this.config;
      if (!t4._pointerActive || t4.type === e4.type && e4.timeStamp === t4.timeStamp)
        return;
      let o3 = _e(e4);
      if (t4._pointerId && o3 !== t4._pointerId)
        return;
      let s3 = ee(e4);
      if (document.pointerLockElement === e4.target ? t4._delta = [e4.movementX, e4.movementY] : (t4._delta = C.sub(s3, t4.values), t4.values = s3), C.addTo(t4._movement, t4._delta), this.compute(e4), t4._delayed) {
        this.timeoutStore.remove("dragDelay"), t4.active = false, this.startPointerDrag(e4);
        return;
      }
      if (n2.preventScroll && !t4._preventScroll)
        if (t4.axis)
          if (t4.axis === n2.preventScrollAxis || n2.preventScrollAxis === "xy") {
            t4._active = false, this.clean();
            return;
          } else {
            this.timeoutStore.remove("startPointerDrag"), this.startPointerDrag(e4);
            return;
          }
        else
          return;
      this.emit();
    }
    pointerUp(e4) {
      this.ctrl.setEventIds(e4);
      try {
        this.config.pointerCapture && e4.target.hasPointerCapture(e4.pointerId) && e4.target.releasePointerCapture(e4.pointerId);
      } catch (c3) {
      }
      let t4 = this.state, n2 = this.config;
      if (!t4._pointerActive)
        return;
      let o3 = _e(e4);
      if (t4._pointerId && o3 !== t4._pointerId)
        return;
      this.state._pointerActive = false, this.setActive(), this.compute(e4);
      let [s3, a3] = t4._distance;
      if (t4.tap = s3 <= 3 && a3 <= 3, t4.tap && n2.filterTaps)
        t4._force = true;
      else {
        let [c3, i3] = t4.direction, [l2, u2] = t4.velocity, [d4, p3] = t4.movement, [h4, f5] = n2.swipe.velocity, [T2, E2] = n2.swipe.distance, x3 = n2.swipe.duration;
        t4.elapsedTime < x3 && (Math.abs(l2) > h4 && Math.abs(d4) > T2 && (t4.swipe[0] = c3), Math.abs(u2) > f5 && Math.abs(p3) > E2 && (t4.swipe[1] = i3));
      }
      this.emit();
    }
    pointerClick(e4) {
      this.state.tap || (e4.preventDefault(), e4.stopPropagation());
    }
    setupPointer(e4) {
      let t4 = this.config, n2 = t4.device;
      if (false)
        try {
        } catch (o3) {
        }
      t4.pointerLock && e4.currentTarget.requestPointerLock(), t4.pointerCapture || (this.eventStore.add(this.sharedConfig.window, n2, "change", this.pointerMove.bind(this)), this.eventStore.add(this.sharedConfig.window, n2, "end", this.pointerUp.bind(this)));
    }
    pointerClean() {
      this.config.pointerLock && document.pointerLockElement === this.state.currentTarget && document.exitPointerLock();
    }
    preventScroll(e4) {
      this.state._preventScroll && e4.cancelable && e4.preventDefault();
    }
    setupScrollPrevention(e4) {
      zn(e4), this.eventStore.add(this.sharedConfig.window, "touch", "change", this.preventScroll.bind(this), { passive: false }), this.eventStore.add(this.sharedConfig.window, "touch", "end", this.clean.bind(this), { passive: false }), this.eventStore.add(this.sharedConfig.window, "touch", "cancel", this.clean.bind(this), { passive: false }), this.timeoutStore.add("startPointerDrag", this.startPointerDrag.bind(this), this.config.preventScroll, e4);
    }
    setupDelayTrigger(e4) {
      this.state._delayed = true, this.timeoutStore.add("dragDelay", this.startPointerDrag.bind(this), this.config.delay, e4);
    }
    keyDown(e4) {
      let t4 = Bt[e4.key], n2 = this.state;
      if (t4) {
        let o3 = e4.shiftKey ? 10 : e4.altKey ? 0.1 : 1;
        n2._delta = t4(o3), this.start(e4), n2._keyboardActive = true, C.addTo(n2._movement, n2._delta), this.compute(e4), this.emit();
      }
    }
    keyUp(e4) {
      e4.key in Bt && (this.state._keyboardActive = false, this.setActive(), this.compute(e4), this.emit());
    }
    bind(e4) {
      let t4 = this.config.device;
      e4(t4, "start", this.pointerDown.bind(this)), this.config.pointerCapture && (e4(t4, "change", this.pointerMove.bind(this)), e4(t4, "end", this.pointerUp.bind(this)), e4(t4, "cancel", this.pointerUp.bind(this))), e4("key", "down", this.keyDown.bind(this)), e4("key", "up", this.keyUp.bind(this)), this.config.filterTaps && e4("click", "", this.pointerClick.bind(this), { capture: true });
    }
  };
  function zn(r2) {
    "persist" in r2 && typeof r2.persist == "function" && r2.persist();
  }
  var ae = typeof window != "undefined" && window.document && window.document.createElement;
  function kt() {
    return ae && "ontouchstart" in window;
  }
  function Gn() {
    return kt() || ae && window.navigator.maxTouchPoints > 1;
  }
  function qn() {
    return ae && "onpointerdown" in window;
  }
  function Zn() {
    return ae && "exitPointerLock" in window.document;
  }
  function Jn() {
    try {
      return "constructor" in GestureEvent;
    } catch (r2) {
      return false;
    }
  }
  var N = { isBrowser: ae, gesture: Jn(), touch: kt(), touchscreen: Gn(), pointer: qn(), pointerLock: Zn() };
  var Qn = 250;
  var er = 180;
  var tr = 0.5;
  var nr = 50;
  var rr = 250;
  var or = D(D({}, q), {}, { pointerLock(r2, e4, { pointer: { lock: t4 = false, touch: n2 = false } = {} }) {
    return this.useTouch = N.touch && n2, N.pointerLock && t4;
  }, device(r2, e4) {
    return this.useTouch ? "touch" : this.pointerLock ? "mouse" : N.pointer ? "pointer" : N.touch ? "touch" : "mouse";
  }, preventScroll(r2 = false, e4, { preventScrollAxis: t4 = "y" }) {
    return t4 && (this.preventScrollAxis = t4), N.touchscreen ? typeof r2 == "number" ? r2 : r2 ? Qn : false : false;
  }, pointerCapture(r2, e4, { pointer: { capture: t4 = true, buttons: n2 = 1 } = {} }) {
    return this.pointerButtons = n2, !this.pointerLock && this.device === "pointer" && t4;
  }, threshold(r2, e4, { filterTaps: t4 = false, axis: n2 = void 0 }) {
    let o3 = C.toVector(r2, t4 ? 3 : n2 ? 1 : 0);
    return this.filterTaps = t4, o3;
  }, swipe({ velocity: r2 = tr, distance: e4 = nr, duration: t4 = rr } = {}) {
    return { velocity: this.transform(C.toVector(r2)), distance: this.transform(C.toVector(e4)), duration: t4 };
  }, delay(r2 = 0) {
    switch (r2) {
      case true:
        return er;
      case false:
        return 0;
      default:
        return r2;
    }
  } });
  var sr = 30;
  var ir = 36;
  var Mt = class extends De {
    constructor(...e4) {
      super(...e4);
      H(this, "ingKey", "pinching"), H(this, "aliasKey", "da");
    }
    init() {
      this.state.offset = [1, 0], this.state.lastOffset = [1, 0], this.state._pointerEvents = new Map();
    }
    reset() {
      super.reset();
      let e4 = this.state;
      e4._touchIds = [], e4.canceled = false, e4.cancel = this.cancel.bind(this), e4.turns = 0;
    }
    computeOffset() {
      let { type: e4, movement: t4, lastOffset: n2 } = this.state;
      e4 === "wheel" ? this.state.offset = C.add(t4, n2) : this.state.offset = [(1 + t4[0]) * n2[0], t4[1] + n2[1]];
    }
    computeMovement() {
      let { offset: e4, lastOffset: t4 } = this.state;
      this.state.movement = [e4[0] / t4[0], e4[1] - t4[1]];
    }
    intent(e4) {
      let t4 = this.state;
      if (!t4.axis) {
        let n2 = Math.abs(e4[0]) * sr - Math.abs(e4[1]);
        n2 < 0 ? t4.axis = "angle" : n2 > 0 && (t4.axis = "scale");
      }
      this.config.lockDirection && (t4.axis === "scale" ? e4[1] = 0 : t4.axis === "angle" && (e4[0] = 0));
    }
    cancel() {
      let e4 = this.state;
      e4.canceled || setTimeout(() => {
        e4.canceled = true, e4._active = false, this.compute(), this.emit();
      }, 0);
    }
    touchStart(e4) {
      this.ctrl.setEventIds(e4);
      let t4 = this.state, n2 = this.ctrl.touchIds;
      if (t4._active && t4._touchIds.every((s3) => n2.has(s3)) || n2.size < 2)
        return;
      this.start(e4), t4._touchIds = Array.from(n2).slice(0, 2);
      let o3 = Lt(e4, t4._touchIds);
      this.pinchStart(e4, o3);
    }
    pointerStart(e4) {
      if (e4.buttons != null && e4.buttons % 2 != 1)
        return;
      this.ctrl.setEventIds(e4), e4.target.setPointerCapture(e4.pointerId);
      let t4 = this.state, n2 = t4._pointerEvents, o3 = this.ctrl.pointerIds;
      if (t4._active && Array.from(n2.keys()).every((a3) => o3.has(a3)) || (n2.size < 2 && n2.set(e4.pointerId, e4), t4._pointerEvents.size < 2))
        return;
      this.start(e4);
      let s3 = He(...Array.from(n2.values()));
      this.pinchStart(e4, s3);
    }
    pinchStart(e4, t4) {
      let n2 = this.state;
      n2.origin = t4.origin, n2.values = [t4.distance, t4.angle], n2.initial = n2.values, this.compute(e4), this.emit();
    }
    touchMove(e4) {
      if (!this.state._active)
        return;
      let t4 = Lt(e4, this.state._touchIds);
      this.pinchMove(e4, t4);
    }
    pointerMove(e4) {
      let t4 = this.state._pointerEvents;
      if (t4.has(e4.pointerId) && t4.set(e4.pointerId, e4), !this.state._active)
        return;
      let n2 = He(...Array.from(t4.values()));
      this.pinchMove(e4, n2);
    }
    pinchMove(e4, t4) {
      let n2 = this.state, o3 = n2.values[1], s3 = t4.angle - o3, a3 = 0;
      Math.abs(s3) > 270 && (a3 += Math.sign(s3)), n2.values = [t4.distance, t4.angle - 360 * a3], n2.origin = t4.origin, n2.turns = a3, n2._movement = [n2.values[0] / n2.initial[0] - 1, n2.values[1] - n2.initial[1]], this.compute(e4), this.emit();
    }
    touchEnd(e4) {
      this.ctrl.setEventIds(e4), !!this.state._active && this.state._touchIds.some((t4) => !this.ctrl.touchIds.has(t4)) && (this.state._active = false, this.compute(e4), this.emit());
    }
    pointerEnd(e4) {
      let t4 = this.state;
      this.ctrl.setEventIds(e4);
      try {
        e4.target.releasePointerCapture(e4.pointerId);
      } catch (n2) {
      }
      t4._pointerEvents.has(e4.pointerId) && t4._pointerEvents.delete(e4.pointerId), !!t4._active && t4._pointerEvents.size < 2 && (t4._active = false, this.compute(e4), this.emit());
    }
    gestureStart(e4) {
      e4.cancelable && e4.preventDefault();
      let t4 = this.state;
      t4._active || (this.start(e4), t4.values = [e4.scale, e4.rotation], t4.origin = [e4.clientX, e4.clientY], this.compute(e4), this.emit());
    }
    gestureMove(e4) {
      if (e4.cancelable && e4.preventDefault(), !this.state._active)
        return;
      let t4 = this.state;
      t4.values = [e4.scale, e4.rotation], t4.origin = [e4.clientX, e4.clientY];
      let n2 = t4._movement;
      t4._movement = [e4.scale - 1, e4.rotation], t4._delta = C.sub(t4._movement, n2), this.compute(e4), this.emit();
    }
    gestureEnd(e4) {
      !this.state._active || (this.state._active = false, this.compute(e4), this.emit());
    }
    wheel(e4) {
      !e4.ctrlKey || (this.state._active ? this.wheelChange(e4) : this.wheelStart(e4), this.timeoutStore.add("wheelEnd", this.wheelEnd.bind(this)));
    }
    wheelStart(e4) {
      this.start(e4), this.wheelChange(e4);
    }
    wheelChange(e4) {
      "uv" in e4 || e4.cancelable && e4.preventDefault();
      let n2 = this.state;
      n2._delta = [-Pt(e4)[1] / ir * n2.offset[0], 0], C.addTo(n2._movement, n2._delta), this.state.origin = [e4.clientX, e4.clientY], this.compute(e4), this.emit();
    }
    wheelEnd() {
      !this.state._active || (this.state._active = false, this.compute(), this.emit());
    }
    bind(e4) {
      let t4 = this.config.device;
      t4 ? (e4(t4, "start", this[t4 + "Start"].bind(this)), e4(t4, "change", this[t4 + "Move"].bind(this)), e4(t4, "end", this[t4 + "End"].bind(this)), e4(t4, "cancel", this[t4 + "End"].bind(this))) : e4("wheel", "", this.wheel.bind(this), { passive: false });
    }
  };
  var ar = D(D({}, Ct), {}, { useTouch(r2, e4, { pointer: { touch: t4 = false } = {} }) {
    return N.touch && t4;
  }, device(r2, e4, t4) {
    if (t4.shared.target && !N.touch && N.gesture)
      return "gesture";
    if (this.useTouch)
      return "touch";
    if (N.touchscreen) {
      if (N.pointer)
        return "pointer";
      if (N.touch)
        return "touch";
    }
  }, bounds(r2, e4, { scaleBounds: t4 = {}, angleBounds: n2 = {} }) {
    let o3 = (a3) => {
      let c3 = wt(Pe(t4, a3), { min: -1 / 0, max: 1 / 0 });
      return [c3.min, c3.max];
    }, s3 = (a3) => {
      let c3 = wt(Pe(n2, a3), { min: -1 / 0, max: 1 / 0 });
      return [c3.min, c3.max];
    };
    return typeof t4 != "function" && typeof n2 != "function" ? [o3(), s3()] : (a3) => [o3(a3), s3(a3)];
  }, threshold(r2, e4, t4) {
    return this.lockDirection = t4.axis === "lock", C.toVector(r2, this.lockDirection ? [0.1, 3] : 0);
  } });
  var Ht = class extends te {
    constructor(...e4) {
      super(...e4);
      H(this, "ingKey", "moving");
    }
    move(e4) {
      this.config.mouseOnly && e4.pointerType !== "mouse" || (this.state._active ? this.moveChange(e4) : this.moveStart(e4), this.timeoutStore.add("moveEnd", this.moveEnd.bind(this)));
    }
    moveStart(e4) {
      this.start(e4);
      let t4 = this.state;
      t4.values = ee(e4), this.compute(e4), t4.initial = t4.values, this.emit();
    }
    moveChange(e4) {
      if (!this.state._active)
        return;
      let t4 = ee(e4), n2 = this.state;
      n2._delta = C.sub(t4, n2.values), C.addTo(n2._movement, n2._delta), n2.values = t4, this.compute(e4), this.emit();
    }
    moveEnd(e4) {
      !this.state._active || (this.state._active = false, this.compute(e4), this.emit());
    }
    bind(e4) {
      e4("pointer", "change", this.move.bind(this)), e4("pointer", "leave", this.moveEnd.bind(this));
    }
  };
  var cr = D(D({}, q), {}, { mouseOnly: (r2 = true) => r2 });
  var _t = class extends te {
    constructor(...e4) {
      super(...e4);
      H(this, "ingKey", "scrolling");
    }
    scroll(e4) {
      this.state._active || this.start(e4), this.scrollChange(e4), this.timeoutStore.add("scrollEnd", this.scrollEnd.bind(this));
    }
    scrollChange(e4) {
      e4.cancelable && e4.preventDefault();
      let t4 = this.state, n2 = Nn(e4);
      t4._delta = C.sub(n2, t4.values), C.addTo(t4._movement, t4._delta), t4.values = n2, this.compute(e4), this.emit();
    }
    scrollEnd() {
      !this.state._active || (this.state._active = false, this.compute(), this.emit());
    }
    bind(e4) {
      e4("scroll", "", this.scroll.bind(this));
    }
  };
  var ur = q;
  var Dt = class extends te {
    constructor(...e4) {
      super(...e4);
      H(this, "ingKey", "wheeling");
    }
    wheel(e4) {
      this.state._active || this.start(e4), this.wheelChange(e4), this.timeoutStore.add("wheelEnd", this.wheelEnd.bind(this));
    }
    wheelChange(e4) {
      let t4 = this.state;
      t4._delta = Pt(e4), C.addTo(this.state._movement, t4._delta), this.compute(e4), this.emit();
    }
    wheelEnd() {
      !this.state._active || (this.state._active = false, this.compute(), this.emit());
    }
    bind(e4) {
      e4("wheel", "", this.wheel.bind(this));
    }
  };
  var lr = q;
  var Ut = class extends te {
    constructor(...e4) {
      super(...e4);
      H(this, "ingKey", "hovering");
    }
    enter(e4) {
      this.config.mouseOnly && e4.pointerType !== "mouse" || (this.start(e4), this.state.values = ee(e4), this.compute(e4), this.emit());
    }
    leave(e4) {
      if (this.config.mouseOnly && e4.pointerType !== "mouse")
        return;
      let t4 = this.state;
      if (!t4._active)
        return;
      t4._active = false;
      let n2 = ee(e4);
      t4._movement = t4._delta = C.sub(n2, t4.values), t4.values = n2, this.compute(e4), t4.delta = t4.movement, this.emit();
    }
    bind(e4) {
      e4("pointer", "enter", this.enter.bind(this)), e4("pointer", "leave", this.leave.bind(this));
    }
  };
  var dr = D(D({}, q), {}, { mouseOnly: (r2 = true) => r2 });
  var ce = new Map();
  var ue = new Map();
  function Ue(r2) {
    ce.set(r2.key, r2.engine), ue.set(r2.key, r2.resolver);
  }
  var Ke = { key: "drag", engine: It, resolver: or };
  var Ae = { key: "hover", engine: Ut, resolver: dr };
  var Xe = { key: "move", engine: Ht, resolver: cr };
  var Ye = { key: "pinch", engine: Mt, resolver: ar };
  var Oe = { key: "scroll", engine: _t, resolver: ur };
  var Ne = { key: "wheel", engine: Dt, resolver: lr };
  function pr(r2, e4) {
    if (r2 == null)
      return {};
    var t4 = {}, n2 = Object.keys(r2), o3, s3;
    for (s3 = 0; s3 < n2.length; s3++)
      o3 = n2[s3], !(e4.indexOf(o3) >= 0) && (t4[o3] = r2[o3]);
    return t4;
  }
  function hr(r2, e4) {
    if (r2 == null)
      return {};
    var t4 = pr(r2, e4), n2, o3;
    if (Object.getOwnPropertySymbols) {
      var s3 = Object.getOwnPropertySymbols(r2);
      for (o3 = 0; o3 < s3.length; o3++)
        n2 = s3[o3], !(e4.indexOf(n2) >= 0) && (!Object.prototype.propertyIsEnumerable.call(r2, n2) || (t4[n2] = r2[n2]));
    }
    return t4;
  }
  var mr = (r2) => r2;
  var fr = { target(r2) {
    if (r2)
      return () => "current" in r2 ? r2.current : r2;
  }, enabled(r2 = true) {
    return r2;
  }, window(r2 = N.isBrowser ? window : void 0) {
    return r2;
  }, eventOptions({ passive: r2 = true, capture: e4 = false } = {}) {
    return { passive: r2, capture: e4 };
  }, transform(r2 = mr) {
    return r2;
  } };
  var gr = ["target", "eventOptions", "window", "enabled", "transform"];
  function we(r2 = {}, e4) {
    let t4 = {};
    for (let [n2, o3] of Object.entries(e4))
      switch (typeof o3) {
        case "function":
          t4[n2] = o3.call(t4, r2[n2], n2, r2);
          break;
        case "object":
          t4[n2] = we(r2[n2], o3);
          break;
        case "boolean":
          o3 && (t4[n2] = r2[n2]);
          break;
      }
    return t4;
  }
  function Tr(r2, e4) {
    let t4 = r2, { target: n2, eventOptions: o3, window: s3, enabled: a3, transform: c3 } = t4, i3 = hr(t4, gr), l2 = { shared: we({ target: n2, eventOptions: o3, window: s3, enabled: a3, transform: c3 }, fr) };
    if (e4) {
      let u2 = ue.get(e4);
      l2[e4] = we(D({ shared: l2.shared }, i3), u2);
    } else
      for (let u2 in i3) {
        let d4 = ue.get(u2);
        d4 && (l2[u2] = we(D({ shared: l2.shared }, i3[u2]), d4));
      }
    return l2;
  }
  var Fe = class {
    constructor(e4) {
      H(this, "_listeners", []), this._ctrl = e4;
    }
    add(e4, t4, n2, o3, s3) {
      let a3 = vt(t4, n2), c3 = D(D({}, this._ctrl.config.shared.eventOptions), s3);
      e4.addEventListener(a3, o3, c3), this._listeners.push(() => e4.removeEventListener(a3, o3, c3));
    }
    clean() {
      this._listeners.forEach((e4) => e4()), this._listeners = [];
    }
  };
  var Kt = class {
    constructor() {
      H(this, "_timeouts", new Map());
    }
    add(e4, t4, n2 = 140, ...o3) {
      this.remove(e4), this._timeouts.set(e4, window.setTimeout(t4, n2, ...o3));
    }
    remove(e4) {
      let t4 = this._timeouts.get(e4);
      t4 && window.clearTimeout(t4);
    }
    clean() {
      this._timeouts.forEach((e4) => void window.clearTimeout(e4)), this._timeouts.clear();
    }
  };
  var We = class {
    constructor(e4) {
      H(this, "gestures", new Set()), H(this, "_targetEventStore", new Fe(this)), H(this, "gestureEventStores", {}), H(this, "gestureTimeoutStores", {}), H(this, "handlers", {}), H(this, "config", {}), H(this, "pointerIds", new Set()), H(this, "touchIds", new Set()), H(this, "state", { shared: { shiftKey: false, metaKey: false, ctrlKey: false, altKey: false } }), vr(this, e4);
    }
    setEventIds(e4) {
      xe(e4) ? this.touchIds = new Set(bt(e4)) : "pointerId" in e4 && (e4.type === "pointerup" ? this.pointerIds.delete(e4.pointerId) : this.pointerIds.add(e4.pointerId));
    }
    applyHandlers(e4, t4) {
      this.handlers = e4, this.nativeHandlers = t4;
    }
    applyConfig(e4, t4) {
      this.config = Tr(e4, t4);
    }
    clean() {
      this._targetEventStore.clean();
      for (let e4 of this.gestures)
        this.gestureEventStores[e4].clean(), this.gestureTimeoutStores[e4].clean();
    }
    effect() {
      return this.config.shared.target && this.bind(), () => this._targetEventStore.clean();
    }
    bind(...e4) {
      let t4 = this.config.shared, n2 = t4.eventOptions, o3 = {}, s3;
      if (t4.target && (s3 = t4.target(), !s3))
        return;
      let a3 = yr(o3, n2, !!s3);
      if (t4.enabled) {
        for (let c3 of this.gestures)
          if (this.config[c3].enabled) {
            let i3 = ce.get(c3);
            new i3(this, e4, c3).bind(a3);
          }
        for (let c3 in this.nativeHandlers)
          a3(c3, "", (i3) => this.nativeHandlers[c3](D(D({}, this.state.shared), {}, { event: i3, args: e4 })), void 0, true);
      }
      for (let c3 in o3)
        o3[c3] = Rt(...o3[c3]);
      if (!s3)
        return o3;
      for (let c3 in o3) {
        let i3 = c3.substr(2).toLowerCase(), l2 = !!~i3.indexOf("capture"), u2 = !!~i3.indexOf("passive");
        (l2 || u2) && (i3 = i3.replace(/capture|passive/g, "")), this._targetEventStore.add(s3, i3, "", o3[c3], { capture: l2, passive: u2 });
      }
    }
  };
  function ne(r2, e4) {
    r2.gestures.add(e4), r2.gestureEventStores[e4] = new Fe(r2), r2.gestureTimeoutStores[e4] = new Kt();
  }
  function vr(r2, e4) {
    e4.drag && ne(r2, "drag"), e4.wheel && ne(r2, "wheel"), e4.scroll && ne(r2, "scroll"), e4.move && ne(r2, "move"), e4.pinch && ne(r2, "pinch"), e4.hover && ne(r2, "hover");
  }
  var yr = (r2, e4, t4) => (n2, o3, s3, a3 = {}, c3 = false) => {
    var i3, l2;
    let u2 = (i3 = a3.capture) !== null && i3 !== void 0 ? i3 : e4.capture, d4 = (l2 = a3.passive) !== null && l2 !== void 0 ? l2 : e4.passive, p3 = c3 ? n2 : Tt(n2, o3, u2);
    t4 && d4 && (p3 += "Passive"), r2[p3] = r2[p3] || [], r2[p3].push(s3);
  };
  var br = /^on(Drag|Wheel|Scroll|Move|Pinch|Hover)/;
  function Lr(r2) {
    let e4 = {}, t4 = {}, n2 = new Set();
    for (let o3 in r2)
      br.test(o3) ? (n2.add(RegExp.lastMatch), t4[o3] = r2[o3]) : e4[o3] = r2[o3];
    return [t4, e4, n2];
  }
  function re(r2, e4, t4, n2, o3, s3) {
    if (!r2.has(t4) || !ce.has(n2))
      return;
    let a3 = t4 + "Start", c3 = t4 + "End", i3 = (l2) => {
      let u2;
      return l2.first && a3 in e4 && e4[a3](l2), t4 in e4 && (u2 = e4[t4](l2)), l2.last && c3 in e4 && e4[c3](l2), u2;
    };
    o3[n2] = i3, s3[n2] = s3[n2] || {};
  }
  function At(r2, e4) {
    let [t4, n2, o3] = Lr(r2), s3 = {};
    return re(o3, t4, "onDrag", "drag", s3, e4), re(o3, t4, "onWheel", "wheel", s3, e4), re(o3, t4, "onScroll", "scroll", s3, e4), re(o3, t4, "onPinch", "pinch", s3, e4), re(o3, t4, "onMove", "move", s3, e4), re(o3, t4, "onHover", "hover", s3, e4), { handlers: s3, config: e4, nativeHandlers: n2 };
  }
  function Er(r2, e4 = {}, t4, n2) {
    let o3 = import_react5.default.useMemo(() => new We(r2), []);
    if (o3.applyHandlers(r2, n2), o3.applyConfig(e4, t4), import_react5.default.useEffect(o3.effect.bind(o3)), import_react5.default.useEffect(() => o3.clean.bind(o3), []), e4.target === void 0)
      return o3.bind.bind(o3);
  }
  function xr(r2) {
    return r2.forEach(Ue), function(t4, n2 = {}) {
      let { handlers: o3, nativeHandlers: s3, config: a3 } = At(t4, n2);
      return Er(o3, a3, void 0, s3);
    };
  }
  function Xt(r2, e4 = {}) {
    return xr([Ke, Ye, Oe, Ne, Xe, Ae])(r2, e4);
  }
  function Ot(r2, e4) {
    let t4 = (0, import_react4.useRef)(void 0), n2 = (0, import_react4.useRef)(void 0), o3 = (0, import_react4.useRef)([0, 0]), { inputs: s3, callbacks: a3 } = P();
    (0, import_react4.useEffect)(() => {
      let c3 = (i3) => {
        i3.preventDefault();
      };
      return document.addEventListener("gesturestart", c3), document.addEventListener("gesturechange", c3), () => {
        document.removeEventListener("gesturestart", c3), document.removeEventListener("gesturechange", c3);
      };
    }, []), Xt({ onWheel: ({ delta: c3, event: i3 }) => {
      var u2, d4, p3, h4;
      if (i3.altKey && i3.buttons === 0) {
        let f5 = (d4 = (u2 = s3.pointer) == null ? void 0 : u2.point) != null ? d4 : [s3.bounds.width / 2, s3.bounds.height / 2], T2 = s3.pinch(f5, f5);
        (p3 = a3.onZoom) == null || p3.call(a3, A(L({}, T2), { delta: [...f5, -i3.deltaY] }), i3);
        return;
      }
      if (i3.preventDefault(), s3.isPinching || e.isEqual(c3, [0, 0]))
        return;
      let l2 = s3.pan(c3, i3);
      (h4 = a3.onPan) == null || h4.call(a3, l2, i3);
    }, onPinchStart: ({ origin: c3, event: i3 }) => {
      var d4;
      let l2 = e4.current;
      if (!l2 || !(i3.target === l2 || l2.contains(i3.target)))
        return;
      let u2 = s3.pinch(c3, c3);
      s3.isPinching = true, (d4 = a3.onPinchStart) == null || d4.call(a3, u2, i3), n2.current = u2.point, t4.current = u2.origin, o3.current = [0, 0];
    }, onPinchEnd: ({ origin: c3, event: i3 }) => {
      var d4;
      let l2 = e4.current;
      if (!(i3.target === l2 || (l2 == null ? void 0 : l2.contains(i3.target))))
        return;
      let u2 = s3.pinch(c3, c3);
      s3.isPinching = false, (d4 = a3.onPinchEnd) == null || d4.call(a3, u2, i3), n2.current = void 0, t4.current = void 0, o3.current = [0, 0];
    }, onPinch: ({ origin: c3, offset: i3, event: l2 }) => {
      var h4;
      let u2 = e4.current;
      if (!(l2.target === u2 || (u2 == null ? void 0 : u2.contains(l2.target))) || !t4.current)
        return;
      let d4 = s3.pinch(c3, t4.current), p3 = e.sub(d4.delta, o3.current);
      o3.current = d4.delta, (h4 = a3.onPinch) == null || h4.call(a3, A(L({}, d4), { point: d4.point, origin: t4.current, delta: [...p3, i3[0]] }), l2), n2.current = c3;
    } }, { target: e4, eventOptions: { passive: false }, pinch: { from: r2, scaleBounds: () => ({ from: s3.zoom, max: 5, min: 0.1 }) } });
  }
  var R;
  (function(o3) {
    o3.Top = "top_edge", o3.Right = "right_edge", o3.Bottom = "bottom_edge", o3.Left = "left_edge";
  })(R || (R = {}));
  var v;
  (function(o3) {
    o3.TopLeft = "top_left_corner", o3.TopRight = "top_right_corner", o3.BottomRight = "bottom_right_corner", o3.BottomLeft = "bottom_left_corner";
  })(v || (v = {}));
  var I;
  (function(a3) {
    a3.minX = "minX", a3.midX = "midX", a3.maxX = "maxX", a3.minY = "minY", a3.midY = "midY", a3.maxY = "maxY";
  })(I || (I = {}));
  String.prototype.replaceAll || (String.prototype.replaceAll = function(r2, e4) {
    return Object.prototype.toString.call(r2).toLowerCase() === "[object regexp]" ? this.replace(r2, e4) : this.replace(new RegExp(r2, "g"), e4);
  });
  var Se = Math.PI * 2;
  var k = class {
    static filterObject(e4, t4) {
      return Object.fromEntries(Object.entries(e4).filter(t4));
    }
    static lerp(e4, t4, n2) {
      return n2 = k.clamp(n2, 0, 1), e4 * (1 - n2) + t4 * n2;
    }
    static lerpColor(e4, t4, n2 = 0.5) {
      function o3(l2) {
        let u2 = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(l2);
        return [parseInt(u2[1], 16), parseInt(u2[2], 16), parseInt(u2[3], 16)];
      }
      function s3(l2) {
        return "#" + ((1 << 24) + (l2[0] << 16) + (l2[1] << 8) + l2[2]).toString(16).slice(1);
      }
      let a3 = o3(e4) || [0, 0, 0], c3 = o3(t4) || [0, 0, 0], i3 = a3.slice();
      for (let l2 = 0; l2 < 3; l2++)
        i3[l2] = Math.round(i3[l2] + n2 * (c3[l2] - a3[l2]));
      return s3(i3);
    }
    static modulate(e4, t4, n2, o3 = false) {
      let [s3, a3] = t4, [c3, i3] = n2, l2 = c3 + (e4 - s3) / (a3 - s3) * (i3 - c3);
      return o3 ? c3 < i3 ? Math.max(Math.min(l2, i3), c3) : Math.max(Math.min(l2, c3), i3) : l2;
    }
    static clamp(e4, t4, n2) {
      return Math.max(t4, typeof n2 != "undefined" ? Math.min(e4, n2) : e4);
    }
    static compress(e4) {
      return e4;
    }
    static decompress(e4) {
      return e4;
    }
    static deepClone(e4) {
      if (e4 === null)
        return e4;
      if (Array.isArray(e4))
        return [...e4];
      if (typeof e4 == "object") {
        let t4 = L({}, e4);
        return Object.keys(t4).forEach((n2) => t4[n2] = typeof e4[n2] == "object" ? k.deepClone(e4[n2]) : e4[n2]), t4;
      }
      return e4;
    }
    static rng(e4 = "") {
      let t4 = 0, n2 = 0, o3 = 0, s3 = 0;
      function a3() {
        let c3 = t4 ^ t4 << 11;
        return t4 = n2, n2 = o3, o3 = s3, s3 ^= (s3 >>> 19 ^ c3 ^ c3 >>> 8) >>> 0, s3 / 4294967296;
      }
      for (let c3 = 0; c3 < e4.length + 64; c3++)
        t4 ^= e4.charCodeAt(c3) | 0, a3();
      return a3;
    }
    static getRectangleSides(e4, t4, n2 = 0) {
      let o3 = [e4[0] + t4[0] / 2, e4[1] + t4[1] / 2], s3 = e.rotWith(e4, o3, n2), a3 = e.rotWith(e.add(e4, [t4[0], 0]), o3, n2), c3 = e.rotWith(e.add(e4, t4), o3, n2), i3 = e.rotWith(e.add(e4, [0, t4[1]]), o3, n2);
      return [["top", [s3, a3]], ["right", [a3, c3]], ["bottom", [c3, i3]], ["left", [i3, s3]]];
    }
    static getBoundsSides(e4) {
      return this.getRectangleSides([e4.minX, e4.minY], [e4.width, e4.height]);
    }
    static shallowEqual(e4, t4) {
      if (e4 === t4)
        return true;
      if (!e4 || !t4)
        return false;
      let n2 = Object.keys(e4), o3 = Object.keys(t4), s3 = n2.length;
      if (o3.length !== s3)
        return false;
      for (let a3 = 0; a3 < s3; a3++) {
        let c3 = n2[a3];
        if (e4[c3] !== t4[c3] || !Object.prototype.hasOwnProperty.call(t4, c3))
          return false;
      }
      return true;
    }
    static getCircleTangentToPoint(e4, t4, n2, o3) {
      let s3 = e.lrp(e4, n2, 0.5), a3 = e.dist(e4, s3), c3 = e.sub(s3, e4), i3 = e.len(c3);
      if (!(i3 <= t4 + a3 && i3 >= Math.abs(t4 - a3)))
        return null;
      let l2 = (t4 * t4 - a3 * a3 + i3 * i3) / (2 * i3), u2 = 1 / i3, d4 = e.add(e4, e.mul(c3, l2 * u2)), p3 = Math.sqrt(t4 * t4 - l2 * l2), h4 = e.mul(e.per(c3), p3 * u2);
      return o3 === 0 ? e.add(d4, h4) : e.sub(d4, h4);
    }
    static getOuterTangentsOfCircles(e4, t4, n2, o3) {
      let s3 = e.angle(e4, n2), a3 = e.dist(e4, n2);
      if (a3 < Math.abs(o3 - t4))
        return null;
      let c3 = Math.acos((t4 - o3) / a3), i3 = s3 + c3, l2 = s3 - c3;
      return [[e4[0] + t4 * Math.cos(l2), e4[1] + t4 * Math.sin(l2)], [n2[0] + o3 * Math.cos(l2), n2[1] + o3 * Math.sin(l2)], [e4[0] + t4 * Math.cos(i3), e4[1] + t4 * Math.sin(i3)], [n2[0] + o3 * Math.cos(i3), n2[1] + o3 * Math.sin(i3)]];
    }
    static getClosestPointOnCircle(e4, t4, n2) {
      let o3 = e.sub(e4, n2);
      return e.sub(e4, e.mul(e.div(o3, e.len(o3)), t4));
    }
    static circleFromThreePoints(e4, t4, n2) {
      let [o3, s3] = e4, [a3, c3] = t4, [i3, l2] = n2, u2 = o3 * (c3 - l2) - s3 * (a3 - i3) + a3 * l2 - i3 * c3, d4 = (o3 * o3 + s3 * s3) * (l2 - c3) + (a3 * a3 + c3 * c3) * (s3 - l2) + (i3 * i3 + l2 * l2) * (c3 - s3), p3 = (o3 * o3 + s3 * s3) * (a3 - i3) + (a3 * a3 + c3 * c3) * (i3 - o3) + (i3 * i3 + l2 * l2) * (o3 - a3), h4 = -d4 / (2 * u2), f5 = -p3 / (2 * u2);
      return [h4, f5, Math.hypot(h4 - o3, f5 - s3)];
    }
    static perimeterOfEllipse(e4, t4) {
      let n2 = Math.pow(e4 - t4, 2) / Math.pow(e4 + t4, 2);
      return Math.PI * (e4 + t4) * (1 + 3 * n2 / (10 + Math.sqrt(4 - 3 * n2)));
    }
    static shortAngleDist(e4, t4) {
      let n2 = Math.PI * 2, o3 = (t4 - e4) % n2;
      return 2 * o3 % n2 - o3;
    }
    static longAngleDist(e4, t4) {
      return Math.PI * 2 - k.shortAngleDist(e4, t4);
    }
    static lerpAngles(e4, t4, n2) {
      return e4 + k.shortAngleDist(e4, t4) * n2;
    }
    static angleDelta(e4, t4) {
      return k.shortAngleDist(e4, t4);
    }
    static getSweep(e4, t4, n2) {
      return k.angleDelta(e.angle(e4, t4), e.angle(e4, n2));
    }
    static rotatePoint(e4, t4, n2) {
      let o3 = Math.sin(n2), s3 = Math.cos(n2), a3 = e4[0] - t4[0], c3 = e4[1] - t4[1], i3 = a3 * s3 - c3 * o3, l2 = a3 * o3 + c3 * s3;
      return [i3 + t4[0], l2 + t4[1]];
    }
    static clampRadians(e4) {
      return (Math.PI * 2 + e4) % (Math.PI * 2);
    }
    static snapAngleToSegments(e4, t4) {
      let n2 = Math.PI * 2 / t4;
      return Math.floor((k.clampRadians(e4) + n2 / 2) / n2) * n2;
    }
    static isAngleBetween(e4, t4, n2) {
      if (n2 === e4 || n2 === t4)
        return true;
      let o3 = (t4 - e4 + Se) % Se, s3 = (n2 - e4 + Se) % Se;
      return o3 <= Math.PI != s3 > o3;
    }
    static degreesToRadians(e4) {
      return e4 * Math.PI / 180;
    }
    static radiansToDegrees(e4) {
      return e4 * 180 / Math.PI;
    }
    static getArcLength(e4, t4, n2, o3) {
      let s3 = k.getSweepFlag(e4, n2, o3);
      return t4 * (2 * Math.PI) * (s3 / (2 * Math.PI));
    }
    static getSweepFlag(e4, t4, n2) {
      let o3 = e.angle(e4, n2);
      return (e.angle(e4, t4) - o3 + 3 * Math.PI) % (2 * Math.PI) - Math.PI > 0 ? 0 : 1;
    }
    static getLargeArcFlag(e4, t4, n2) {
      let o3 = e.angle(n2, e4), a3 = (e.angle(n2, t4) - o3 + 3 * Math.PI) % (2 * Math.PI) - Math.PI;
      return Math.abs(a3) > Math.PI / 2 ? 0 : 1;
    }
    static getArcDashOffset(e4, t4, n2, o3, s3) {
      let a3 = k.getSweepFlag(e4, n2, o3), c3 = k.getArcLength(e4, t4, n2, o3);
      return -(a3 < 0 ? c3 : 2 * Math.PI * e4[2] - c3) / 2 + s3;
    }
    static getEllipseDashOffset(e4, t4) {
      return -(2 * Math.PI * e4[2]) / 2 + -t4;
    }
    static getTLBezierCurveSegments(e4, t4 = 0.4) {
      let n2 = e4.length, o3 = [...e4];
      if (n2 < 2)
        throw Error("Curve must have at least two points.");
      for (let i3 = 1; i3 < n2 - 1; i3++) {
        let l2 = e4[i3 - 1], u2 = e4[i3], d4 = e4[i3 + 1], p3 = d4[0] - l2[0], h4 = d4[1] - l2[1], f5 = Math.hypot(p3, h4), T2 = p3 / f5, E2 = h4 / f5, x3 = Math.hypot(u2[0] - l2[0], u2[1] - l2[1]), g2 = Math.hypot(u2[0] - d4[0], u2[1] - d4[1]);
        o3[i3] = [u2[0] - T2 * x3 * t4, u2[1] - E2 * x3 * t4, u2[0] + T2 * g2 * t4, u2[1] + E2 * g2 * t4, T2, E2];
      }
      let s3 = Math.hypot(e4[0][0] + o3[1][0]);
      o3[0][2] = (e4[0][0] + o3[1][0]) / 2, o3[0][3] = (e4[0][1] + o3[1][1]) / 2, o3[0][4] = (o3[1][0] - e4[0][0]) / s3, o3[0][5] = (o3[1][1] - e4[0][1]) / s3;
      let a3 = Math.hypot(e4[n2 - 1][1] + o3[n2 - 1][1]);
      o3[n2 - 1][0] = (e4[n2 - 1][0] + o3[n2 - 2][2]) / 2, o3[n2 - 1][1] = (e4[n2 - 1][1] + o3[n2 - 2][3]) / 2, o3[n2 - 1][4] = (o3[n2 - 2][2] - e4[n2 - 1][0]) / -a3, o3[n2 - 1][5] = (o3[n2 - 2][3] - e4[n2 - 1][1]) / -a3;
      let c3 = [];
      for (let i3 = 1; i3 < o3.length; i3++)
        c3.push({ start: e4[i3 - 1].slice(0, 2), tangentStart: o3[i3 - 1].slice(2, 4), normalStart: o3[i3 - 1].slice(4, 6), pressureStart: 2 + ((i3 - 1) % 2 == 0 ? 1.5 : 0), end: e4[i3].slice(0, 2), tangentEnd: o3[i3].slice(0, 2), normalEnd: o3[i3].slice(4, 6), pressureEnd: 2 + (i3 % 2 == 0 ? 1.5 : 0) });
      return c3;
    }
    static computePointOnCurve(e4, t4) {
      if (e4 === 0)
        return t4[0];
      let n2 = t4.length - 1;
      if (e4 === 1)
        return t4[n2];
      let o3 = 1 - e4, s3 = t4;
      if (n2 === 0)
        return t4[0];
      if (n2 === 1)
        return [o3 * s3[0][0] + e4 * s3[1][0], o3 * s3[0][1] + e4 * s3[1][1]];
      let a3 = o3 * o3, c3 = e4 * e4, i3, l2, u2, d4 = 0;
      return n2 === 2 ? (s3 = [s3[0], s3[1], s3[2], [0, 0]], i3 = a3, l2 = o3 * e4 * 2, u2 = c3) : (i3 = a3 * o3, l2 = a3 * e4 * 3, u2 = o3 * c3 * 3, d4 = e4 * c3), [i3 * s3[0][0] + l2 * s3[1][0] + u2 * s3[2][0] + d4 * s3[3][0], i3 * s3[0][1] + l2 * s3[1][1] + u2 * s3[2][1] + d4 * s3[3][1]];
    }
    static cubicBezier(e4, t4, n2, o3, s3) {
      let a3 = 0, c3 = 0, i3 = 1, l2 = 1, u2 = i3 - 3 * o3 + 3 * t4 - a3, d4 = 3 * o3 - 6 * t4 + 3 * a3, p3 = 3 * t4 - 3 * a3, h4 = a3, f5 = l2 - 3 * s3 + 3 * n2 - c3, T2 = 3 * s3 - 6 * n2 + 3 * c3, E2 = 3 * n2 - 3 * c3, x3 = c3, g2 = 5, y2, B2, U2, b3 = e4;
      for (y2 = 0; y2 < g2; y2++)
        U2 = u2 * b3 * b3 * b3 + d4 * b3 * b3 + p3 * b3 + h4, B2 = 1 / (3 * u2 * b3 * b3 + 2 * d4 * b3 + p3), b3 -= (U2 - e4) * B2, b3 = b3 > 1 ? 1 : b3 < 0 ? 0 : b3;
      return Math.abs(f5 * b3 * b3 * b3 + T2 * b3 * b3 + E2 * b3 * x3);
    }
    static getSpline(e4, t4 = 0.5) {
      let n2, [o3, s3, a3] = e4, c3 = [];
      for (let i3 = 1, l2 = e4.length; i3 < l2; i3++)
        n2 = o3, o3 = s3, s3 = a3, a3 = e4[i3 + 2] ? e4[i3 + 2] : s3, c3.push({ cp1x: o3[0] + (s3[0] - n2[0]) / 6 * t4, cp1y: o3[1] + (s3[1] - n2[1]) / 6 * t4, cp2x: s3[0] - (a3[0] - o3[0]) / 6 * t4, cp2y: s3[1] - (a3[1] - o3[1]) / 6 * t4, px: e4[i3][0], py: e4[i3][1] });
      return c3;
    }
    static getCurvePoints(e4, t4 = 0.5, n2 = false, o3 = 3) {
      let s3 = [...e4], a3 = e4.length, c3 = [], i3, l2, u2, d4, p3, h4, f5, T2, E2, x3, g2;
      n2 ? (s3.unshift(s3[a3 - 1]), s3.push(s3[0])) : (s3.unshift(s3[0]), s3.push(s3[a3 - 1]));
      for (let y2 = 1; y2 < s3.length - 2; y2++)
        for (let B2 = 0; B2 <= o3; B2++)
          E2 = B2 / o3, x3 = Math.pow(E2, 2), g2 = Math.pow(E2, 3), p3 = 2 * g2 - 3 * x3 + 1, h4 = -(2 * g2) + 3 * x3, f5 = g2 - 2 * x3 + E2, T2 = g2 - x3, i3 = (s3[y2 + 1][0] - s3[y2 - 1][0]) * t4, l2 = (s3[y2 + 2][0] - s3[y2][0]) * t4, u2 = (s3[y2 + 1][1] - s3[y2 - 1][1]) * t4, d4 = (s3[y2 + 2][1] - s3[y2][1]) * t4, c3.push([p3 * s3[y2][0] + h4 * s3[y2 + 1][0] + f5 * i3 + T2 * l2, p3 * s3[y2][1] + h4 * s3[y2 + 1][1] + f5 * u2 + T2 * d4]);
      return c3.push(e4[e4.length - 1]), c3;
    }
    static simplify(e4, t4 = 1) {
      let n2 = e4.length, o3 = e4[0], s3 = e4[n2 - 1], [a3, c3] = o3, [i3, l2] = s3;
      if (n2 > 2) {
        let u2 = 0, d4 = 0, p3 = Math.hypot(l2 - c3, i3 - a3);
        for (let h4 = 1; h4 < n2 - 1; h4++) {
          let [f5, T2] = e4[h4], E2 = Math.abs((l2 - c3) * f5 - (i3 - a3) * T2 + i3 * c3 - l2 * a3) / p3;
          u2 > E2 || (u2 = E2, d4 = h4);
        }
        if (u2 > t4) {
          let h4 = k.simplify(e4.slice(0, d4 + 1), t4), f5 = k.simplify(e4.slice(d4 + 1), t4);
          return h4.concat(f5.slice(1));
        }
      }
      return [o3, s3];
    }
    static pointInCircle(e4, t4, n2) {
      return e.dist(e4, t4) <= n2;
    }
    static pointInEllipse(e4, t4, n2, o3, s3 = 0) {
      s3 = s3 || 0;
      let a3 = Math.cos(s3), c3 = Math.sin(s3), i3 = e.sub(e4, t4), l2 = a3 * i3[0] + c3 * i3[1], u2 = c3 * i3[0] - a3 * i3[1];
      return l2 * l2 / (n2 * n2) + u2 * u2 / (o3 * o3) <= 1;
    }
    static pointInRect(e4, t4) {
      return !(e4[0] < t4[0] || e4[0] > e4[0] + t4[0] || e4[1] < t4[1] || e4[1] > e4[1] + t4[1]);
    }
    static pointInPolygon(e4, t4) {
      let n2 = 0;
      return t4.forEach((o3, s3) => {
        let a3 = t4[(s3 + 1) % t4.length];
        o3[1] <= e4[1] ? a3[1] > e4[1] && e.cross(o3, a3, e4) > 0 && (n2 += 1) : a3[1] <= e4[1] && e.cross(o3, a3, e4) < 0 && (n2 -= 1);
      }), n2 !== 0;
    }
    static expandBounds(e4, t4) {
      return { minX: e4.minX - t4, minY: e4.minY - t4, maxX: e4.maxX + t4, maxY: e4.maxY + t4, width: e4.width + t4 * 2, height: e4.height + t4 * 2 };
    }
    static pointInBounds(e4, t4) {
      return !(e4[0] < t4.minX || e4[0] > t4.maxX || e4[1] < t4.minY || e4[1] > t4.maxY);
    }
    static boundsCollide(e4, t4) {
      return !(e4.maxX < t4.minX || e4.minX > t4.maxX || e4.maxY < t4.minY || e4.minY > t4.maxY);
    }
    static boundsContain(e4, t4) {
      return e4.minX < t4.minX && e4.minY < t4.minY && e4.maxY > t4.maxY && e4.maxX > t4.maxX;
    }
    static boundsContained(e4, t4) {
      return k.boundsContain(t4, e4);
    }
    static boundsAreEqual(e4, t4) {
      return !(t4.maxX !== e4.maxX || t4.minX !== e4.minX || t4.maxY !== e4.maxY || t4.minY !== e4.minY);
    }
    static getBoundsFromPoints(e4, t4 = 0) {
      let n2 = 1 / 0, o3 = 1 / 0, s3 = -1 / 0, a3 = -1 / 0;
      if (e4.length < 2)
        n2 = 0, o3 = 0, s3 = 1, a3 = 1;
      else
        for (let [c3, i3] of e4)
          n2 = Math.min(c3, n2), o3 = Math.min(i3, o3), s3 = Math.max(c3, s3), a3 = Math.max(i3, a3);
      return t4 !== 0 ? k.getBoundsFromPoints(e4.map((c3) => e.rotWith(c3, [(n2 + s3) / 2, (o3 + a3) / 2], t4))) : { minX: n2, minY: o3, maxX: s3, maxY: a3, width: Math.max(1, s3 - n2), height: Math.max(1, a3 - o3) };
    }
    static centerBounds(e4, t4) {
      let n2 = this.getBoundsCenter(e4), o3 = t4[0] - n2[0], s3 = t4[1] - n2[1];
      return this.translateBounds(e4, [o3, s3]);
    }
    static translateBounds(e4, t4) {
      return { minX: e4.minX + t4[0], minY: e4.minY + t4[1], maxX: e4.maxX + t4[0], maxY: e4.maxY + t4[1], width: e4.width, height: e4.height };
    }
    static rotateBounds(e4, t4, n2) {
      let [o3, s3] = e.rotWith([e4.minX, e4.minY], t4, n2), [a3, c3] = e.rotWith([e4.maxX, e4.maxY], t4, n2);
      return { minX: o3, minY: s3, maxX: a3, maxY: c3, width: e4.width, height: e4.height };
    }
    static getRotatedEllipseBounds(e4, t4, n2, o3, s3 = 0) {
      let a3 = Math.cos(s3), c3 = Math.sin(s3), i3 = Math.hypot(n2 * a3, o3 * c3), l2 = Math.hypot(n2 * c3, o3 * a3);
      return { minX: e4 + n2 - i3, minY: t4 + o3 - l2, maxX: e4 + n2 + i3, maxY: t4 + o3 + l2, width: i3 * 2, height: l2 * 2 };
    }
    static getExpandedBounds(e4, t4) {
      let n2 = Math.min(e4.minX, t4.minX), o3 = Math.min(e4.minY, t4.minY), s3 = Math.max(e4.maxX, t4.maxX), a3 = Math.max(e4.maxY, t4.maxY), c3 = Math.abs(s3 - n2), i3 = Math.abs(a3 - o3);
      return { minX: n2, minY: o3, maxX: s3, maxY: a3, width: c3, height: i3 };
    }
    static getCommonBounds(e4) {
      if (e4.length < 2)
        return e4[0];
      let t4 = e4[0];
      for (let n2 = 1; n2 < e4.length; n2++)
        t4 = k.getExpandedBounds(t4, e4[n2]);
      return t4;
    }
    static getRotatedCorners(e4, t4 = 0) {
      let n2 = [e4.minX + e4.width / 2, e4.minY + e4.height / 2];
      return [[e4.minX, e4.minY], [e4.maxX, e4.minY], [e4.maxX, e4.maxY], [e4.minX, e4.maxY]].map((o3) => e.rotWith(o3, n2, t4));
    }
    static getTransformedBoundingBox(e4, t4, n2, o3 = 0, s3 = false) {
      let [a3, c3] = [e4.minX, e4.minY], [i3, l2] = [e4.maxX, e4.maxY], [u2, d4] = [e4.minX, e4.minY], [p3, h4] = [e4.maxX, e4.maxY];
      if (t4 === "center")
        return { minX: u2 + n2[0], minY: d4 + n2[1], maxX: p3 + n2[0], maxY: h4 + n2[1], width: p3 - u2, height: h4 - d4, scaleX: 1, scaleY: 1 };
      let [f5, T2] = e.rot(n2, -o3);
      switch (t4) {
        case R.Top:
        case v.TopLeft:
        case v.TopRight: {
          d4 += T2;
          break;
        }
        case R.Bottom:
        case v.BottomLeft:
        case v.BottomRight: {
          h4 += T2;
          break;
        }
      }
      switch (t4) {
        case R.Left:
        case v.TopLeft:
        case v.BottomLeft: {
          u2 += f5;
          break;
        }
        case R.Right:
        case v.TopRight:
        case v.BottomRight: {
          p3 += f5;
          break;
        }
      }
      let E2 = i3 - a3, x3 = l2 - c3, g2 = (p3 - u2) / E2, y2 = (h4 - d4) / x3, B2 = g2 < 0, U2 = y2 < 0, b3 = Math.abs(p3 - u2), Y4 = Math.abs(h4 - d4);
      if (s3) {
        let w2 = E2 / x3, K2 = w2 < b3 / Y4, O2 = b3 * (y2 < 0 ? 1 : -1) * (1 / w2), Le = Y4 * (g2 < 0 ? 1 : -1) * w2;
        switch (t4) {
          case v.TopLeft: {
            K2 ? d4 = h4 + O2 : u2 = p3 + Le;
            break;
          }
          case v.TopRight: {
            K2 ? d4 = h4 + O2 : p3 = u2 - Le;
            break;
          }
          case v.BottomRight: {
            K2 ? h4 = d4 - O2 : p3 = u2 - Le;
            break;
          }
          case v.BottomLeft: {
            K2 ? h4 = d4 - O2 : u2 = p3 + Le;
            break;
          }
          case R.Bottom:
          case R.Top: {
            let oe = (u2 + p3) / 2, se = Y4 * w2;
            u2 = oe - se / 2, p3 = oe + se / 2;
            break;
          }
          case R.Left:
          case R.Right: {
            let oe = (d4 + h4) / 2, se = b3 / w2;
            d4 = oe - se / 2, h4 = oe + se / 2;
            break;
          }
        }
      }
      if (o3 % (Math.PI * 2) != 0) {
        let w2 = [0, 0], K2 = e.med([a3, c3], [i3, l2]), O2 = e.med([u2, d4], [p3, h4]);
        switch (t4) {
          case v.TopLeft: {
            w2 = e.sub(e.rotWith([p3, h4], O2, o3), e.rotWith([i3, l2], K2, o3));
            break;
          }
          case v.TopRight: {
            w2 = e.sub(e.rotWith([u2, h4], O2, o3), e.rotWith([a3, l2], K2, o3));
            break;
          }
          case v.BottomRight: {
            w2 = e.sub(e.rotWith([u2, d4], O2, o3), e.rotWith([a3, c3], K2, o3));
            break;
          }
          case v.BottomLeft: {
            w2 = e.sub(e.rotWith([p3, d4], O2, o3), e.rotWith([i3, c3], K2, o3));
            break;
          }
          case R.Top: {
            w2 = e.sub(e.rotWith(e.med([u2, h4], [p3, h4]), O2, o3), e.rotWith(e.med([a3, l2], [i3, l2]), K2, o3));
            break;
          }
          case R.Left: {
            w2 = e.sub(e.rotWith(e.med([p3, d4], [p3, h4]), O2, o3), e.rotWith(e.med([i3, c3], [i3, l2]), K2, o3));
            break;
          }
          case R.Bottom: {
            w2 = e.sub(e.rotWith(e.med([u2, d4], [p3, d4]), O2, o3), e.rotWith(e.med([a3, c3], [i3, c3]), K2, o3));
            break;
          }
          case R.Right: {
            w2 = e.sub(e.rotWith(e.med([u2, d4], [u2, h4]), O2, o3), e.rotWith(e.med([a3, c3], [a3, l2]), K2, o3));
            break;
          }
        }
        [u2, d4] = e.sub([u2, d4], w2), [p3, h4] = e.sub([p3, h4], w2);
      }
      return p3 < u2 && ([p3, u2] = [u2, p3]), h4 < d4 && ([h4, d4] = [d4, h4]), { minX: u2, minY: d4, maxX: p3, maxY: h4, width: p3 - u2, height: h4 - d4, scaleX: (p3 - u2) / (i3 - a3 || 1) * (B2 ? -1 : 1), scaleY: (h4 - d4) / (l2 - c3 || 1) * (U2 ? -1 : 1) };
    }
    static getTransformAnchor(e4, t4, n2) {
      let o3 = e4;
      switch (e4) {
        case v.TopLeft: {
          t4 && n2 ? o3 = v.BottomRight : t4 ? o3 = v.TopRight : n2 ? o3 = v.BottomLeft : o3 = v.BottomRight;
          break;
        }
        case v.TopRight: {
          t4 && n2 ? o3 = v.BottomLeft : t4 ? o3 = v.TopLeft : n2 ? o3 = v.BottomRight : o3 = v.BottomLeft;
          break;
        }
        case v.BottomRight: {
          t4 && n2 ? o3 = v.TopLeft : t4 ? o3 = v.BottomLeft : n2 ? o3 = v.TopRight : o3 = v.TopLeft;
          break;
        }
        case v.BottomLeft: {
          t4 && n2 ? o3 = v.TopRight : t4 ? o3 = v.BottomRight : n2 ? o3 = v.TopLeft : o3 = v.TopRight;
          break;
        }
      }
      return o3;
    }
    static getRelativeTransformedBoundingBox(e4, t4, n2, o3, s3) {
      let a3 = (o3 ? t4.maxX - n2.maxX : n2.minX - t4.minX) / t4.width, c3 = (s3 ? t4.maxY - n2.maxY : n2.minY - t4.minY) / t4.height, i3 = n2.width / t4.width, l2 = n2.height / t4.height, u2 = e4.minX + e4.width * a3, d4 = e4.minY + e4.height * c3, p3 = e4.width * i3, h4 = e4.height * l2;
      return { minX: u2, minY: d4, maxX: u2 + p3, maxY: d4 + h4, width: p3, height: h4 };
    }
    static getRotatedSize(e4, t4) {
      let n2 = e.div(e4, 2), o3 = [[0, 0], [e4[0], 0], e4, [0, e4[1]]].map((a3) => e.rotWith(a3, n2, t4)), s3 = k.getBoundsFromPoints(o3);
      return [s3.width, s3.height];
    }
    static getBoundsCenter(e4) {
      return [e4.minX + e4.width / 2, e4.minY + e4.height / 2];
    }
    static getBoundsWithCenter(e4) {
      let t4 = k.getBoundsCenter(e4);
      return A(L({}, e4), { midX: t4[0], midY: t4[1] });
    }
    static removeDuplicatePoints(e4) {
      return e4.reduce((t4, n2, o3) => ((o3 === 0 || !e.isEqual(n2, t4[o3 - 1])) && t4.push(n2), t4), []);
    }
    static getFromCache(e4, t4, n2) {
      let o3 = e4.get(t4);
      if (o3 === void 0 && (e4.set(t4, n2()), o3 = e4.get(t4), o3 === void 0))
        throw Error("Cache did not include item!");
      return o3;
    }
    static uniqueId(e4 = "") {
      return e4 ? ((Number(e4) ^ Math.random() * 16) >> Number(e4) / 4).toString(16) : `${1e7}-${1e3}-${4e3}-${8e3}-${1e11}`.replace(/[018]/g, k.uniqueId);
    }
    static rotateArray(e4, t4) {
      return e4.map((n2, o3) => e4[(o3 + t4) % e4.length]);
    }
    static deepCompareArrays(e4, t4) {
      return (e4 == null ? void 0 : e4.length) !== (t4 == null ? void 0 : t4.length) ? false : k.deepCompare(e4, t4);
    }
    static deepCompare(e4, t4) {
      return e4 === t4 || JSON.stringify(e4) === JSON.stringify(t4);
    }
    static arrsIntersect(e4, t4, n2) {
      return e4.some((o3) => t4.includes(n2 ? n2(o3) : o3));
    }
    static uniqueArray(...e4) {
      return Array.from(new Set(e4).values());
    }
    static setToArray(e4) {
      return Array.from(e4.values());
    }
    static debounce(e4, t4 = 0) {
      let n2;
      return function(...o3) {
        clearTimeout(n2), n2 = setTimeout(() => e4.apply(o3), t4);
      };
    }
    static getSvgPathFromStroke(e4, t4 = true) {
      if (!e4.length)
        return "";
      let n2 = e4.length - 1;
      return e4.reduce((o3, s3, a3, c3) => (a3 === n2 ? t4 && o3.push("Z") : o3.push(s3, e.med(s3, c3[a3 + 1])), o3), ["M", e4[0], "Q"]).join(" ").replaceAll(this.TRIM_NUMBERS, "$1");
    }
    static getPerfectDashProps(e4, t4, n2, o3 = 1, s3 = true) {
      let a3, c3, i3;
      if (n2.toLowerCase() === "dashed")
        a3 = t4 * 2, i3 = 1, c3 = s3 ? (a3 / 2).toString() : "0";
      else if (n2.toLowerCase() === "dotted")
        a3 = t4 / 100, i3 = 100, c3 = "0";
      else
        return { strokeDasharray: "none", strokeDashoffset: "none" };
      let l2 = Math.floor(e4 / a3 / (2 * i3));
      l2 -= l2 % o3, l2 = Math.max(l2, 4);
      let u2 = Math.max(a3, (e4 - l2 * a3) / (s3 ? l2 : l2 - 1));
      return { strokeDasharray: [a3, u2].join(" "), strokeDashoffset: c3 };
    }
    static isMobileSize() {
      return typeof window == "undefined" ? false : window.innerWidth < 768;
    }
    static isMobileSafari() {
      if (typeof window == "undefined")
        return false;
      let e4 = window.navigator.userAgent, t4 = !!e4.match(/iPad/i) || !!e4.match(/iPhone/i), n2 = !!e4.match(/WebKit/i);
      return t4 && n2 && !e4.match(/CriOS/i);
    }
    static throttle(e4, t4) {
      let n2, o3;
      return function(...s3) {
        return n2 || (n2 = true, setTimeout(() => n2 = false, t4), o3 = e4(...s3)), o3;
      };
    }
    static isDarwin() {
      return /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);
    }
    static metaKey(e4) {
      return k.isDarwin() ? e4.metaKey : e4.ctrlKey;
    }
  };
  var S = k;
  S.deepMerge = (e4, t4) => {
    let n2 = L({}, e4), o3 = Object.entries(t4);
    for (let [s3, a3] of o3)
      n2[s3] = a3 === Object(a3) && !Array.isArray(a3) ? k.deepMerge(n2[s3], a3) : a3;
    return n2;
  }, S.getSnapPoints = (e4, t4, n2) => {
    let o3 = L({}, e4), s3 = [0, 0], a3 = [], c3 = { [I.minX]: { id: I.minX, isSnapped: false }, [I.midX]: { id: I.midX, isSnapped: false }, [I.maxX]: { id: I.maxX, isSnapped: false }, [I.minY]: { id: I.minY, isSnapped: false }, [I.midY]: { id: I.midY, isSnapped: false }, [I.maxY]: { id: I.maxY, isSnapped: false } }, i3 = [I.midX, I.minX, I.maxX], l2 = [I.midY, I.minY, I.maxY], u2 = t4.map((T2) => {
      let E2 = i3.flatMap((g2, y2) => i3.map((B2, U2) => {
        let b3 = o3[g2] - T2[B2], Y4 = Math.abs(b3);
        return { f: g2, t: B2, gap: b3, distance: Y4, isCareful: y2 === 0 || y2 + U2 === 3 };
      })), x3 = l2.flatMap((g2, y2) => l2.map((B2, U2) => {
        let b3 = o3[g2] - T2[B2], Y4 = Math.abs(b3);
        return { f: g2, t: B2, gap: b3, distance: Y4, isCareful: y2 === 0 || y2 + U2 === 3 };
      }));
      return [T2, E2, x3];
    }), d4 = 1 / 0, p3 = 1 / 0, h4 = 1 / 0, f5 = 1 / 0;
    return u2.forEach(([T2, E2, x3]) => {
      E2.forEach((g2) => {
        g2.distance < n2 && g2.distance < h4 && (h4 = g2.distance, d4 = g2.gap);
      }), x3.forEach((g2) => {
        g2.distance < n2 && g2.distance < f5 && (f5 = g2.distance, p3 = g2.gap);
      });
    }), u2.forEach(([T2, E2, x3]) => {
      d4 !== 1 / 0 && E2.forEach((g2) => {
        Math.abs(g2.gap - d4) < 2 && (c3[g2.f] = A(L({}, c3[g2.f]), { isSnapped: true, to: T2[g2.t], B: T2, distance: g2.distance }));
      }), p3 !== 1 / 0 && x3.forEach((g2) => {
        Math.abs(g2.gap - p3) < 2 && (c3[g2.f] = A(L({}, c3[g2.f]), { isSnapped: true, to: T2[g2.t], B: T2, distance: g2.distance }));
      });
    }), s3[0] = d4 === 1 / 0 ? 0 : d4, s3[1] = p3 === 1 / 0 ? 0 : p3, o3.minX -= s3[0], o3.midX -= s3[0], o3.maxX -= s3[0], o3.minY -= s3[1], o3.midY -= s3[1], o3.maxY -= s3[1], i3.forEach((T2) => {
      let E2 = c3[T2];
      if (!E2.isSnapped)
        return;
      let { id: x3, B: g2 } = E2, y2 = o3[x3];
      a3.push(x3 === I.minX ? [[y2, o3.midY], [y2, g2.minY], [y2, g2.maxY]] : [[y2, o3.minY], [y2, o3.maxY], [y2, g2.minY], [y2, g2.maxY]]);
    }), l2.forEach((T2) => {
      let E2 = c3[T2];
      if (!E2.isSnapped)
        return;
      let { id: x3, B: g2 } = E2, y2 = o3[x3];
      a3.push(x3 === I.midY ? [[o3.midX, y2], [g2.minX, y2], [g2.maxX, y2]] : [[o3.minX, y2], [o3.maxX, y2], [g2.minX, y2], [g2.maxX, y2]]);
    }), { offset: s3, snapLines: a3 };
  }, S.TRIM_NUMBERS = /(\s?[A-Z]?,?-?[0-9]*\.[0-9]{0,2})(([0-9]|e|-)*)/g;
  var _ = S;
  function Nt() {
    let { callbacks: r2 } = P();
    (0, import_react6.useEffect)(() => {
      function e4() {
        var t4;
        (t4 = r2.onShapeBlur) == null || t4.call(r2);
      }
      return _.isMobileSafari() ? (document.addEventListener("focusout", e4), () => document.removeEventListener("focusout", e4)) : () => null;
    }, [r2]);
  }
  function Ft() {
    let { callbacks: r2, inputs: e4 } = P(), t4 = (0, import_react7.useCallback)((s3) => {
      var c3, i3;
      if (s3.button !== 0 || !e4.pointerIsValid(s3))
        return;
      s3.currentTarget.setPointerCapture(s3.pointerId);
      let a3 = e4.pointerDown(s3, "canvas");
      s3.button === 0 && ((c3 = r2.onPointCanvas) == null || c3.call(r2, a3, s3), (i3 = r2.onPointerDown) == null || i3.call(r2, a3, s3));
    }, [r2, e4]), n2 = (0, import_react7.useCallback)((s3) => {
      var c3, i3;
      if (!e4.pointerIsValid(s3))
        return;
      let a3 = e4.pointerMove(s3, "canvas");
      s3.currentTarget.hasPointerCapture(s3.pointerId) && ((c3 = r2.onDragCanvas) == null || c3.call(r2, a3, s3)), (i3 = r2.onPointerMove) == null || i3.call(r2, a3, s3);
    }, [r2, e4]), o3 = (0, import_react7.useCallback)((s3) => {
      var i3, l2, u2, d4;
      if (s3.button !== 0 || !e4.pointerIsValid(s3))
        return;
      let a3 = e4.isDoubleClick(), c3 = e4.pointerUp(s3, "canvas");
      s3.currentTarget.hasPointerCapture(s3.pointerId) && ((i3 = s3.currentTarget) == null || i3.releasePointerCapture(s3.pointerId)), a3 && !(c3.altKey || c3.metaKey) && ((l2 = r2.onDoubleClickCanvas) == null || l2.call(r2, c3, s3)), (u2 = r2.onReleaseCanvas) == null || u2.call(r2, c3, s3), (d4 = r2.onPointerUp) == null || d4.call(r2, c3, s3);
    }, [r2, e4]);
    return { onPointerDown: t4, onPointerMove: n2, onPointerUp: o3 };
  }
  function Wt(r2) {
    let { rPageState: e4, rSelectionBounds: t4, callbacks: n2, inputs: o3 } = (0, import_react8.useContext)(ie), s3 = (0, import_react8.useCallback)((u2) => {
      var p3, h4, f5, T2, E2, x3;
      if (!o3.pointerIsValid(u2))
        return;
      if (u2.button === 2) {
        (p3 = n2.onRightPointShape) == null || p3.call(n2, o3.pointerDown(u2, r2), u2);
        return;
      }
      if (u2.button !== 0)
        return;
      let d4 = o3.pointerDown(u2, r2);
      if (u2.stopPropagation(), (h4 = u2.currentTarget) == null || h4.setPointerCapture(u2.pointerId), t4.current && S.pointInBounds(d4.point, t4.current) && !e4.current.selectedIds.includes(r2)) {
        (f5 = n2.onPointBounds) == null || f5.call(n2, o3.pointerDown(u2, "bounds"), u2), (T2 = n2.onPointShape) == null || T2.call(n2, d4, u2);
        return;
      }
      (E2 = n2.onPointShape) == null || E2.call(n2, d4, u2), (x3 = n2.onPointerDown) == null || x3.call(n2, d4, u2);
    }, [o3, n2, r2]), a3 = (0, import_react8.useCallback)((u2) => {
      var h4, f5, T2, E2;
      if (u2.button !== 0 || !o3.pointerIsValid(u2))
        return;
      u2.stopPropagation();
      let d4 = o3.isDoubleClick(), p3 = o3.pointerUp(u2, r2);
      u2.currentTarget.hasPointerCapture(u2.pointerId) && ((h4 = u2.currentTarget) == null || h4.releasePointerCapture(u2.pointerId)), d4 && !(p3.altKey || p3.metaKey) && ((f5 = n2.onDoubleClickShape) == null || f5.call(n2, p3, u2)), (T2 = n2.onReleaseShape) == null || T2.call(n2, p3, u2), (E2 = n2.onPointerUp) == null || E2.call(n2, p3, u2);
    }, [o3, n2, r2]), c3 = (0, import_react8.useCallback)((u2) => {
      var p3, h4;
      if (!o3.pointerIsValid(u2) || (u2.stopPropagation(), o3.pointer && u2.pointerId !== o3.pointer.pointerId))
        return;
      let d4 = o3.pointerMove(u2, r2);
      u2.currentTarget.hasPointerCapture(u2.pointerId) && ((p3 = n2.onDragShape) == null || p3.call(n2, d4, u2)), (h4 = n2.onPointerMove) == null || h4.call(n2, d4, u2);
    }, [o3, n2, r2]), i3 = (0, import_react8.useCallback)((u2) => {
      var p3;
      if (!o3.pointerIsValid(u2))
        return;
      let d4 = o3.pointerEnter(u2, r2);
      (p3 = n2.onHoverShape) == null || p3.call(n2, d4, u2);
    }, [o3, n2, r2]), l2 = (0, import_react8.useCallback)((u2) => {
      var p3;
      if (!o3.pointerIsValid(u2))
        return;
      let d4 = o3.pointerEnter(u2, r2);
      (p3 = n2.onUnhoverShape) == null || p3.call(n2, d4, u2);
    }, [o3, n2, r2]);
    return { onPointerDown: s3, onPointerUp: a3, onPointerEnter: i3, onPointerMove: c3, onPointerLeave: l2 };
  }
  function Vt(r2, e4, t4, n2, o3) {
    let s3 = { shape: r2, meta: o3, isEditing: n2.editingId === r2.id, isBinding: n2.bindingTargetId === r2.id, isSelected: n2.selectedIds.includes(r2.id), isHovered: n2.hoveredId === r2.id || r2.children !== void 0 && (n2.hoveredId && r2.children.includes(n2.hoveredId) || r2.children.some((a3) => n2.selectedIds.includes(a3))) };
    e4.push(s3), r2.children && (s3.children = [], r2.children.map((a3) => t4[a3]).sort((a3, c3) => a3.childIndex - c3.childIndex).forEach((a3) => Vt(a3, s3.children, t4, n2, o3)));
  }
  function Sr(r2, e4) {
    return S.boundsContain(e4, r2) || S.boundsCollide(e4, r2);
  }
  function $t(r2, e4, t4, n2, o3, s3) {
    let a3 = (0, import_react9.useRef)(), c3 = (0, import_react9.useRef)(0), i3 = (0, import_react9.useRef)(new Set()), l2 = (0, import_react9.useRef)(new Set()), { selectedIds: u2, camera: d4 } = e4, [p3, h4] = e.sub(e.div([0, 0], d4.zoom), d4.point), [f5, T2] = e.sub(e.div(n2, d4.zoom), d4.point), E2 = { minX: p3, minY: h4, maxX: f5, maxY: T2, height: f5 - p3, width: T2 - h4 }, x3 = l2.current, g2 = i3.current;
    x3.clear(), g2.clear(), Object.values(r2.shapes).filter((b3) => t4[b3.type].isStateful || u2.includes(b3.id) || Sr(t4[b3.type].getBounds(b3), E2)).sort((b3, Y4) => b3.childIndex - Y4.childIndex).forEach((b3) => {
      if (b3.parentId === r2.id) {
        g2.add(b3.id), x3.add(b3);
        return;
      }
      g2.add(b3.parentId), x3.add(r2.shapes[b3.parentId]);
    }), x3.size !== c3.current && (a3.current && clearTimeout(a3.current), a3.current = requestAnimationFrame(() => {
      s3 == null || s3(Array.from(g2.values()));
    }), c3.current = x3.size);
    let y2 = e4.bindingId ? r2.bindings[e4.bindingId].toId : void 0, B2 = [], U2 = A(L({}, e4), { bindingTargetId: y2 });
    return x3.forEach((b3) => Vt(b3, B2, r2.shapes, U2, o3)), B2;
  }
  var ze = new Map();
  function Cr(r2, e4) {
    return Object.keys(e4).reduce((t4, n2) => {
      let o3 = e4[n2];
      return o3 ? t4 + `${`--${r2}-${n2}`}: ${o3};
` : t4;
    }, "");
  }
  function Br(r2, e4, t4 = ":root") {
    (0, import_react10.useLayoutEffect)(() => {
      let n2 = document.createElement("style"), o3 = Cr(r2, e4);
      return n2.setAttribute("id", `${r2}-theme`), n2.setAttribute("data-selector", t4), n2.innerHTML = `
        ${t4} {
          ${o3}
        }
      `, document.head.appendChild(n2), () => {
        n2 && document.head.contains(n2) && document.head.removeChild(n2);
      };
    }, [r2, e4, t4]);
  }
  function Ir(r2, e4) {
    (0, import_react10.useLayoutEffect)(() => {
      if (ze.get(r2))
        return () => {
        };
      let t4 = document.createElement("style");
      return t4.innerHTML = e4, t4.setAttribute("id", r2), document.head.appendChild(t4), ze.set(r2, t4), () => {
        t4 && document.head.contains(t4) && (document.head.removeChild(t4), ze.delete(r2));
      };
    }, [r2, e4]);
  }
  var kr = (r2, ...e4) => r2.reduce((t4, n2, o3) => t4 + n2 + (o3 < e4.length ? e4[o3] : ""), "");
  var Mr = { accent: "rgb(255, 0, 0)", brushFill: "rgba(0,0,0,.05)", brushStroke: "rgba(0,0,0,.25)", selectStroke: "rgb(66, 133, 244)", selectFill: "rgba(65, 132, 244, 0.05)", background: "rgb(248, 249, 250)", foreground: "rgb(51, 51, 51)" };
  var Hr = kr`
  @font-face {
    font-family: 'Recursive';
    font-style: normal;
    font-weight: 500;
    font-display: swap;
    src: url(https://fonts.gstatic.com/s/recursive/v23/8vI-7wMr0mhh-RQChyHEH06TlXhq_gukbYrFMk1QuAIcyEwG_X-dpEfaE5YaERmK-CImKsvxvU-MXGX2fSqasNfUlTGZnI14ZeY.woff2)
      format('woff2');
    unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC,
      U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
  }

  @font-face {
    font-family: 'Recursive';
    font-style: normal;
    font-weight: 700;
    font-display: swap;
    src: url(https://fonts.gstatic.com/s/recursive/v23/8vI-7wMr0mhh-RQChyHEH06TlXhq_gukbYrFMk1QuAIcyEwG_X-dpEfaE5YaERmK-CImKsvxvU-MXGX2fSqasNfUlTGZnI14ZeY.woff2)
      format('woff2');
    unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC,
      U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
  }

  @font-face {
    font-family: 'Recursive Mono';
    font-style: normal;
    font-weight: 420;
    font-display: swap;
    src: url(https://fonts.gstatic.com/s/recursive/v23/8vI-7wMr0mhh-RQChyHEH06TlXhq_gukbYrFMk1QuAIcyEwG_X-dpEfaE5YaERmK-CImqvTxvU-MXGX2fSqasNfUlTGZnI14ZeY.woff2)
      format('woff2');
    unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC,
      U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
  }

  .tl-container {
    --tl-zoom: 1;
    --tl-scale: calc(1 / var(--tl-zoom));
    --tl-padding: calc(64px * max(1, var(--tl-scale)));
    position: relative;
    top: 0px;
    left: 0px;
    width: 100%;
    height: 100%;
    max-width: 100%;
    max-height: 100%;
    box-sizing: border-box;
    padding: 0px;
    margin: 0px;
    z-index: 100;
    overflow: hidden;
    touch-action: none;
    overscroll-behavior: none;
    background-color: var(--tl-background);
  }

  .tl-container * {
    box-sizing: border-box;
  }

  .tl-overlay {
    position: absolute;
    width: 100%;
    height: 100%;
    touch-action: none;
    pointer-events: none;
  }

  .tl-snap-line {
    stroke: var(--tl-accent);
    stroke-width: calc(1px * var(--tl-scale));
  }

  .tl-snap-point {
    stroke: var(--tl-accent);
    stroke-width: calc(1px * var(--tl-scale));
  }

  .tl-canvas {
    position: absolute;
    width: 100%;
    height: 100%;
    touch-action: none;
    pointer-events: all;
    overflow: clip;
  }

  .tl-layer {
    position: absolute;
    top: 0px;
    left: 0px;
    height: 0px;
    width: 0px;
    contain: layout style size;
  }

  .tl-absolute {
    position: absolute;
    top: 0px;
    left: 0px;
    transform-origin: center center;
    contain: layout style size;
  }

  .tl-positioned {
    position: absolute;
    top: 0px;
    left: 0px;
    transform-origin: center center;
    pointer-events: none;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    contain: layout style size;
  }

  .tl-positioned-svg {
    width: 100%;
    height: 100%;
    overflow: hidden;
    contain: layout style size;
  }

  .tl-positioned-div {
    position: relative;
    width: 100%;
    height: 100%;
    overflow: hidden;
    padding: var(--tl-padding);
    overflow: hidden;
    contain: layout style size;
  }

  .tl-counter-scaled {
    transform: scale(var(--tl-scale));
  }

  .tl-dashed {
    stroke-dasharray: calc(2px * var(--tl-scale)), calc(2px * var(--tl-scale));
  }

  .tl-transparent {
    fill: transparent;
    stroke: transparent;
  }

  .tl-cursor-ns {
    cursor: ns-resize;
  }

  .tl-cursor-ew {
    cursor: ew-resize;
  }

  .tl-cursor-nesw {
    cursor: nesw-resize;
  }

  .tl-cursor-nwse {
    cursor: nwse-resize;
  }

  .tl-corner-handle {
    stroke: var(--tl-selectStroke);
    fill: var(--tl-background);
    stroke-width: calc(1.5px * var(--tl-scale));
  }

  .tl-rotate-handle {
    stroke: var(--tl-selectStroke);
    fill: var(--tl-background);
    stroke-width: calc(1.5px * var(--tl-scale));
    cursor: grab;
  }

  .tl-binding {
    fill: var(--tl-selectFill);
    stroke: var(--tl-selectStroke);
    stroke-width: calc(1px * var(--tl-scale));
    pointer-events: none;
  }

  .tl-user {
    left: -4px;
    top: -4px;
    height: 8px;
    width: 8px;
    border-radius: 100%;
    pointer-events: none;
  }

  .tl-indicator {
    fill: transparent;
    stroke-width: calc(1.5px * var(--tl-scale));
    pointer-events: none;
  }

  .tl-user-indicator-bounds {
    border-style: solid;
    border-width: calc(1px * var(--tl-scale));
  }

  .tl-selected {
    stroke: var(--tl-selectStroke);
  }

  .tl-hovered {
    stroke: var(--tl-selectStroke);
  }

  .tl-clone-target {
    pointer-events: all;
  }

  .tl-clone-target:hover .tl-clone-button {
    opacity: 1;
  }

  .tl-clone-button-target {
    cursor: pointer;
    pointer-events: all;
  }

  .tl-clone-button-target:hover .tl-clone-button {
    fill: var(--tl-selectStroke);
  }

  .tl-clone-button {
    opacity: 0;
    r: calc(8px * var(--tl-scale));
    stroke-width: calc(1.5px * var(--tl-scale));
    stroke: var(--tl-selectStroke);
    fill: var(--tl-background);
  }

  .tl-bounds {
    pointer-events: none;
    contain: layout style size;
  }

  .tl-bounds-bg {
    stroke: none;
    fill: var(--tl-selectFill);
    pointer-events: all;
    contain: layout style size;
  }

  .tl-bounds-center {
    fill: transparent;
    stroke: var(--tl-selectStroke);
    stroke-width: calc(1.5px * var(--tl-scale));
  }

  .tl-brush {
    fill: var(--tl-brushFill);
    stroke: var(--tl-brushStroke);
    stroke-width: calc(1px * var(--tl-scale));
    pointer-events: none;
    contain: layout style size;
  }

  .tl-dot {
    fill: var(--tl-background);
    stroke: var(--tl-foreground);
    stroke-width: 2px;
  }

  .tl-handle {
    pointer-events: all;
  }

  .tl-handle:hover .tl-handle-bg {
    fill: var(--tl-selectFill);
  }

  .tl-handle:hover .tl-handle-bg > * {
    stroke: var(--tl-selectFill);
  }

  .tl-handle:active .tl-handle-bg {
    fill: var(--tl-selectFill);
  }

  .tl-handle:active .tl-handle-bg > * {
    stroke: var(--tl-selectFill);
  }

  .tl-handle {
    fill: var(--tl-background);
    stroke: var(--tl-selectStroke);
    stroke-width: 1.5px;
  }

  .tl-handle-bg {
    fill: transparent;
    stroke: none;
    pointer-events: all;
    r: calc(16px / max(1, var(--tl-zoom)));
  }

  .tl-binding-indicator {
    stroke-width: calc(3px * var(--tl-scale));
    fill: var(--tl-selectFill);
    stroke: var(--tl-selected);
  }

  .tl-centered-g {
    transform: translate(var(--tl-padding), var(--tl-padding));
  }

  .tl-current-parent > *[data-shy='true'] {
    opacity: 1;
  }

  .tl-binding {
    fill: none;
    stroke: var(--tl-selectStroke);
    stroke-width: calc(2px * var(--tl-scale));
  }
`;
  function jt(r2, e4) {
    let t4 = (0, import_react10.useMemo)(() => L(L({}, Mr), r2), [r2]);
    Br("tl", t4, e4), Ir("tl-canvas", Hr);
  }
  function F(r2) {
    let { callbacks: e4, inputs: t4 } = P(), n2 = (0, import_react11.useCallback)((i3) => {
      var u2, d4, p3;
      if (i3.button !== 0 || !t4.pointerIsValid(i3))
        return;
      i3.stopPropagation(), (u2 = i3.currentTarget) == null || u2.setPointerCapture(i3.pointerId);
      let l2 = t4.pointerDown(i3, r2);
      (d4 = e4.onPointBoundsHandle) == null || d4.call(e4, l2, i3), (p3 = e4.onPointerDown) == null || p3.call(e4, l2, i3);
    }, [t4, e4, r2]), o3 = (0, import_react11.useCallback)((i3) => {
      var d4, p3, h4, f5;
      if (i3.button !== 0 || !t4.pointerIsValid(i3))
        return;
      i3.stopPropagation();
      let l2 = t4.isDoubleClick(), u2 = t4.pointerUp(i3, r2);
      i3.currentTarget.hasPointerCapture(i3.pointerId) && ((d4 = i3.currentTarget) == null || d4.releasePointerCapture(i3.pointerId)), l2 && !(u2.altKey || u2.metaKey) && ((p3 = e4.onDoubleClickBoundsHandle) == null || p3.call(e4, u2, i3)), (h4 = e4.onReleaseBoundsHandle) == null || h4.call(e4, u2, i3), (f5 = e4.onPointerUp) == null || f5.call(e4, u2, i3);
    }, [t4, e4, r2]), s3 = (0, import_react11.useCallback)((i3) => {
      var u2, d4;
      if (!t4.pointerIsValid(i3))
        return;
      i3.currentTarget.hasPointerCapture(i3.pointerId) && ((u2 = e4.onDragBoundsHandle) == null || u2.call(e4, t4.pointerMove(i3, r2), i3));
      let l2 = t4.pointerMove(i3, r2);
      (d4 = e4.onPointerMove) == null || d4.call(e4, l2, i3);
    }, [t4, e4, r2]), a3 = (0, import_react11.useCallback)((i3) => {
      var l2;
      !t4.pointerIsValid(i3) || (l2 = e4.onHoverBoundsHandle) == null || l2.call(e4, t4.pointerEnter(i3, r2), i3);
    }, [t4, e4, r2]), c3 = (0, import_react11.useCallback)((i3) => {
      var l2;
      !t4.pointerIsValid(i3) || (l2 = e4.onUnhoverBoundsHandle) == null || l2.call(e4, t4.pointerEnter(i3, r2), i3);
    }, [t4, e4, r2]);
    return { onPointerDown: n2, onPointerUp: o3, onPointerEnter: a3, onPointerMove: s3, onPointerLeave: c3 };
  }
  function Gt(r2, e4, t4) {
    let n2 = (0, import_react12.useRef)(t4.camera.zoom), o3 = (0, import_react12.useRef)(t4.camera.point);
    (0, import_react12.useLayoutEffect)(() => {
      let { zoom: s3, point: a3 } = t4.camera, c3 = s3 !== n2.current, i3 = a3 !== o3.current;
      if (n2.current = s3, o3.current = a3, c3 || i3) {
        let l2 = r2.current, u2 = e4.current;
        c3 && u2 && u2.style.setProperty("--tl-zoom", s3.toString()), l2 && l2.style.setProperty("transform", `scale(${s3}) translateX(${a3[0]}px) translateY(${a3[1]}px)`);
      }
    }, [t4.camera]);
  }
  function Zt(r2, e4) {
    return [(r2[0] + e4.point[0]) * e4.zoom, (r2[1] + e4.point[1]) * e4.zoom];
  }
  function Ge(r2, e4) {
    return r2[e4.type];
  }
  function Jt(r2, e4, t4) {
    let { rSelectionBounds: n2 } = P(), { selectedIds: o3 } = e4, s3 = (0, import_react13.useRef)(), a3, c3 = 0, i3 = false, l2 = false;
    if (o3.length === 1) {
      let d4 = o3[0], p3 = r2.shapes[d4];
      c3 = p3.rotation || 0, i3 = p3.isLocked || false;
      let h4 = Ge(t4, p3);
      a3 = h4.hideBounds ? void 0 : h4.getBounds(p3);
    } else if (o3.length > 1) {
      let d4 = o3.map((p3) => r2.shapes[p3]);
      c3 = 0, i3 = d4.every((p3) => p3.isLocked), a3 = d4.reduce((p3, h4, f5) => f5 === 0 ? Ge(t4, h4).getRotatedBounds(h4) : _.getExpandedBounds(p3, Ge(t4, h4).getRotatedBounds(h4)), {});
    }
    if (a3) {
      let [d4, p3] = Zt([a3.minX, a3.minY], e4.camera), [h4, f5] = Zt([a3.maxX, a3.maxY], e4.camera);
      l2 = !!Object.values(r2.bindings).find((T2) => o3.includes(T2.toId) || o3.includes(T2.fromId)), n2.current = { minX: d4, minY: p3, maxX: h4, maxY: f5, width: h4 - d4, height: f5 - p3 };
    } else
      n2.current = null;
    let u2 = s3.current;
    return !u2 || !a3 ? s3.current = a3 : a3 && u2.minX === a3.minX && u2.minY === a3.minY && u2.maxX === a3.maxX && u2.maxY === a3.maxY && (a3 = s3.current), { bounds: a3, rotation: c3, isLocked: i3, isLinked: l2 };
  }
  function Qt(r2) {
    let { inputs: e4, callbacks: t4 } = P(), n2 = (0, import_react14.useCallback)((i3) => {
      var u2, d4, p3;
      if (i3.button !== 0 || !e4.pointerIsValid(i3))
        return;
      i3.stopPropagation(), (u2 = i3.currentTarget) == null || u2.setPointerCapture(i3.pointerId);
      let l2 = e4.pointerDown(i3, r2);
      (d4 = t4.onPointHandle) == null || d4.call(t4, l2, i3), (p3 = t4.onPointerDown) == null || p3.call(t4, l2, i3);
    }, [e4, t4, r2]), o3 = (0, import_react14.useCallback)((i3) => {
      var d4, p3, h4, f5;
      if (i3.button !== 0 || !e4.pointerIsValid(i3))
        return;
      i3.stopPropagation();
      let l2 = e4.isDoubleClick(), u2 = e4.pointerUp(i3, r2);
      i3.currentTarget.hasPointerCapture(i3.pointerId) && ((d4 = i3.currentTarget) == null || d4.releasePointerCapture(i3.pointerId), l2 && !(u2.altKey || u2.metaKey) && ((p3 = t4.onDoubleClickHandle) == null || p3.call(t4, u2, i3)), (h4 = t4.onReleaseHandle) == null || h4.call(t4, u2, i3)), (f5 = t4.onPointerUp) == null || f5.call(t4, u2, i3);
    }, [e4, t4]), s3 = (0, import_react14.useCallback)((i3) => {
      var u2, d4;
      if (!e4.pointerIsValid(i3))
        return;
      if (i3.currentTarget.hasPointerCapture(i3.pointerId)) {
        let p3 = e4.pointerMove(i3, r2);
        (u2 = t4.onDragHandle) == null || u2.call(t4, p3, i3);
      }
      let l2 = e4.pointerMove(i3, r2);
      (d4 = t4.onPointerMove) == null || d4.call(t4, l2, i3);
    }, [e4, t4, r2]), a3 = (0, import_react14.useCallback)((i3) => {
      var u2;
      if (!e4.pointerIsValid(i3))
        return;
      let l2 = e4.pointerEnter(i3, r2);
      (u2 = t4.onHoverHandle) == null || u2.call(t4, l2, i3);
    }, [e4, t4, r2]), c3 = (0, import_react14.useCallback)((i3) => {
      var u2;
      if (!e4.pointerIsValid(i3))
        return;
      let l2 = e4.pointerEnter(i3, r2);
      (u2 = t4.onUnhoverHandle) == null || u2.call(t4, l2, i3);
    }, [e4, t4, r2]);
    return { onPointerDown: n2, onPointerUp: o3, onPointerEnter: a3, onPointerMove: s3, onPointerLeave: c3 };
  }
  function en(r2, e4) {
    (0, import_react15.useEffect)(() => {
      let t4 = (s3) => {
        s3.preventDefault();
      }, n2 = (s3) => {
        let a3 = s3.touches[0].pageX, c3 = s3.touches[0].radiusX || 0;
        (a3 - c3 < 10 || a3 + c3 > e4 - 10) && s3.preventDefault();
      }, o3 = r2.current;
      return o3 ? (o3.addEventListener("touchstart", t4), o3.addEventListener("gestureend", t4), o3.addEventListener("gesturechange", t4), o3.addEventListener("gesturestart", t4), o3.addEventListener("touchstart", n2), () => {
        o3 && (o3.removeEventListener("touchstart", t4), o3.removeEventListener("gestureend", t4), o3.removeEventListener("gesturechange", t4), o3.removeEventListener("gesturestart", t4), o3.removeEventListener("touchstart", n2));
      }) : () => {
      };
    }, [r2, e4]);
  }
  function tn() {
    let { callbacks: r2, inputs: e4 } = P(), t4 = (0, import_react16.useCallback)((c3) => {
      var l2, u2, d4;
      if (c3.button !== 0 || !e4.pointerIsValid(c3))
        return;
      c3.stopPropagation(), (l2 = c3.currentTarget) == null || l2.setPointerCapture(c3.pointerId);
      let i3 = e4.pointerDown(c3, "bounds");
      (u2 = r2.onPointBounds) == null || u2.call(r2, i3, c3), (d4 = r2.onPointerDown) == null || d4.call(r2, i3, c3);
    }, [r2, e4]), n2 = (0, import_react16.useCallback)((c3) => {
      var u2, d4, p3, h4;
      if (c3.button !== 0 || !e4.pointerIsValid(c3))
        return;
      c3.stopPropagation();
      let i3 = e4.isDoubleClick(), l2 = e4.pointerUp(c3, "bounds");
      c3.currentTarget.hasPointerCapture(c3.pointerId) && ((u2 = c3.currentTarget) == null || u2.releasePointerCapture(c3.pointerId)), i3 && !(l2.altKey || l2.metaKey) && ((d4 = r2.onDoubleClickBounds) == null || d4.call(r2, l2, c3)), (p3 = r2.onReleaseBounds) == null || p3.call(r2, l2, c3), (h4 = r2.onPointerUp) == null || h4.call(r2, l2, c3);
    }, [r2, e4]), o3 = (0, import_react16.useCallback)((c3) => {
      var l2, u2;
      if (!e4.pointerIsValid(c3))
        return;
      c3.currentTarget.hasPointerCapture(c3.pointerId) && ((l2 = r2.onDragBounds) == null || l2.call(r2, e4.pointerMove(c3, "bounds"), c3));
      let i3 = e4.pointerMove(c3, "bounds");
      (u2 = r2.onPointerMove) == null || u2.call(r2, i3, c3);
    }, [r2, e4]), s3 = (0, import_react16.useCallback)((c3) => {
      var i3;
      !e4.pointerIsValid(c3) || (i3 = r2.onHoverBounds) == null || i3.call(r2, e4.pointerEnter(c3, "bounds"), c3);
    }, [r2, e4]), a3 = (0, import_react16.useCallback)((c3) => {
      var i3;
      !e4.pointerIsValid(c3) || (i3 = r2.onUnhoverBounds) == null || i3.call(r2, e4.pointerEnter(c3, "bounds"), c3);
    }, [r2, e4]);
    return { onPointerDown: t4, onPointerUp: n2, onPointerEnter: s3, onPointerMove: o3, onPointerLeave: a3 };
  }
  function Ie(r2, e4 = 0) {
    let t4 = (0, import_react17.useRef)(null);
    return (0, import_react17.useLayoutEffect)(() => {
      let n2 = t4.current, o3 = `
    translate(
      calc(${r2.minX}px - var(--tl-padding)),
      calc(${r2.minY}px - var(--tl-padding))
    )
    rotate(${e4 + (r2.rotation || 0)}rad)`;
      n2.style.setProperty("transform", o3), n2.style.setProperty("width", `calc(${Math.floor(r2.width)}px + (var(--tl-padding) * 2))`), n2.style.setProperty("height", `calc(${Math.floor(r2.height)}px + (var(--tl-padding) * 2))`);
    }, [r2, e4]), t4;
  }
  function nn() {
    let { inputs: r2, callbacks: e4 } = P();
    (0, import_react18.useEffect)(() => {
      let t4 = (o3) => {
        var s3;
        (s3 = e4.onKeyDown) == null || s3.call(e4, o3.key, r2.keydown(o3), o3);
      }, n2 = (o3) => {
        var s3;
        r2.keyup(o3), (s3 = e4.onKeyUp) == null || s3.call(e4, o3.key, r2.keyup(o3), o3);
      };
      return window.addEventListener("keydown", t4), window.addEventListener("keyup", n2), () => {
        window.removeEventListener("keydown", t4), window.removeEventListener("keyup", n2);
      };
    }, [r2, e4]);
  }
  var rn = (0, import_react19.memo)(({ error: r2, resetErrorBoundary: e4 }) => {
    let { callbacks: t4 } = P();
    return (0, import_react19.useEffect)(() => {
      var n2;
      (n2 = t4.onError) == null || n2.call(t4, r2);
    }, [r2, e4, t4]), null;
  });
  var Fr = (r2 = [], e4 = []) => r2.length !== e4.length || r2.some((t4, n2) => !Object.is(t4, e4[n2]));
  var on = { error: null };
  var qe = class extends import_react20.Component {
    constructor() {
      super(...arguments);
      this.state = on;
      this.updatedWithError = false;
      this.resetErrorBoundary = (...e4) => {
        var t4, n2;
        (n2 = (t4 = this.props).onReset) == null || n2.call(t4, ...e4), this.reset();
      };
    }
    static getDerivedStateFromError(e4) {
      return { error: e4 };
    }
    reset() {
      this.updatedWithError = false, this.setState(on);
    }
    componentDidCatch(e4, t4) {
      var n2, o3;
      (o3 = (n2 = this.props).onError) == null || o3.call(n2, e4, t4);
    }
    componentDidMount() {
      let { error: e4 } = this.state;
      e4 !== null && (this.updatedWithError = true);
    }
    componentDidUpdate(e4) {
      var o3, s3;
      let { error: t4 } = this.state, { resetKeys: n2 } = this.props;
      if (t4 !== null && !this.updatedWithError) {
        this.updatedWithError = true;
        return;
      }
      t4 !== null && Fr(e4.resetKeys, n2) && ((s3 = (o3 = this.props).onResetKeysChange) == null || s3.call(o3, e4.resetKeys, n2), this.reset());
    }
    render() {
      let { error: e4 } = this.state, { fallbackRender: t4, FallbackComponent: n2, fallback: o3 } = this.props;
      if (e4 !== null) {
        let s3 = { error: e4, resetErrorBoundary: this.resetErrorBoundary };
        if ((0, import_react20.isValidElement)(o3))
          return o3;
        if (typeof t4 == "function")
          return t4(s3);
        if (n2)
          return (0, import_react20.createElement)(n2, L({}, s3));
        throw new Error("react-error-boundary requires either a fallback, fallbackRender, or FallbackComponent prop");
      }
      return this.props.children;
    }
  };
  var W = (0, import_react21.memo)(({ id: r2, bounds: e4, rotation: t4 = 0, className: n2, children: o3 }) => {
    let s3 = Ie(e4, t4);
    return (0, import_react21.createElement)("div", { id: r2, ref: s3, className: ["tl-positioned", n2 || ""].join(" ") }, o3);
  });
  var sn = (0, import_react22.memo)(({ brush: r2 }) => (0, import_react22.createElement)(W, { bounds: r2, rotation: 0 }, (0, import_react22.createElement)(G, null, (0, import_react22.createElement)("rect", { className: "tl-brush", opacity: 1, x: 0, y: 0, width: r2.width, height: r2.height }))));
  var an = (0, import_react25.memo)(({ bounds: r2, isLocked: e4, isHidden: t4 }) => (0, import_react25.createElement)("rect", { className: e4 ? "tl-bounds-center tl-dashed" : "tl-bounds-center", x: -1, y: -1, width: r2.width + 2, height: r2.height + 2, opacity: t4 ? 0 : 1, pointerEvents: "none" }));
  var cn = (0, import_react26.memo)(({ bounds: r2, targetSize: e4, size: t4, isHidden: n2 }) => {
    let o3 = F("rotate");
    return (0, import_react26.createElement)("g", { cursor: "grab", opacity: n2 ? 0 : 1 }, (0, import_react26.createElement)("circle", L({ className: "tl-transparent", cx: r2.width / 2, cy: t4 * -2, r: e4, pointerEvents: n2 ? "none" : "all" }, o3)), (0, import_react26.createElement)("circle", { className: "tl-rotate-handle", cx: r2.width / 2, cy: t4 * -2, r: t4 / 2, pointerEvents: "none" }));
  });
  var Qr = { [v.TopLeft]: "tl-cursor-nwse", [v.TopRight]: "tl-cursor-nesw", [v.BottomRight]: "tl-cursor-nwse", [v.BottomLeft]: "tl-cursor-nesw" };
  var me = (0, import_react27.memo)(({ size: r2, targetSize: e4, isHidden: t4, corner: n2, bounds: o3 }) => {
    let s3 = F(n2), a3 = n2 === v.TopLeft || n2 === v.TopRight, c3 = n2 === v.TopLeft || n2 === v.BottomLeft;
    return (0, import_react27.createElement)("g", { opacity: t4 ? 0 : 1 }, (0, import_react27.createElement)("rect", L({ className: "tl-transparent " + (t4 ? "" : Qr[n2]), x: (c3 ? -1 : o3.width + 1) - e4, y: (a3 ? -1 : o3.height + 1) - e4, width: e4 * 2, height: e4 * 2, pointerEvents: t4 ? "none" : "all" }, s3)), (0, import_react27.createElement)("rect", { className: "tl-corner-handle", x: (c3 ? -1 : o3.width + 1) - r2 / 2, y: (a3 ? -1 : o3.height + 1) - r2 / 2, width: r2, height: r2, pointerEvents: "none" }));
  });
  var to = { [R.Top]: "tl-cursor-ns", [R.Right]: "tl-cursor-ew", [R.Bottom]: "tl-cursor-ns", [R.Left]: "tl-cursor-ew" };
  var fe = (0, import_react28.memo)(({ size: r2, isHidden: e4, bounds: t4, edge: n2 }) => {
    let o3 = F(n2), s3 = n2 === R.Top || n2 === R.Bottom, a3 = n2 === R.Right || n2 === R.Bottom, { height: c3, width: i3 } = t4;
    return (0, import_react28.createElement)("rect", L({ pointerEvents: e4 ? "none" : "all", className: "tl-transparent tl-edge-handle " + (e4 ? "" : to[n2]), opacity: e4 ? 0 : 1, x: s3 ? r2 / 2 : (a3 ? i3 + 1 : -1) - r2 / 2, y: s3 ? (a3 ? c3 + 1 : -1) - r2 / 2 : r2 / 2, width: s3 ? Math.max(0, i3 + 1 - r2) : r2, height: s3 ? r2 : Math.max(0, c3 + 1 - r2) }, o3));
  });
  var oo = { right: 0, bottomRight: 45, bottom: 90, bottomLeft: 135, left: 180, topLeft: 225, top: 270, topRight: 315 };
  function $({ bounds: r2, side: e4, targetSize: t4, size: n2 }) {
    let o3 = { left: -44, topLeft: -44, bottomLeft: -44, right: r2.width + 44, topRight: r2.width + 44, bottomRight: r2.width + 44, top: r2.width / 2, bottom: r2.width / 2 }[e4], s3 = { left: r2.height / 2, right: r2.height / 2, top: -44, topLeft: -44, topRight: -44, bottom: r2.height + 44, bottomLeft: r2.height + 44, bottomRight: r2.height + 44 }[e4], { callbacks: a3, inputs: c3 } = P(), i3 = (0, import_react30.useCallback)((l2) => {
      var d4;
      l2.stopPropagation();
      let u2 = c3.pointerDown(l2, e4);
      (d4 = a3.onShapeClone) == null || d4.call(a3, u2, l2);
    }, [a3.onShapeClone]);
    return (0, import_react30.createElement)("g", { className: "tl-clone-target", transform: `translate(${o3}, ${s3})` }, (0, import_react30.createElement)("rect", { className: "tl-transparent", width: t4 * 4, height: t4 * 4, x: -t4 * 2, y: -t4 * 2 }), (0, import_react30.createElement)("g", { className: "tl-clone-button-target", onPointerDown: i3, transform: `rotate(${oo[e4]})` }, (0, import_react30.createElement)("circle", { className: "tl-transparent ", r: t4 }), (0, import_react30.createElement)("path", { className: "tl-clone-button", d: `M -${n2 / 2},-${n2 / 2} L ${n2 / 2},0 -${n2 / 2},${n2 / 2} Z`, strokeLinejoin: "round" })));
  }
  function un({ targetSize: r2, size: e4, bounds: t4 }) {
    return (0, import_react29.createElement)(import_react29.Fragment, null, (0, import_react29.createElement)($, { targetSize: r2, size: e4, bounds: t4, side: "top" }), (0, import_react29.createElement)($, { targetSize: r2, size: e4, bounds: t4, side: "right" }), (0, import_react29.createElement)($, { targetSize: r2, size: e4, bounds: t4, side: "bottom" }), (0, import_react29.createElement)($, { targetSize: r2, size: e4, bounds: t4, side: "left" }), (0, import_react29.createElement)($, { targetSize: r2, size: e4, bounds: t4, side: "topLeft" }), (0, import_react29.createElement)($, { targetSize: r2, size: e4, bounds: t4, side: "topRight" }), (0, import_react29.createElement)($, { targetSize: r2, size: e4, bounds: t4, side: "bottomLeft" }), (0, import_react29.createElement)($, { targetSize: r2, size: e4, bounds: t4, side: "bottomRight" }));
  }
  var G = (0, import_react31.memo)((0, import_react31.forwardRef)((o3, n2) => {
    var s3 = o3, { id: r2, children: e4 } = s3, t4 = Q(s3, ["id", "children"]);
    return (0, import_react31.createElement)("svg", L({ ref: n2, className: "tl-positioned-svg" }, t4), (0, import_react31.createElement)("g", { id: r2, className: "tl-centered-g" }, e4));
  }));
  function dn({ size: r2, bounds: e4, isHidden: t4 }) {
    let n2 = F("left"), o3 = F("center"), s3 = F("right");
    return (0, import_react32.createElement)("g", { cursor: "grab", transform: `translate(${e4.width / 2 - r2 * 4}, ${e4.height + r2 * 2})` }, (0, import_react32.createElement)("g", { className: "tl-transparent", pointerEvents: t4 ? "none" : "all" }, (0, import_react32.createElement)("rect", L({ x: 0, y: 0, width: r2 * 2, height: r2 * 2 }, n2)), (0, import_react32.createElement)("rect", L({ x: r2 * 3, y: 0, width: r2 * 2, height: r2 * 2 }, o3)), (0, import_react32.createElement)("rect", L({ x: r2 * 6, y: 0, width: r2 * 2, height: r2 * 2 }, s3))), (0, import_react32.createElement)("g", { className: "tl-rotate-handle", transform: `translate(${r2 / 2}, ${r2 / 2})` }, (0, import_react32.createElement)("path", { d: `M 0,${r2 / 2} L ${r2},${r2} ${r2},0 Z`, pointerEvents: "none", opacity: t4 ? 0 : 1 }), (0, import_react32.createElement)("path", { transform: `translate(${r2 * 3}, 0)`, d: `M 0,0 L ${r2},0 ${r2 / 2},${r2} Z`, pointerEvents: "none", opacity: t4 ? 0 : 1 }), (0, import_react32.createElement)("path", { transform: `translate(${r2 * 6}, 0)`, d: `M ${r2},${r2 / 2} L 0,0 0,${r2} Z`, pointerEvents: "none", opacity: t4 ? 0 : 1 })));
  }
  var pn = (0, import_react24.memo)(({ zoom: r2, bounds: e4, viewportWidth: t4, rotation: n2, isHidden: o3, isLocked: s3, hideCloneHandles: a3, hideRotateHandle: c3, hideBindingHandles: i3 }) => {
    let l2 = (t4 < 768 ? 16 : 8) / r2, u2 = 8 / r2, d4 = Math.min(e4.width, e4.height) * r2, p3 = !c3 && !o3 && !s3 && d4 > 32, h4 = !o3 && !s3 && d4 > 24, f5 = !o3 && !s3 && d4 > 20, T2 = !a3 && d4 > 24;
    return (0, import_react24.createElement)(W, { bounds: e4, rotation: n2 }, (0, import_react24.createElement)(G, null, (0, import_react24.createElement)(an, { bounds: e4, isLocked: s3, isHidden: o3 }), (0, import_react24.createElement)(fe, { targetSize: l2, size: u2, bounds: e4, edge: R.Top, isHidden: !h4 }), (0, import_react24.createElement)(fe, { targetSize: l2, size: u2, bounds: e4, edge: R.Right, isHidden: !h4 }), (0, import_react24.createElement)(fe, { targetSize: l2, size: u2, bounds: e4, edge: R.Bottom, isHidden: !h4 }), (0, import_react24.createElement)(fe, { targetSize: l2, size: u2, bounds: e4, edge: R.Left, isHidden: !h4 }), (0, import_react24.createElement)(me, { targetSize: l2, size: u2, bounds: e4, isHidden: o3 || !f5, corner: v.TopLeft }), (0, import_react24.createElement)(me, { targetSize: l2, size: u2, bounds: e4, isHidden: o3 || !f5, corner: v.TopRight }), (0, import_react24.createElement)(me, { targetSize: l2, size: u2, bounds: e4, isHidden: o3 || !f5, corner: v.BottomRight }), (0, import_react24.createElement)(me, { targetSize: l2, size: u2, bounds: e4, isHidden: o3 || !f5, corner: v.BottomLeft }), p3 && (0, import_react24.createElement)(cn, { targetSize: l2, size: u2, bounds: e4, isHidden: !h4 }), T2 && (0, import_react24.createElement)(un, { bounds: e4, targetSize: l2, size: u2 }), !i3 && (0, import_react24.createElement)(dn, { targetSize: l2, size: u2, bounds: e4, isHidden: !h4 })));
  });
  var hn = (0, import_react33.memo)(({ bounds: r2, rotation: e4, isHidden: t4 }) => {
    let n2 = tn();
    return (0, import_react33.createElement)(W, { bounds: r2, rotation: e4 }, (0, import_react33.createElement)(G, null, (0, import_react33.createElement)("rect", L({ className: "tl-bounds-bg", width: r2.width, height: r2.height, opacity: t4 ? 0 : 1 }, n2))));
  });
  var mn = (0, import_react35.memo)(({ id: r2, point: e4 }) => {
    let t4 = Qt(r2);
    return (0, import_react35.createElement)(W, { bounds: _.translateBounds({ minX: 0, minY: 0, maxX: 0, maxY: 0, width: 0, height: 0 }, e4) }, (0, import_react35.createElement)(G, null, (0, import_react35.createElement)("g", L({ className: "tl-handle" }, t4), (0, import_react35.createElement)("circle", { className: "tl-handle-bg", pointerEvents: "all" }), (0, import_react35.createElement)("circle", { className: "tl-counter-scaled tl-handle", pointerEvents: "none", r: 4 }))));
  });
  var fn = (0, import_react34.memo)(({ shape: r2, zoom: e4 }) => {
    if (r2.handles === void 0)
      return null;
    let t4 = null, n2 = Object.values(r2.handles).reduce((o3, s3) => {
      let a3 = e.add(s3.point, r2.point);
      return (!t4 || e.dist(a3, t4) * e4 >= 32) && (o3.push(s3), t4 = a3), o3;
    }, []);
    return n2.length === 1 ? null : (0, import_react34.createElement)(import_react34.Fragment, null, n2.map((o3) => (0, import_react34.createElement)(mn, { key: r2.id + "_" + o3.id, id: o3.id, point: e.add(o3.point, r2.point) })));
  });
  var Tn = (0, import_react38.memo)(({ shape: r2, utils: e4, isEditing: t4, isBinding: n2, isHovered: o3, isSelected: s3, onShapeChange: a3, onShapeBlur: c3, events: i3, meta: l2 }) => {
    let u2 = e4.getRef(r2);
    return (0, import_react38.createElement)(e4.Component, { ref: u2, shape: r2, isEditing: t4, isBinding: n2, isHovered: o3, isSelected: s3, meta: l2, events: i3, onShapeChange: a3, onShapeBlur: c3 });
  }, (r2, e4) => r2.isHovered !== e4.isHovered || r2.isSelected !== e4.isSelected || r2.isEditing !== e4.isEditing || r2.isBinding !== e4.isBinding || r2.meta !== e4.meta ? false : e4.shape !== r2.shape ? !e4.utils.shouldRender(e4.shape, r2.shape) : true);
  function vn() {
    let r2 = (0, import_react39.useReducer)((e4) => e4 + 1, 0);
    (0, import_react39.useLayoutEffect)(() => r2[1](), []);
  }
  var yn = (0, import_react37.memo)(({ shape: r2, utils: e4, isEditing: t4, isBinding: n2, isHovered: o3, isSelected: s3, meta: a3 }) => {
    let { callbacks: c3 } = P(), i3 = e4.getBounds(r2), l2 = Wt(r2.id);
    return vn(), (0, import_react37.createElement)(W, { id: r2.id, bounds: i3, rotation: r2.rotation }, (0, import_react37.createElement)(Tn, { shape: r2, isBinding: n2, isEditing: t4, isHovered: o3, isSelected: s3, utils: e4, meta: a3, events: l2, onShapeChange: c3.onShapeChange, onShapeBlur: c3.onShapeBlur }));
  });
  var nt = (0, import_react36.memo)(({ shape: r2, utils: e4, children: t4, isEditing: n2, isBinding: o3, isHovered: s3, isSelected: a3, meta: c3 }) => (0, import_react36.createElement)(import_react36.Fragment, null, (0, import_react36.createElement)(yn, { shape: r2, isEditing: n2, isBinding: o3, isHovered: s3, isSelected: a3, utils: e4[r2.type], meta: c3 }), t4 && t4.map((i3) => (0, import_react36.createElement)(nt, L({ key: i3.shape.id, utils: e4 }, i3)))));
  var ve = (0, import_react40.memo)(({ isHovered: r2 = false, isSelected: e4 = false, shape: t4, user: n2, meta: o3 }) => {
    let { shapeUtils: s3 } = P(), a3 = s3[t4.type], c3 = a3.getBounds(t4), i3 = Ie(c3, t4.rotation);
    return (0, import_react40.createElement)("div", { ref: i3, className: "tl-indicator tl-absolute " + (n2 ? "" : e4 ? "tl-selected" : "tl-hovered") }, (0, import_react40.createElement)("svg", { width: "100%", height: "100%" }, (0, import_react40.createElement)("g", { className: "tl-centered-g", stroke: n2 == null ? void 0 : n2.color }, (0, import_react40.createElement)(a3.Indicator, { shape: t4, meta: o3, user: n2, isSelected: e4, isHovered: r2 }))));
  });
  var Ln = (0, import_react23.memo)(function({ page: e4, pageState: t4, hideBounds: n2, hideHandles: o3, hideIndicators: s3, hideBindingHandles: a3, hideCloneHandles: c3, hideRotateHandle: i3, meta: l2 }) {
    let { callbacks: u2, shapeUtils: d4, inputs: p3 } = P(), h4 = $t(e4, t4, d4, [p3.bounds.width, p3.bounds.height], l2, u2.onRenderCountChange), { bounds: f5, isLinked: T2, isLocked: E2, rotation: x3 } = Jt(e4, t4, d4), { selectedIds: g2, hoveredId: y2, camera: { zoom: B2 } } = t4, U2 = true, b3, Y4 = g2.map((w2) => e4.shapes[w2]);
    if (Y4.length === 1) {
      let w2 = Y4[0], K2 = d4[w2.type];
      U2 = c3 || !K2.showCloneHandles, w2.handles !== void 0 && (b3 = w2);
    }
    return (0, import_react23.createElement)(import_react23.Fragment, null, f5 && (0, import_react23.createElement)(hn, { bounds: f5, rotation: x3, isHidden: n2 }), h4.map((w2) => (0, import_react23.createElement)(nt, L({ key: w2.shape.id, utils: d4 }, w2))), !s3 && Y4.map((w2) => (0, import_react23.createElement)(ve, { key: "selected_" + w2.id, shape: w2, meta: l2, isSelected: true })), !s3 && y2 && (0, import_react23.createElement)(ve, { key: "hovered_" + y2, shape: e4.shapes[y2], meta: l2, isHovered: true }), f5 && (0, import_react23.createElement)(pn, { zoom: B2, bounds: f5, viewportWidth: p3.bounds.width, isLocked: E2, rotation: x3, isHidden: n2, hideRotateHandle: i3, hideBindingHandles: a3 || !T2, hideCloneHandles: U2 }), !o3 && b3 && (0, import_react23.createElement)(fn, { shape: b3, zoom: B2 }));
  });
  function En({ user: r2 }) {
    let e4 = (0, import_react42.useRef)(null);
    return (0, import_react42.createElement)("div", { ref: e4, className: "tl-absolute tl-user", style: { backgroundColor: r2.color, transform: `translate(${r2.point[0]}px, ${r2.point[1]}px)` } });
  }
  function xn({ userId: r2, users: e4 }) {
    return (0, import_react41.createElement)(import_react41.Fragment, null, Object.values(e4).filter((t4) => t4 && t4.id !== r2).map((t4) => (0, import_react41.createElement)(En, { key: t4.id, user: t4 })));
  }
  function Rn(r2) {
    let { inputs: e4, callbacks: t4 } = P(), n2 = (0, import_react43.useRef)(false), o3 = (0, import_react43.useReducer)((a3) => a3 + 1, 0)[1], s3 = (0, import_react43.useCallback)(() => {
      var a3, c3;
      if (n2.current) {
        let i3 = (a3 = r2.current) == null ? void 0 : a3.getBoundingClientRect();
        i3 && (e4.bounds = { minX: i3.left, maxX: i3.left + i3.width, minY: i3.top, maxY: i3.top + i3.height, width: i3.width, height: i3.height }, (c3 = t4.onBoundsChange) == null || c3.call(t4, e4.bounds), o3());
      } else
        n2.current = true;
    }, [r2, o3, e4, t4.onBoundsChange]);
    (0, import_react43.useEffect)(() => {
      let a3 = S.debounce(s3, 100);
      return window.addEventListener("scroll", a3), window.addEventListener("resize", a3), () => {
        window.removeEventListener("scroll", a3), window.removeEventListener("resize", a3);
      };
    }, []), (0, import_react43.useEffect)(() => {
      let a3 = new ResizeObserver((c3) => {
        e4.isPinching || c3[0].contentRect && s3();
      });
      return r2.current && a3.observe(r2.current), () => {
        a3.disconnect();
      };
    }, [r2, e4]), (0, import_react43.useEffect)(() => {
      s3();
    }, [r2]);
  }
  var ko = 250;
  var M = class {
    constructor() {
      this.keys = {};
      this.isPinching = false;
      this.bounds = { minX: 0, maxX: 640, minY: 0, maxY: 480, width: 640, height: 480 };
      this.zoom = 1;
      this.pointerUpTime = 0;
      this.panStart = (e4) => {
        var c3, i3;
        let { shiftKey: t4, ctrlKey: n2, metaKey: o3, altKey: s3 } = e4, a3 = { target: "wheel", pointerId: ((c3 = this.pointer) == null ? void 0 : c3.pointerId) || 0, origin: ((i3 = this.pointer) == null ? void 0 : i3.origin) || [0, 0], delta: [0, 0], pressure: 0.5, point: M.getPoint(e4, this.bounds), shiftKey: t4, ctrlKey: n2, metaKey: o3, altKey: s3, spaceKey: this.keys[" "] };
        return this.pointer = a3, a3;
      };
      this.pan = (e4, t4) => {
        if (!this.pointer || this.pointer.target !== "wheel")
          return this.panStart(t4);
        let { shiftKey: n2, ctrlKey: o3, metaKey: s3, altKey: a3 } = t4, c3 = this.pointer, i3 = M.getPoint(t4, this.bounds), l2 = A(L({}, c3), { target: "wheel", delta: e4, point: i3, shiftKey: n2, ctrlKey: o3, metaKey: s3, altKey: a3, spaceKey: this.keys[" "] });
        return this.pointer = l2, l2;
      };
      this.keydown = (e4) => {
        var a3, c3;
        let { shiftKey: t4, ctrlKey: n2, metaKey: o3, altKey: s3 } = e4;
        return this.keys[e4.key] = true, { point: ((a3 = this.pointer) == null ? void 0 : a3.point) || [0, 0], origin: ((c3 = this.pointer) == null ? void 0 : c3.origin) || [0, 0], key: e4.key, keys: Object.keys(this.keys), shiftKey: t4, ctrlKey: n2, metaKey: S.isDarwin() ? o3 : n2, altKey: s3 };
      };
      this.keyup = (e4) => {
        var a3, c3;
        let { shiftKey: t4, ctrlKey: n2, metaKey: o3, altKey: s3 } = e4;
        return delete this.keys[e4.key], { point: ((a3 = this.pointer) == null ? void 0 : a3.point) || [0, 0], origin: ((c3 = this.pointer) == null ? void 0 : c3.origin) || [0, 0], key: e4.key, keys: Object.keys(this.keys), shiftKey: t4, ctrlKey: n2, metaKey: S.isDarwin() ? o3 : n2, altKey: s3 };
      };
    }
    pointerIsValid(e4) {
      if ("pointerId" in e4 && this.activePointer && this.activePointer !== e4.pointerId)
        return false;
      if ("touches" in e4) {
        let t4 = e4.changedTouches[0];
        if (this.activePointer && this.activePointer !== t4.identifier)
          return false;
      }
      return true;
    }
    touchStart(e4, t4) {
      let { shiftKey: n2, ctrlKey: o3, metaKey: s3, altKey: a3 } = e4, c3 = e4.changedTouches[0];
      this.activePointer = c3.identifier;
      let i3 = { target: t4, pointerId: c3.identifier, origin: M.getPoint(c3, this.bounds), delta: [0, 0], point: M.getPoint(c3, this.bounds), pressure: M.getPressure(c3), shiftKey: n2, ctrlKey: o3, metaKey: S.isDarwin() ? s3 : o3, altKey: a3, spaceKey: this.keys[" "] };
      return this.pointer = i3, i3;
    }
    touchEnd(e4, t4) {
      let { shiftKey: n2, ctrlKey: o3, metaKey: s3, altKey: a3 } = e4, c3 = e4.changedTouches[0], i3 = { target: t4, pointerId: c3.identifier, origin: M.getPoint(c3, this.bounds), delta: [0, 0], point: M.getPoint(c3, this.bounds), pressure: M.getPressure(c3), shiftKey: n2, ctrlKey: o3, metaKey: S.isDarwin() ? s3 : o3, altKey: a3, spaceKey: this.keys[" "] };
      return this.pointer = i3, this.activePointer = void 0, i3;
    }
    touchMove(e4, t4) {
      let { shiftKey: n2, ctrlKey: o3, metaKey: s3, altKey: a3 } = e4, c3 = e4.changedTouches[0], i3 = this.pointer, l2 = M.getPoint(c3, this.bounds), u2 = (i3 == null ? void 0 : i3.point) ? e.sub(l2, i3.point) : [0, 0], d4 = A(L({ origin: l2 }, i3), { target: t4, pointerId: c3.identifier, point: l2, delta: u2, pressure: M.getPressure(c3), shiftKey: n2, ctrlKey: o3, metaKey: S.isDarwin() ? s3 : o3, altKey: a3, spaceKey: this.keys[" "] });
      return this.pointer = d4, d4;
    }
    pointerDown(e4, t4) {
      let { shiftKey: n2, ctrlKey: o3, metaKey: s3, altKey: a3 } = e4, c3 = M.getPoint(e4, this.bounds);
      this.activePointer = e4.pointerId;
      let i3 = { target: t4, pointerId: e4.pointerId, origin: c3, point: c3, delta: [0, 0], pressure: M.getPressure(e4), shiftKey: n2, ctrlKey: o3, metaKey: S.isDarwin() ? s3 : o3, altKey: a3, spaceKey: this.keys[" "] };
      return this.pointer = i3, i3;
    }
    pointerEnter(e4, t4) {
      let { shiftKey: n2, ctrlKey: o3, metaKey: s3, altKey: a3 } = e4, c3 = M.getPoint(e4, this.bounds), i3 = { target: t4, pointerId: e4.pointerId, origin: c3, delta: [0, 0], point: c3, pressure: M.getPressure(e4), shiftKey: n2, ctrlKey: o3, metaKey: S.isDarwin() ? s3 : o3, altKey: a3, spaceKey: this.keys[" "] };
      return this.pointer = i3, i3;
    }
    pointerMove(e4, t4) {
      let { shiftKey: n2, ctrlKey: o3, metaKey: s3, altKey: a3 } = e4, c3 = this.pointer, i3 = M.getPoint(e4, this.bounds), l2 = (c3 == null ? void 0 : c3.point) ? e.sub(i3, c3.point) : [0, 0], u2 = A(L({ origin: i3 }, c3), { target: t4, pointerId: e4.pointerId, point: i3, delta: l2, pressure: M.getPressure(e4), shiftKey: n2, ctrlKey: o3, metaKey: S.isDarwin() ? s3 : o3, altKey: a3, spaceKey: this.keys[" "] });
      return this.pointer = u2, u2;
    }
    pointerUp(e4, t4) {
      let { shiftKey: n2, ctrlKey: o3, metaKey: s3, altKey: a3 } = e4, c3 = this.pointer, i3 = M.getPoint(e4, this.bounds), l2 = (c3 == null ? void 0 : c3.point) ? e.sub(i3, c3.point) : [0, 0];
      this.activePointer = void 0;
      let u2 = A(L({ origin: i3 }, c3), { target: t4, pointerId: e4.pointerId, point: i3, delta: l2, pressure: M.getPressure(e4), shiftKey: n2, ctrlKey: o3, metaKey: S.isDarwin() ? s3 : o3, altKey: a3, spaceKey: this.keys[" "] });
      return this.pointer = u2, this.pointerUpTime = Date.now(), u2;
    }
    isDoubleClick() {
      if (!this.pointer)
        return false;
      let { origin: e4, point: t4 } = this.pointer;
      return Date.now() - this.pointerUpTime < ko && e.dist(e4, t4) < 4;
    }
    clear() {
      this.pointer = void 0;
    }
    resetDoubleClick() {
      this.pointerUpTime = 0;
    }
    pinch(e4, t4) {
      let { shiftKey: n2, ctrlKey: o3, metaKey: s3, altKey: a3 } = this.keys, c3 = e.sub(t4, e4), i3 = { pointerId: 0, target: "pinch", origin: t4, delta: c3, point: e.sub(e.round(e4), [this.bounds.minX, this.bounds.minY]), pressure: 0.5, shiftKey: n2, ctrlKey: o3, metaKey: S.isDarwin() ? s3 : o3, altKey: a3, spaceKey: this.keys[" "] };
      return this.pointer = i3, i3;
    }
    reset() {
      this.pointerUpTime = 0, this.pointer = void 0, this.keyboard = void 0, this.activePointer = void 0, this.keys = {};
    }
    static getPoint(e4, t4) {
      return [+e4.clientX.toFixed(2) - t4.minX, +e4.clientY.toFixed(2) - t4.minY];
    }
    static getPressure(e4) {
      return "pressure" in e4 && +e4.pressure.toFixed(2) || 0.5;
    }
    static commandKey() {
      return S.isDarwin() ? "\u2318" : "Ctrl";
    }
  };
  var st = new M();
  function wn({ userId: r2, users: e4, meta: t4, page: n2 }) {
    let { shapeUtils: o3 } = P();
    return (0, import_react44.createElement)(import_react44.Fragment, null, Object.values(e4).filter(Boolean).filter((s3) => s3.id !== r2 && s3.selectedIds.length > 0).map((s3) => {
      let a3 = s3.selectedIds.map((i3) => n2.shapes[i3]).filter(Boolean);
      if (a3.length === 0)
        return null;
      let c3 = _.getCommonBounds(a3.map((i3) => o3[i3.type].getBounds(i3)));
      return (0, import_react44.createElement)(import_react44.Fragment, { key: s3.id + "_shapes" }, (0, import_react44.createElement)("div", { className: "tl-absolute tl-user-indicator-bounds", style: { backgroundColor: s3.color + "0d", borderColor: s3.color + "78", transform: `translate(${c3.minX}px, ${c3.minY}px)`, width: c3.width, height: c3.height, pointerEvents: "none" } }), a3.map((i3) => (0, import_react44.createElement)(ve, { key: `${s3.id}_${i3.id}_indicator`, shape: i3, user: s3, meta: t4, isHovered: true })));
    }));
  }
  function Cn({ snapLines: r2 }) {
    return (0, import_react45.createElement)(import_react45.Fragment, null, r2.map((e4, t4) => (0, import_react45.createElement)(Mo, { key: t4, snapLine: e4 })));
  }
  function Mo({ snapLine: r2 }) {
    let e4 = _.getBoundsFromPoints(r2);
    return (0, import_react45.createElement)(import_react45.Fragment, null, (0, import_react45.createElement)("line", { className: "tl-snap-line", x1: e4.minX, y1: e4.minY, x2: e4.maxX, y2: e4.maxY }), r2.map(([t4, n2], o3) => (0, import_react45.createElement)("use", { key: o3, href: "#tl-snap-point", x: t4, y: n2 })));
  }
  function In({ camera: r2, children: e4 }) {
    let t4 = 2.5 / r2.zoom;
    return (0, import_react46.createElement)("svg", { className: "tl-overlay" }, (0, import_react46.createElement)("defs", null, (0, import_react46.createElement)("g", { id: "tl-snap-point" }, (0, import_react46.createElement)("path", { className: "tl-snap-point", d: `M ${-t4},${-t4} L ${t4},${t4} M ${-t4},${t4} L ${t4},${-t4}` }))), (0, import_react46.createElement)("g", { transform: `scale(${r2.zoom}) translate(${r2.point})` }, e4));
  }
  function Ho() {
  }
  function kn({ id: r2, page: e4, pageState: t4, snapLines: n2, users: o3, userId: s3, meta: a3, externalContainerRef: c3, hideHandles: i3, hideBounds: l2, hideIndicators: u2, hideBindingHandles: d4, hideCloneHandles: p3, hideRotateHandle: h4 }) {
    let f5 = (0, import_react2.useRef)(null), T2 = (0, import_react2.useRef)(null), E2 = (0, import_react2.useRef)(null);
    st.zoom = t4.camera.zoom, Rn(f5), Ot(t4.camera.zoom, c3 || f5), Nt(), en(f5, st.bounds.width), Gt(E2, T2, t4), nn();
    let x3 = Ft();
    return (0, import_react2.createElement)("div", { id: r2, className: "tl-container", ref: T2 }, (0, import_react2.createElement)("div", L({ id: "canvas", className: "tl-absolute tl-canvas", ref: f5 }, x3), (0, import_react2.createElement)(qe, { FallbackComponent: rn, onReset: Ho }, (0, import_react2.createElement)("div", { ref: E2, className: "tl-absolute tl-layer" }, (0, import_react2.createElement)(Ln, { page: e4, pageState: t4, hideBounds: l2, hideIndicators: u2, hideHandles: i3, hideBindingHandles: d4, hideCloneHandles: p3, hideRotateHandle: h4, meta: a3 }), o3 && s3 && (0, import_react2.createElement)(wn, { userId: s3, users: o3, page: e4, meta: a3 }), t4.brush && (0, import_react2.createElement)(sn, { brush: t4.brush }), o3 && (0, import_react2.createElement)(xn, { userId: s3, users: o3 }))), (0, import_react2.createElement)(In, { camera: t4.camera }, n2 && (0, import_react2.createElement)(Cn, { snapLines: n2 }))));
  }
  function Ru(x3) {
    var g2 = x3, { id: r2 = "tl", shapeUtils: e4, page: t4, pageState: n2, users: o3, userId: s3, theme: a3, meta: c3, snapLines: i3, containerRef: l2, hideHandles: u2 = false, hideIndicators: d4 = false, hideCloneHandles: p3 = false, hideBindingHandles: h4 = false, hideRotateHandles: f5 = false, hideBounds: T2 = false } = g2, E2 = Q(g2, ["id", "shapeUtils", "page", "pageState", "users", "userId", "theme", "meta", "snapLines", "containerRef", "hideHandles", "hideIndicators", "hideCloneHandles", "hideBindingHandles", "hideRotateHandles", "hideBounds"]);
    jt(a3, "#" + r2);
    let y2 = (0, import_react.useRef)(null), B2 = (0, import_react.useRef)(n2);
    (0, import_react.useEffect)(() => {
      B2.current = n2;
    }, [n2]);
    let [U2] = (0, import_react.useState)(() => ({ callbacks: E2, shapeUtils: e4, rSelectionBounds: y2, rPageState: B2, inputs: new M() }));
    return (0, import_react.createElement)(ie.Provider, { value: U2 }, (0, import_react.createElement)(kn, { id: r2, page: t4, pageState: n2, snapLines: i3, users: o3, userId: s3, externalContainerRef: l2, hideBounds: T2, hideIndicators: d4, hideHandles: u2, hideCloneHandles: p3, hideBindingHandles: h4, hideRotateHandle: f5, meta: c3 }));
  }
  var Iu = (0, import_react47.memo)((0, import_react47.forwardRef)((n2, t4) => {
    var o3 = n2, { children: r2 } = o3, e4 = Q(o3, ["children"]);
    return (0, import_react47.createElement)("div", L({ ref: t4, className: "tl-positioned-div" }, e4), r2);
  }));
  var at = class {
    constructor() {
      this.refMap = new Map();
      this.boundsCache = new WeakMap();
      this.showCloneHandles = false;
      this.hideBounds = false;
      this.isStateful = false;
      this.shouldRender = () => true;
      this.getRef = (e4) => (this.refMap.has(e4.id) || this.refMap.set(e4.id, (0, import_react48.createRef)()), this.refMap.get(e4.id));
      this.hitTest = (e4, t4) => {
        let n2 = this.getBounds(e4);
        return e4.rotation ? _.pointInPolygon(t4, _.getRotatedCorners(n2, e4.rotation)) : _.pointInBounds(t4, n2);
      };
      this.hitTestBounds = (e4, t4) => {
        let n2 = this.getBounds(e4);
        if (!e4.rotation)
          return _.boundsContain(t4, n2) || _.boundsContain(n2, t4) || _.boundsCollide(n2, t4);
        let o3 = _.getRotatedCorners(n2, e4.rotation);
        return o3.every((s3) => _.pointInBounds(s3, t4)) || intersectPolylineBounds(o3, t4).length > 0;
      };
      this.getRotatedBounds = (e4) => _.getBoundsFromPoints(_.getRotatedCorners(this.getBounds(e4), e4.rotation));
    }
  };
  at.Component = (e4) => (0, import_react48.forwardRef)(e4), at.Indicator = (e4) => e4;

  // node_modules/@state-designer/react/react.esm.js
  var import_react49 = __toModule(require_react());
  var import_core = __toModule(require_src());
  var import_core2 = __toModule(require_src());
  var import_jsx_runtime = __toModule(require_jsx_runtime());
  var fails = function(exec) {
    try {
      return !!exec();
    } catch (error2) {
      return true;
    }
  };
  var toString = {}.toString;
  var classofRaw = function(it2) {
    return toString.call(it2).slice(8, -1);
  };
  var split = "".split;
  var indexedObject = fails(function() {
    return !Object("z").propertyIsEnumerable(0);
  }) ? function(it2) {
    return classofRaw(it2) == "String" ? split.call(it2, "") : Object(it2);
  } : Object;
  var requireObjectCoercible = function(it2) {
    if (it2 == void 0)
      throw TypeError("Can't call method on " + it2);
    return it2;
  };
  var toIndexedObject = function(it2) {
    return indexedObject(requireObjectCoercible(it2));
  };
  var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
  function createCommonjsModule(fn2, module) {
    return module = { exports: {} }, fn2(module, module.exports), module.exports;
  }
  var check = function(it2) {
    return it2 && it2.Math == Math && it2;
  };
  var global_1 = check(typeof globalThis == "object" && globalThis) || check(typeof window == "object" && window) || check(typeof self == "object" && self) || check(typeof commonjsGlobal == "object" && commonjsGlobal) || function() {
    return this;
  }() || Function("return this")();
  var descriptors = !fails(function() {
    return Object.defineProperty({}, 1, { get: function() {
      return 7;
    } })[1] != 7;
  });
  var isObject = function(it2) {
    return typeof it2 === "object" ? it2 !== null : typeof it2 === "function";
  };
  var document$1 = global_1.document;
  var EXISTS = isObject(document$1) && isObject(document$1.createElement);
  var documentCreateElement = function(it2) {
    return EXISTS ? document$1.createElement(it2) : {};
  };
  var ie8DomDefine = !descriptors && !fails(function() {
    return Object.defineProperty(documentCreateElement("div"), "a", {
      get: function() {
        return 7;
      }
    }).a != 7;
  });
  var anObject = function(it2) {
    if (!isObject(it2)) {
      throw TypeError(String(it2) + " is not an object");
    }
    return it2;
  };
  var toPrimitive = function(input, PREFERRED_STRING) {
    if (!isObject(input))
      return input;
    var fn2, val;
    if (PREFERRED_STRING && typeof (fn2 = input.toString) == "function" && !isObject(val = fn2.call(input)))
      return val;
    if (typeof (fn2 = input.valueOf) == "function" && !isObject(val = fn2.call(input)))
      return val;
    if (!PREFERRED_STRING && typeof (fn2 = input.toString) == "function" && !isObject(val = fn2.call(input)))
      return val;
    throw TypeError("Can't convert object to primitive value");
  };
  var $defineProperty = Object.defineProperty;
  var f = descriptors ? $defineProperty : function defineProperty(O2, P4, Attributes) {
    anObject(O2);
    P4 = toPrimitive(P4, true);
    anObject(Attributes);
    if (ie8DomDefine)
      try {
        return $defineProperty(O2, P4, Attributes);
      } catch (error2) {
      }
    if ("get" in Attributes || "set" in Attributes)
      throw TypeError("Accessors not supported");
    if ("value" in Attributes)
      O2[P4] = Attributes.value;
    return O2;
  };
  var objectDefineProperty = {
    f
  };
  var createPropertyDescriptor = function(bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value
    };
  };
  var createNonEnumerableProperty = descriptors ? function(object4, key, value) {
    return objectDefineProperty.f(object4, key, createPropertyDescriptor(1, value));
  } : function(object4, key, value) {
    object4[key] = value;
    return object4;
  };
  var setGlobal = function(key, value) {
    try {
      createNonEnumerableProperty(global_1, key, value);
    } catch (error2) {
      global_1[key] = value;
    }
    return value;
  };
  var SHARED = "__core-js_shared__";
  var store = global_1[SHARED] || setGlobal(SHARED, {});
  var sharedStore = store;
  var shared = createCommonjsModule(function(module) {
    (module.exports = function(key, value) {
      return sharedStore[key] || (sharedStore[key] = value !== void 0 ? value : {});
    })("versions", []).push({
      version: "3.15.2",
      mode: "global",
      copyright: "\xA9 2021 Denis Pushkarev (zloirock.ru)"
    });
  });
  var toObject = function(argument) {
    return Object(requireObjectCoercible(argument));
  };
  var hasOwnProperty = {}.hasOwnProperty;
  var has = Object.hasOwn || function hasOwn(it2, key) {
    return hasOwnProperty.call(toObject(it2), key);
  };
  var id = 0;
  var postfix = Math.random();
  var uid = function(key) {
    return "Symbol(" + String(key === void 0 ? "" : key) + ")_" + (++id + postfix).toString(36);
  };
  var path = global_1;
  var aFunction = function(variable) {
    return typeof variable == "function" ? variable : void 0;
  };
  var getBuiltIn = function(namespace, method) {
    return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global_1[namespace]) : path[namespace] && path[namespace][method] || global_1[namespace] && global_1[namespace][method];
  };
  var engineUserAgent = getBuiltIn("navigator", "userAgent") || "";
  var process2 = global_1.process;
  var versions = process2 && process2.versions;
  var v8 = versions && versions.v8;
  var match;
  var version;
  if (v8) {
    match = v8.split(".");
    version = match[0] < 4 ? 1 : match[0] + match[1];
  } else if (engineUserAgent) {
    match = engineUserAgent.match(/Edge\/(\d+)/);
    if (!match || match[1] >= 74) {
      match = engineUserAgent.match(/Chrome\/(\d+)/);
      if (match)
        version = match[1];
    }
  }
  var engineV8Version = version && +version;
  var nativeSymbol = !!Object.getOwnPropertySymbols && !fails(function() {
    var symbol2 = Symbol();
    return !String(symbol2) || !(Object(symbol2) instanceof Symbol) || !Symbol.sham && engineV8Version && engineV8Version < 41;
  });
  var useSymbolAsUid = nativeSymbol && !Symbol.sham && typeof Symbol.iterator == "symbol";
  var WellKnownSymbolsStore = shared("wks");
  var Symbol$1 = global_1.Symbol;
  var createWellKnownSymbol = useSymbolAsUid ? Symbol$1 : Symbol$1 && Symbol$1.withoutSetter || uid;
  var wellKnownSymbol = function(name2) {
    if (!has(WellKnownSymbolsStore, name2) || !(nativeSymbol || typeof WellKnownSymbolsStore[name2] == "string")) {
      if (nativeSymbol && has(Symbol$1, name2)) {
        WellKnownSymbolsStore[name2] = Symbol$1[name2];
      } else {
        WellKnownSymbolsStore[name2] = createWellKnownSymbol("Symbol." + name2);
      }
    }
    return WellKnownSymbolsStore[name2];
  };
  var ceil = Math.ceil;
  var floor = Math.floor;
  var toInteger = function(argument) {
    return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
  };
  var min = Math.min;
  var toLength = function(argument) {
    return argument > 0 ? min(toInteger(argument), 9007199254740991) : 0;
  };
  var max = Math.max;
  var min$1 = Math.min;
  var toAbsoluteIndex = function(index, length3) {
    var integer = toInteger(index);
    return integer < 0 ? max(integer + length3, 0) : min$1(integer, length3);
  };
  var createMethod = function(IS_INCLUDES) {
    return function($this, el, fromIndex) {
      var O2 = toIndexedObject($this);
      var length3 = toLength(O2.length);
      var index = toAbsoluteIndex(fromIndex, length3);
      var value;
      if (IS_INCLUDES && el != el)
        while (length3 > index) {
          value = O2[index++];
          if (value != value)
            return true;
        }
      else
        for (; length3 > index; index++) {
          if ((IS_INCLUDES || index in O2) && O2[index] === el)
            return IS_INCLUDES || index || 0;
        }
      return !IS_INCLUDES && -1;
    };
  };
  var arrayIncludes = {
    includes: createMethod(true),
    indexOf: createMethod(false)
  };
  var hiddenKeys = {};
  var indexOf = arrayIncludes.indexOf;
  var objectKeysInternal = function(object4, names) {
    var O2 = toIndexedObject(object4);
    var i3 = 0;
    var result = [];
    var key;
    for (key in O2)
      !has(hiddenKeys, key) && has(O2, key) && result.push(key);
    while (names.length > i3)
      if (has(O2, key = names[i3++])) {
        ~indexOf(result, key) || result.push(key);
      }
    return result;
  };
  var enumBugKeys = [
    "constructor",
    "hasOwnProperty",
    "isPrototypeOf",
    "propertyIsEnumerable",
    "toLocaleString",
    "toString",
    "valueOf"
  ];
  var objectKeys = Object.keys || function keys(O2) {
    return objectKeysInternal(O2, enumBugKeys);
  };
  var objectDefineProperties = descriptors ? Object.defineProperties : function defineProperties(O2, Properties) {
    anObject(O2);
    var keys5 = objectKeys(Properties);
    var length3 = keys5.length;
    var index = 0;
    var key;
    while (length3 > index)
      objectDefineProperty.f(O2, key = keys5[index++], Properties[key]);
    return O2;
  };
  var html = getBuiltIn("document", "documentElement");
  var keys2 = shared("keys");
  var sharedKey = function(key) {
    return keys2[key] || (keys2[key] = uid(key));
  };
  var GT = ">";
  var LT = "<";
  var PROTOTYPE = "prototype";
  var SCRIPT = "script";
  var IE_PROTO = sharedKey("IE_PROTO");
  var EmptyConstructor = function() {
  };
  var scriptTag = function(content) {
    return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
  };
  var NullProtoObjectViaActiveX = function(activeXDocument2) {
    activeXDocument2.write(scriptTag(""));
    activeXDocument2.close();
    var temp = activeXDocument2.parentWindow.Object;
    activeXDocument2 = null;
    return temp;
  };
  var NullProtoObjectViaIFrame = function() {
    var iframe = documentCreateElement("iframe");
    var JS = "java" + SCRIPT + ":";
    var iframeDocument;
    iframe.style.display = "none";
    html.appendChild(iframe);
    iframe.src = String(JS);
    iframeDocument = iframe.contentWindow.document;
    iframeDocument.open();
    iframeDocument.write(scriptTag("document.F=Object"));
    iframeDocument.close();
    return iframeDocument.F;
  };
  var activeXDocument;
  var NullProtoObject = function() {
    try {
      activeXDocument = document.domain && new ActiveXObject("htmlfile");
    } catch (error2) {
    }
    NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();
    var length3 = enumBugKeys.length;
    while (length3--)
      delete NullProtoObject[PROTOTYPE][enumBugKeys[length3]];
    return NullProtoObject();
  };
  hiddenKeys[IE_PROTO] = true;
  var objectCreate = Object.create || function create(O2, Properties) {
    var result;
    if (O2 !== null) {
      EmptyConstructor[PROTOTYPE] = anObject(O2);
      result = new EmptyConstructor();
      EmptyConstructor[PROTOTYPE] = null;
      result[IE_PROTO] = O2;
    } else
      result = NullProtoObject();
    return Properties === void 0 ? result : objectDefineProperties(result, Properties);
  };
  var UNSCOPABLES = wellKnownSymbol("unscopables");
  var ArrayPrototype = Array.prototype;
  if (ArrayPrototype[UNSCOPABLES] == void 0) {
    objectDefineProperty.f(ArrayPrototype, UNSCOPABLES, {
      configurable: true,
      value: objectCreate(null)
    });
  }
  var addToUnscopables = function(key) {
    ArrayPrototype[UNSCOPABLES][key] = true;
  };
  var iterators = {};
  var functionToString = Function.toString;
  if (typeof sharedStore.inspectSource != "function") {
    sharedStore.inspectSource = function(it2) {
      return functionToString.call(it2);
    };
  }
  var inspectSource = sharedStore.inspectSource;
  var WeakMap2 = global_1.WeakMap;
  var nativeWeakMap = typeof WeakMap2 === "function" && /native code/.test(inspectSource(WeakMap2));
  var OBJECT_ALREADY_INITIALIZED = "Object already initialized";
  var WeakMap$1 = global_1.WeakMap;
  var set;
  var get;
  var has$1;
  var enforce = function(it2) {
    return has$1(it2) ? get(it2) : set(it2, {});
  };
  var getterFor = function(TYPE) {
    return function(it2) {
      var state2;
      if (!isObject(it2) || (state2 = get(it2)).type !== TYPE) {
        throw TypeError("Incompatible receiver, " + TYPE + " required");
      }
      return state2;
    };
  };
  if (nativeWeakMap || sharedStore.state) {
    store$1 = sharedStore.state || (sharedStore.state = new WeakMap$1());
    wmget = store$1.get;
    wmhas = store$1.has;
    wmset = store$1.set;
    set = function(it2, metadata) {
      if (wmhas.call(store$1, it2))
        throw new TypeError(OBJECT_ALREADY_INITIALIZED);
      metadata.facade = it2;
      wmset.call(store$1, it2, metadata);
      return metadata;
    };
    get = function(it2) {
      return wmget.call(store$1, it2) || {};
    };
    has$1 = function(it2) {
      return wmhas.call(store$1, it2);
    };
  } else {
    STATE = sharedKey("state");
    hiddenKeys[STATE] = true;
    set = function(it2, metadata) {
      if (has(it2, STATE))
        throw new TypeError(OBJECT_ALREADY_INITIALIZED);
      metadata.facade = it2;
      createNonEnumerableProperty(it2, STATE, metadata);
      return metadata;
    };
    get = function(it2) {
      return has(it2, STATE) ? it2[STATE] : {};
    };
    has$1 = function(it2) {
      return has(it2, STATE);
    };
  }
  var store$1;
  var wmget;
  var wmhas;
  var wmset;
  var STATE;
  var internalState = {
    set,
    get,
    has: has$1,
    enforce,
    getterFor
  };
  var $propertyIsEnumerable = {}.propertyIsEnumerable;
  var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);
  var f$1 = NASHORN_BUG ? function propertyIsEnumerable(V3) {
    var descriptor = getOwnPropertyDescriptor(this, V3);
    return !!descriptor && descriptor.enumerable;
  } : $propertyIsEnumerable;
  var objectPropertyIsEnumerable = {
    f: f$1
  };
  var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  var f$2 = descriptors ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor2(O2, P4) {
    O2 = toIndexedObject(O2);
    P4 = toPrimitive(P4, true);
    if (ie8DomDefine)
      try {
        return $getOwnPropertyDescriptor(O2, P4);
      } catch (error2) {
      }
    if (has(O2, P4))
      return createPropertyDescriptor(!objectPropertyIsEnumerable.f.call(O2, P4), O2[P4]);
  };
  var objectGetOwnPropertyDescriptor = {
    f: f$2
  };
  var redefine = createCommonjsModule(function(module) {
    var getInternalState2 = internalState.get;
    var enforceInternalState = internalState.enforce;
    var TEMPLATE = String(String).split("String");
    (module.exports = function(O2, key, value, options) {
      var unsafe = options ? !!options.unsafe : false;
      var simple = options ? !!options.enumerable : false;
      var noTargetGet = options ? !!options.noTargetGet : false;
      var state2;
      if (typeof value == "function") {
        if (typeof key == "string" && !has(value, "name")) {
          createNonEnumerableProperty(value, "name", key);
        }
        state2 = enforceInternalState(value);
        if (!state2.source) {
          state2.source = TEMPLATE.join(typeof key == "string" ? key : "");
        }
      }
      if (O2 === global_1) {
        if (simple)
          O2[key] = value;
        else
          setGlobal(key, value);
        return;
      } else if (!unsafe) {
        delete O2[key];
      } else if (!noTargetGet && O2[key]) {
        simple = true;
      }
      if (simple)
        O2[key] = value;
      else
        createNonEnumerableProperty(O2, key, value);
    })(Function.prototype, "toString", function toString3() {
      return typeof this == "function" && getInternalState2(this).source || inspectSource(this);
    });
  });
  var hiddenKeys$1 = enumBugKeys.concat("length", "prototype");
  var f$3 = Object.getOwnPropertyNames || function getOwnPropertyNames(O2) {
    return objectKeysInternal(O2, hiddenKeys$1);
  };
  var objectGetOwnPropertyNames = {
    f: f$3
  };
  var f$4 = Object.getOwnPropertySymbols;
  var objectGetOwnPropertySymbols = {
    f: f$4
  };
  var ownKeys = getBuiltIn("Reflect", "ownKeys") || function ownKeys2(it2) {
    var keys5 = objectGetOwnPropertyNames.f(anObject(it2));
    var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
    return getOwnPropertySymbols ? keys5.concat(getOwnPropertySymbols(it2)) : keys5;
  };
  var copyConstructorProperties = function(target, source) {
    var keys5 = ownKeys(source);
    var defineProperty3 = objectDefineProperty.f;
    var getOwnPropertyDescriptor3 = objectGetOwnPropertyDescriptor.f;
    for (var i3 = 0; i3 < keys5.length; i3++) {
      var key = keys5[i3];
      if (!has(target, key))
        defineProperty3(target, key, getOwnPropertyDescriptor3(source, key));
    }
  };
  var replacement = /#|\.prototype\./;
  var isForced = function(feature, detection) {
    var value = data[normalize(feature)];
    return value == POLYFILL ? true : value == NATIVE ? false : typeof detection == "function" ? fails(detection) : !!detection;
  };
  var normalize = isForced.normalize = function(string5) {
    return String(string5).replace(replacement, ".").toLowerCase();
  };
  var data = isForced.data = {};
  var NATIVE = isForced.NATIVE = "N";
  var POLYFILL = isForced.POLYFILL = "P";
  var isForced_1 = isForced;
  var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;
  var _export = function(options, source) {
    var TARGET = options.target;
    var GLOBAL = options.global;
    var STATIC = options.stat;
    var FORCED, target, key, targetProperty, sourceProperty, descriptor;
    if (GLOBAL) {
      target = global_1;
    } else if (STATIC) {
      target = global_1[TARGET] || setGlobal(TARGET, {});
    } else {
      target = (global_1[TARGET] || {}).prototype;
    }
    if (target)
      for (key in source) {
        sourceProperty = source[key];
        if (options.noTargetGet) {
          descriptor = getOwnPropertyDescriptor$1(target, key);
          targetProperty = descriptor && descriptor.value;
        } else
          targetProperty = target[key];
        FORCED = isForced_1(GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key, options.forced);
        if (!FORCED && targetProperty !== void 0) {
          if (typeof sourceProperty === typeof targetProperty)
            continue;
          copyConstructorProperties(sourceProperty, targetProperty);
        }
        if (options.sham || targetProperty && targetProperty.sham) {
          createNonEnumerableProperty(sourceProperty, "sham", true);
        }
        redefine(target, key, sourceProperty, options);
      }
  };
  var correctPrototypeGetter = !fails(function() {
    function F3() {
    }
    F3.prototype.constructor = null;
    return Object.getPrototypeOf(new F3()) !== F3.prototype;
  });
  var IE_PROTO$1 = sharedKey("IE_PROTO");
  var ObjectPrototype = Object.prototype;
  var objectGetPrototypeOf = correctPrototypeGetter ? Object.getPrototypeOf : function(O2) {
    O2 = toObject(O2);
    if (has(O2, IE_PROTO$1))
      return O2[IE_PROTO$1];
    if (typeof O2.constructor == "function" && O2 instanceof O2.constructor) {
      return O2.constructor.prototype;
    }
    return O2 instanceof Object ? ObjectPrototype : null;
  };
  var ITERATOR = wellKnownSymbol("iterator");
  var BUGGY_SAFARI_ITERATORS = false;
  var returnThis = function() {
    return this;
  };
  var IteratorPrototype;
  var PrototypeOfArrayIteratorPrototype;
  var arrayIterator;
  if ([].keys) {
    arrayIterator = [].keys();
    if (!("next" in arrayIterator))
      BUGGY_SAFARI_ITERATORS = true;
    else {
      PrototypeOfArrayIteratorPrototype = objectGetPrototypeOf(objectGetPrototypeOf(arrayIterator));
      if (PrototypeOfArrayIteratorPrototype !== Object.prototype)
        IteratorPrototype = PrototypeOfArrayIteratorPrototype;
    }
  }
  var NEW_ITERATOR_PROTOTYPE = IteratorPrototype == void 0 || fails(function() {
    var test2 = {};
    return IteratorPrototype[ITERATOR].call(test2) !== test2;
  });
  if (NEW_ITERATOR_PROTOTYPE)
    IteratorPrototype = {};
  if (!has(IteratorPrototype, ITERATOR)) {
    createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);
  }
  var iteratorsCore = {
    IteratorPrototype,
    BUGGY_SAFARI_ITERATORS
  };
  var defineProperty2 = objectDefineProperty.f;
  var TO_STRING_TAG = wellKnownSymbol("toStringTag");
  var setToStringTag = function(it2, TAG, STATIC) {
    if (it2 && !has(it2 = STATIC ? it2 : it2.prototype, TO_STRING_TAG)) {
      defineProperty2(it2, TO_STRING_TAG, { configurable: true, value: TAG });
    }
  };
  var IteratorPrototype$1 = iteratorsCore.IteratorPrototype;
  var returnThis$1 = function() {
    return this;
  };
  var createIteratorConstructor = function(IteratorConstructor, NAME2, next2) {
    var TO_STRING_TAG2 = NAME2 + " Iterator";
    IteratorConstructor.prototype = objectCreate(IteratorPrototype$1, { next: createPropertyDescriptor(1, next2) });
    setToStringTag(IteratorConstructor, TO_STRING_TAG2, false);
    iterators[TO_STRING_TAG2] = returnThis$1;
    return IteratorConstructor;
  };
  var aPossiblePrototype = function(it2) {
    if (!isObject(it2) && it2 !== null) {
      throw TypeError("Can't set " + String(it2) + " as a prototype");
    }
    return it2;
  };
  var objectSetPrototypeOf = Object.setPrototypeOf || ("__proto__" in {} ? function() {
    var CORRECT_SETTER = false;
    var test2 = {};
    var setter;
    try {
      setter = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set;
      setter.call(test2, []);
      CORRECT_SETTER = test2 instanceof Array;
    } catch (error2) {
    }
    return function setPrototypeOf(O2, proto) {
      anObject(O2);
      aPossiblePrototype(proto);
      if (CORRECT_SETTER)
        setter.call(O2, proto);
      else
        O2.__proto__ = proto;
      return O2;
    };
  }() : void 0);
  var IteratorPrototype$2 = iteratorsCore.IteratorPrototype;
  var BUGGY_SAFARI_ITERATORS$1 = iteratorsCore.BUGGY_SAFARI_ITERATORS;
  var ITERATOR$1 = wellKnownSymbol("iterator");
  var KEYS = "keys";
  var VALUES = "values";
  var ENTRIES = "entries";
  var returnThis$2 = function() {
    return this;
  };
  var defineIterator = function(Iterable, NAME2, IteratorConstructor, next2, DEFAULT, IS_SET, FORCED) {
    createIteratorConstructor(IteratorConstructor, NAME2, next2);
    var getIterationMethod = function(KIND) {
      if (KIND === DEFAULT && defaultIterator)
        return defaultIterator;
      if (!BUGGY_SAFARI_ITERATORS$1 && KIND in IterablePrototype)
        return IterablePrototype[KIND];
      switch (KIND) {
        case KEYS:
          return function keys5() {
            return new IteratorConstructor(this, KIND);
          };
        case VALUES:
          return function values2() {
            return new IteratorConstructor(this, KIND);
          };
        case ENTRIES:
          return function entries() {
            return new IteratorConstructor(this, KIND);
          };
      }
      return function() {
        return new IteratorConstructor(this);
      };
    };
    var TO_STRING_TAG2 = NAME2 + " Iterator";
    var INCORRECT_VALUES_NAME = false;
    var IterablePrototype = Iterable.prototype;
    var nativeIterator = IterablePrototype[ITERATOR$1] || IterablePrototype["@@iterator"] || DEFAULT && IterablePrototype[DEFAULT];
    var defaultIterator = !BUGGY_SAFARI_ITERATORS$1 && nativeIterator || getIterationMethod(DEFAULT);
    var anyNativeIterator = NAME2 == "Array" ? IterablePrototype.entries || nativeIterator : nativeIterator;
    var CurrentIteratorPrototype, methods, KEY;
    if (anyNativeIterator) {
      CurrentIteratorPrototype = objectGetPrototypeOf(anyNativeIterator.call(new Iterable()));
      if (IteratorPrototype$2 !== Object.prototype && CurrentIteratorPrototype.next) {
        if (objectGetPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype$2) {
          if (objectSetPrototypeOf) {
            objectSetPrototypeOf(CurrentIteratorPrototype, IteratorPrototype$2);
          } else if (typeof CurrentIteratorPrototype[ITERATOR$1] != "function") {
            createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR$1, returnThis$2);
          }
        }
        setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG2, true);
      }
    }
    if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
      INCORRECT_VALUES_NAME = true;
      defaultIterator = function values2() {
        return nativeIterator.call(this);
      };
    }
    if (IterablePrototype[ITERATOR$1] !== defaultIterator) {
      createNonEnumerableProperty(IterablePrototype, ITERATOR$1, defaultIterator);
    }
    iterators[NAME2] = defaultIterator;
    if (DEFAULT) {
      methods = {
        values: getIterationMethod(VALUES),
        keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
        entries: getIterationMethod(ENTRIES)
      };
      if (FORCED)
        for (KEY in methods) {
          if (BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
            redefine(IterablePrototype, KEY, methods[KEY]);
          }
        }
      else
        _export({ target: NAME2, proto: true, forced: BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME }, methods);
    }
    return methods;
  };
  var ARRAY_ITERATOR = "Array Iterator";
  var setInternalState = internalState.set;
  var getInternalState = internalState.getterFor(ARRAY_ITERATOR);
  var es_array_iterator = defineIterator(Array, "Array", function(iterated, kind) {
    setInternalState(this, {
      type: ARRAY_ITERATOR,
      target: toIndexedObject(iterated),
      index: 0,
      kind
    });
  }, function() {
    var state2 = getInternalState(this);
    var target = state2.target;
    var kind = state2.kind;
    var index = state2.index++;
    if (!target || index >= target.length) {
      state2.target = void 0;
      return { value: void 0, done: true };
    }
    if (kind == "keys")
      return { value: index, done: false };
    if (kind == "values")
      return { value: target[index], done: false };
    return { value: [index, target[index]], done: false };
  }, "values");
  iterators.Arguments = iterators.Array;
  addToUnscopables("keys");
  addToUnscopables("values");
  addToUnscopables("entries");
  var $assign = Object.assign;
  var defineProperty$1 = Object.defineProperty;
  var objectAssign = !$assign || fails(function() {
    if (descriptors && $assign({ b: 1 }, $assign(defineProperty$1({}, "a", {
      enumerable: true,
      get: function() {
        defineProperty$1(this, "b", {
          value: 3,
          enumerable: false
        });
      }
    }), { b: 2 })).b !== 1)
      return true;
    var A4 = {};
    var B2 = {};
    var symbol2 = Symbol();
    var alphabet = "abcdefghijklmnopqrst";
    A4[symbol2] = 7;
    alphabet.split("").forEach(function(chr) {
      B2[chr] = chr;
    });
    return $assign({}, A4)[symbol2] != 7 || objectKeys($assign({}, B2)).join("") != alphabet;
  }) ? function assign(target, source) {
    var T2 = toObject(target);
    var argumentsLength = arguments.length;
    var index = 1;
    var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
    var propertyIsEnumerable3 = objectPropertyIsEnumerable.f;
    while (argumentsLength > index) {
      var S4 = indexedObject(arguments[index++]);
      var keys5 = getOwnPropertySymbols ? objectKeys(S4).concat(getOwnPropertySymbols(S4)) : objectKeys(S4);
      var length3 = keys5.length;
      var j3 = 0;
      var key;
      while (length3 > j3) {
        key = keys5[j3++];
        if (!descriptors || propertyIsEnumerable3.call(S4, key))
          T2[key] = S4[key];
      }
    }
    return T2;
  } : $assign;
  _export({ target: "Object", stat: true, forced: Object.assign !== objectAssign }, {
    assign: objectAssign
  });
  var TO_STRING_TAG$1 = wellKnownSymbol("toStringTag");
  var test = {};
  test[TO_STRING_TAG$1] = "z";
  var toStringTagSupport = String(test) === "[object z]";
  var TO_STRING_TAG$2 = wellKnownSymbol("toStringTag");
  var CORRECT_ARGUMENTS = classofRaw(function() {
    return arguments;
  }()) == "Arguments";
  var tryGet = function(it2, key) {
    try {
      return it2[key];
    } catch (error2) {
    }
  };
  var classof = toStringTagSupport ? classofRaw : function(it2) {
    var O2, tag, result;
    return it2 === void 0 ? "Undefined" : it2 === null ? "Null" : typeof (tag = tryGet(O2 = Object(it2), TO_STRING_TAG$2)) == "string" ? tag : CORRECT_ARGUMENTS ? classofRaw(O2) : (result = classofRaw(O2)) == "Object" && typeof O2.callee == "function" ? "Arguments" : result;
  };
  var objectToString = toStringTagSupport ? {}.toString : function toString2() {
    return "[object " + classof(this) + "]";
  };
  if (!toStringTagSupport) {
    redefine(Object.prototype, "toString", objectToString, { unsafe: true });
  }
  var domIterables = {
    CSSRuleList: 0,
    CSSStyleDeclaration: 0,
    CSSValueList: 0,
    ClientRectList: 0,
    DOMRectList: 0,
    DOMStringList: 0,
    DOMTokenList: 1,
    DataTransferItemList: 0,
    FileList: 0,
    HTMLAllCollection: 0,
    HTMLCollection: 0,
    HTMLFormElement: 0,
    HTMLSelectElement: 0,
    MediaList: 0,
    MimeTypeArray: 0,
    NamedNodeMap: 0,
    NodeList: 1,
    PaintRequestList: 0,
    Plugin: 0,
    PluginArray: 0,
    SVGLengthList: 0,
    SVGNumberList: 0,
    SVGPathSegList: 0,
    SVGPointList: 0,
    SVGStringList: 0,
    SVGTransformList: 0,
    SourceBufferList: 0,
    StyleSheetList: 0,
    TextTrackCueList: 0,
    TextTrackList: 0,
    TouchList: 0
  };
  var ITERATOR$2 = wellKnownSymbol("iterator");
  var TO_STRING_TAG$3 = wellKnownSymbol("toStringTag");
  var ArrayValues = es_array_iterator.values;
  for (COLLECTION_NAME in domIterables) {
    Collection = global_1[COLLECTION_NAME];
    CollectionPrototype = Collection && Collection.prototype;
    if (CollectionPrototype) {
      if (CollectionPrototype[ITERATOR$2] !== ArrayValues)
        try {
          createNonEnumerableProperty(CollectionPrototype, ITERATOR$2, ArrayValues);
        } catch (error2) {
          CollectionPrototype[ITERATOR$2] = ArrayValues;
        }
      if (!CollectionPrototype[TO_STRING_TAG$3]) {
        createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG$3, COLLECTION_NAME);
      }
      if (domIterables[COLLECTION_NAME])
        for (METHOD_NAME in es_array_iterator) {
          if (CollectionPrototype[METHOD_NAME] !== es_array_iterator[METHOD_NAME])
            try {
              createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, es_array_iterator[METHOD_NAME]);
            } catch (error2) {
              CollectionPrototype[METHOD_NAME] = es_array_iterator[METHOD_NAME];
            }
        }
    }
  }
  var Collection;
  var CollectionPrototype;
  var METHOD_NAME;
  var COLLECTION_NAME;
  function _slicedToArray(arr, i3) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i3) || _unsupportedIterableToArray(arr, i3) || _nonIterableRest();
  }
  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }
  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr))
      return _arrayLikeToArray(arr);
  }
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
      return Array.from(iter);
  }
  function _iterableToArrayLimit(arr, i3) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
      return;
    var _arr = [];
    var _n2 = true;
    var _d = false;
    var _s, _e2;
    try {
      for (_i = _i.call(arr); !(_n2 = (_s = _i.next()).done); _n2 = true) {
        _arr.push(_s.value);
        if (i3 && _arr.length === i3)
          break;
      }
    } catch (err) {
      _d = true;
      _e2 = err;
    } finally {
      try {
        if (!_n2 && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e2;
      }
    }
    return _arr;
  }
  function _unsupportedIterableToArray(o3, minLen) {
    if (!o3)
      return;
    if (typeof o3 === "string")
      return _arrayLikeToArray(o3, minLen);
    var n2 = Object.prototype.toString.call(o3).slice(8, -1);
    if (n2 === "Object" && o3.constructor)
      n2 = o3.constructor.name;
    if (n2 === "Map" || n2 === "Set")
      return Array.from(o3);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
      return _arrayLikeToArray(o3, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i3 = 0, arr2 = new Array(len); i3 < len; i3++)
      arr2[i3] = arr[i3];
    return arr2;
  }
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var emptyArray = [];
  function useStateDesigner(design) {
    var dependencies = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : emptyArray;
    var rFirstMount = (0, import_react49.useRef)(true);
    var _React$useState = (0, import_react49.useState)(function() {
      return "active" in design ? design : (0, import_core.createState)(design);
    }), _React$useState2 = _slicedToArray(_React$useState, 2), current2 = _React$useState2[0], setCurrent = _React$useState2[1];
    (0, import_react49.useEffect)(function() {
      if (!("active" in design))
        return;
      setCurrent(design);
      return design.onUpdate(function(update) {
        return setCurrent(function(current3) {
          return Object.assign(Object.assign({}, current3), {
            index: update.index,
            data: update.data,
            active: update.active,
            stateTree: update.stateTree,
            values: update.values,
            log: update.log
          });
        });
      });
    }, [design]);
    (0, import_react49.useEffect)(function() {
      if ("active" in design)
        return;
      function handleUpdate(update) {
        setCurrent(function(current3) {
          return Object.assign(Object.assign({}, current3), {
            index: update.index,
            data: update.data,
            active: update.active,
            stateTree: update.stateTree,
            values: update.values,
            log: update.log
          });
        });
      }
      if (!rFirstMount.current) {
        var next2 = (0, import_core.createState)(design);
        setCurrent(next2);
        return next2.onUpdate(handleUpdate);
      }
      rFirstMount.current = false;
      return current2.onUpdate(handleUpdate);
    }, _toConsumableArray(dependencies));
    return current2;
  }
  function createSelectorHook(state2) {
    return function useSelector(selectFn) {
      var compareFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : function(prev, next2) {
        return prev === next2;
      };
      var _useReducer = (0, import_react49.useReducer)(function(state3, update) {
        var next2 = selectFn(update);
        return compareFn(state3.current, next2) ? state3 : {
          count: state3.count + 1,
          current: next2
        };
      }, state2, function(state3) {
        return {
          count: 0,
          current: selectFn(state3)
        };
      }), _useReducer2 = _slicedToArray(_useReducer, 2), inner = _useReducer2[0], dispatch = _useReducer2[1];
      (0, import_react49.useEffect)(function() {
        return state2.onUpdate(function(update) {
          return dispatch(update);
        });
      }, [dispatch]);
      return inner.current;
    };
  }
  var aFunction$1 = function(it2) {
    if (typeof it2 != "function") {
      throw TypeError(String(it2) + " is not a function");
    }
    return it2;
  };
  var functionBindContext = function(fn2, that, length3) {
    aFunction$1(fn2);
    if (that === void 0)
      return fn2;
    switch (length3) {
      case 0:
        return function() {
          return fn2.call(that);
        };
      case 1:
        return function(a3) {
          return fn2.call(that, a3);
        };
      case 2:
        return function(a3, b3) {
          return fn2.call(that, a3, b3);
        };
      case 3:
        return function(a3, b3, c3) {
          return fn2.call(that, a3, b3, c3);
        };
    }
    return function() {
      return fn2.apply(that, arguments);
    };
  };
  var iteratorClose = function(iterator2) {
    var returnMethod = iterator2["return"];
    if (returnMethod !== void 0) {
      return anObject(returnMethod.call(iterator2)).value;
    }
  };
  var callWithSafeIterationClosing = function(iterator2, fn2, value, ENTRIES2) {
    try {
      return ENTRIES2 ? fn2(anObject(value)[0], value[1]) : fn2(value);
    } catch (error2) {
      iteratorClose(iterator2);
      throw error2;
    }
  };
  var ITERATOR$3 = wellKnownSymbol("iterator");
  var ArrayPrototype$1 = Array.prototype;
  var isArrayIteratorMethod = function(it2) {
    return it2 !== void 0 && (iterators.Array === it2 || ArrayPrototype$1[ITERATOR$3] === it2);
  };
  var createProperty = function(object4, key, value) {
    var propertyKey = toPrimitive(key);
    if (propertyKey in object4)
      objectDefineProperty.f(object4, propertyKey, createPropertyDescriptor(0, value));
    else
      object4[propertyKey] = value;
  };
  var ITERATOR$4 = wellKnownSymbol("iterator");
  var getIteratorMethod = function(it2) {
    if (it2 != void 0)
      return it2[ITERATOR$4] || it2["@@iterator"] || iterators[classof(it2)];
  };
  var arrayFrom = function from(arrayLike) {
    var O2 = toObject(arrayLike);
    var C3 = typeof this == "function" ? this : Array;
    var argumentsLength = arguments.length;
    var mapfn = argumentsLength > 1 ? arguments[1] : void 0;
    var mapping = mapfn !== void 0;
    var iteratorMethod = getIteratorMethod(O2);
    var index = 0;
    var length3, result, step, iterator2, next2, value;
    if (mapping)
      mapfn = functionBindContext(mapfn, argumentsLength > 2 ? arguments[2] : void 0, 2);
    if (iteratorMethod != void 0 && !(C3 == Array && isArrayIteratorMethod(iteratorMethod))) {
      iterator2 = iteratorMethod.call(O2);
      next2 = iterator2.next;
      result = new C3();
      for (; !(step = next2.call(iterator2)).done; index++) {
        value = mapping ? callWithSafeIterationClosing(iterator2, mapfn, [step.value, index], true) : step.value;
        createProperty(result, index, value);
      }
    } else {
      length3 = toLength(O2.length);
      result = new C3(length3);
      for (; length3 > index; index++) {
        value = mapping ? mapfn(O2[index], index) : O2[index];
        createProperty(result, index, value);
      }
    }
    result.length = index;
    return result;
  };
  var ITERATOR$5 = wellKnownSymbol("iterator");
  var SAFE_CLOSING = false;
  try {
    called = 0;
    iteratorWithReturn = {
      next: function() {
        return { done: !!called++ };
      },
      "return": function() {
        SAFE_CLOSING = true;
      }
    };
    iteratorWithReturn[ITERATOR$5] = function() {
      return this;
    };
    Array.from(iteratorWithReturn, function() {
      throw 2;
    });
  } catch (error2) {
  }
  var called;
  var iteratorWithReturn;
  var checkCorrectnessOfIteration = function(exec, SKIP_CLOSING) {
    if (!SKIP_CLOSING && !SAFE_CLOSING)
      return false;
    var ITERATION_SUPPORT = false;
    try {
      var object4 = {};
      object4[ITERATOR$5] = function() {
        return {
          next: function() {
            return { done: ITERATION_SUPPORT = true };
          }
        };
      };
      exec(object4);
    } catch (error2) {
    }
    return ITERATION_SUPPORT;
  };
  var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function(iterable) {
    Array.from(iterable);
  });
  _export({ target: "Array", stat: true, forced: INCORRECT_ITERATION }, {
    from: arrayFrom
  });
  var isArray = Array.isArray || function isArray2(arg) {
    return classofRaw(arg) == "Array";
  };
  var SPECIES = wellKnownSymbol("species");
  var arraySpeciesCreate = function(originalArray, length3) {
    var C3;
    if (isArray(originalArray)) {
      C3 = originalArray.constructor;
      if (typeof C3 == "function" && (C3 === Array || isArray(C3.prototype)))
        C3 = void 0;
      else if (isObject(C3)) {
        C3 = C3[SPECIES];
        if (C3 === null)
          C3 = void 0;
      }
    }
    return new (C3 === void 0 ? Array : C3)(length3 === 0 ? 0 : length3);
  };
  var push = [].push;
  var createMethod$1 = function(TYPE) {
    var IS_MAP = TYPE == 1;
    var IS_FILTER = TYPE == 2;
    var IS_SOME = TYPE == 3;
    var IS_EVERY = TYPE == 4;
    var IS_FIND_INDEX = TYPE == 6;
    var IS_FILTER_OUT = TYPE == 7;
    var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
    return function($this, callbackfn, that, specificCreate) {
      var O2 = toObject($this);
      var self2 = indexedObject(O2);
      var boundFunction = functionBindContext(callbackfn, that, 3);
      var length3 = toLength(self2.length);
      var index = 0;
      var create8 = specificCreate || arraySpeciesCreate;
      var target = IS_MAP ? create8($this, length3) : IS_FILTER || IS_FILTER_OUT ? create8($this, 0) : void 0;
      var value, result;
      for (; length3 > index; index++)
        if (NO_HOLES || index in self2) {
          value = self2[index];
          result = boundFunction(value, index, O2);
          if (TYPE) {
            if (IS_MAP)
              target[index] = result;
            else if (result)
              switch (TYPE) {
                case 3:
                  return true;
                case 5:
                  return value;
                case 6:
                  return index;
                case 2:
                  push.call(target, value);
              }
            else
              switch (TYPE) {
                case 4:
                  return false;
                case 7:
                  push.call(target, value);
              }
          }
        }
      return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
    };
  };
  var arrayIteration = {
    forEach: createMethod$1(0),
    map: createMethod$1(1),
    filter: createMethod$1(2),
    some: createMethod$1(3),
    every: createMethod$1(4),
    find: createMethod$1(5),
    findIndex: createMethod$1(6),
    filterOut: createMethod$1(7)
  };
  var SPECIES$1 = wellKnownSymbol("species");
  var arrayMethodHasSpeciesSupport = function(METHOD_NAME) {
    return engineV8Version >= 51 || !fails(function() {
      var array3 = [];
      var constructor = array3.constructor = {};
      constructor[SPECIES$1] = function() {
        return { foo: 1 };
      };
      return array3[METHOD_NAME](Boolean).foo !== 1;
    });
  };
  var $map = arrayIteration.map;
  var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("map");
  _export({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT }, {
    map: function map(callbackfn) {
      return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
    }
  });
  var defineProperty$2 = objectDefineProperty.f;
  var FunctionPrototype = Function.prototype;
  var FunctionPrototypeToString = FunctionPrototype.toString;
  var nameRE = /^\s*function ([^ (]*)/;
  var NAME = "name";
  if (descriptors && !(NAME in FunctionPrototype)) {
    defineProperty$2(FunctionPrototype, NAME, {
      configurable: true,
      get: function() {
        try {
          return FunctionPrototypeToString.call(this).match(nameRE)[1];
        } catch (error2) {
          return "";
        }
      }
    });
  }
  var freezing = !fails(function() {
    return Object.isExtensible(Object.preventExtensions({}));
  });
  var internalMetadata = createCommonjsModule(function(module) {
    var defineProperty3 = objectDefineProperty.f;
    var METADATA = uid("meta");
    var id2 = 0;
    var isExtensible = Object.isExtensible || function() {
      return true;
    };
    var setMetadata = function(it2) {
      defineProperty3(it2, METADATA, { value: {
        objectID: "O" + id2++,
        weakData: {}
      } });
    };
    var fastKey2 = function(it2, create8) {
      if (!isObject(it2))
        return typeof it2 == "symbol" ? it2 : (typeof it2 == "string" ? "S" : "P") + it2;
      if (!has(it2, METADATA)) {
        if (!isExtensible(it2))
          return "F";
        if (!create8)
          return "E";
        setMetadata(it2);
      }
      return it2[METADATA].objectID;
    };
    var getWeakData = function(it2, create8) {
      if (!has(it2, METADATA)) {
        if (!isExtensible(it2))
          return true;
        if (!create8)
          return false;
        setMetadata(it2);
      }
      return it2[METADATA].weakData;
    };
    var onFreeze = function(it2) {
      if (freezing && meta.REQUIRED && isExtensible(it2) && !has(it2, METADATA))
        setMetadata(it2);
      return it2;
    };
    var meta = module.exports = {
      REQUIRED: false,
      fastKey: fastKey2,
      getWeakData,
      onFreeze
    };
    hiddenKeys[METADATA] = true;
  });
  var internalMetadata_1 = internalMetadata.REQUIRED;
  var internalMetadata_2 = internalMetadata.fastKey;
  var internalMetadata_3 = internalMetadata.getWeakData;
  var internalMetadata_4 = internalMetadata.onFreeze;
  var Result = function(stopped, result) {
    this.stopped = stopped;
    this.result = result;
  };
  var iterate = function(iterable, unboundFunction, options) {
    var that = options && options.that;
    var AS_ENTRIES = !!(options && options.AS_ENTRIES);
    var IS_ITERATOR = !!(options && options.IS_ITERATOR);
    var INTERRUPTED = !!(options && options.INTERRUPTED);
    var fn2 = functionBindContext(unboundFunction, that, 1 + AS_ENTRIES + INTERRUPTED);
    var iterator2, iterFn, index, length3, result, next2, step;
    var stop = function(condition) {
      if (iterator2)
        iteratorClose(iterator2);
      return new Result(true, condition);
    };
    var callFn = function(value) {
      if (AS_ENTRIES) {
        anObject(value);
        return INTERRUPTED ? fn2(value[0], value[1], stop) : fn2(value[0], value[1]);
      }
      return INTERRUPTED ? fn2(value, stop) : fn2(value);
    };
    if (IS_ITERATOR) {
      iterator2 = iterable;
    } else {
      iterFn = getIteratorMethod(iterable);
      if (typeof iterFn != "function")
        throw TypeError("Target is not iterable");
      if (isArrayIteratorMethod(iterFn)) {
        for (index = 0, length3 = toLength(iterable.length); length3 > index; index++) {
          result = callFn(iterable[index]);
          if (result && result instanceof Result)
            return result;
        }
        return new Result(false);
      }
      iterator2 = iterFn.call(iterable);
    }
    next2 = iterator2.next;
    while (!(step = next2.call(iterator2)).done) {
      try {
        result = callFn(step.value);
      } catch (error2) {
        iteratorClose(iterator2);
        throw error2;
      }
      if (typeof result == "object" && result && result instanceof Result)
        return result;
    }
    return new Result(false);
  };
  var anInstance = function(it2, Constructor, name2) {
    if (!(it2 instanceof Constructor)) {
      throw TypeError("Incorrect " + (name2 ? name2 + " " : "") + "invocation");
    }
    return it2;
  };
  var inheritIfRequired = function($this, dummy, Wrapper) {
    var NewTarget, NewTargetPrototype;
    if (objectSetPrototypeOf && typeof (NewTarget = dummy.constructor) == "function" && NewTarget !== Wrapper && isObject(NewTargetPrototype = NewTarget.prototype) && NewTargetPrototype !== Wrapper.prototype)
      objectSetPrototypeOf($this, NewTargetPrototype);
    return $this;
  };
  var collection = function(CONSTRUCTOR_NAME, wrapper, common) {
    var IS_MAP = CONSTRUCTOR_NAME.indexOf("Map") !== -1;
    var IS_WEAK = CONSTRUCTOR_NAME.indexOf("Weak") !== -1;
    var ADDER = IS_MAP ? "set" : "add";
    var NativeConstructor = global_1[CONSTRUCTOR_NAME];
    var NativePrototype = NativeConstructor && NativeConstructor.prototype;
    var Constructor = NativeConstructor;
    var exported = {};
    var fixMethod = function(KEY) {
      var nativeMethod = NativePrototype[KEY];
      redefine(NativePrototype, KEY, KEY == "add" ? function add(value) {
        nativeMethod.call(this, value === 0 ? 0 : value);
        return this;
      } : KEY == "delete" ? function(key) {
        return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);
      } : KEY == "get" ? function get2(key) {
        return IS_WEAK && !isObject(key) ? void 0 : nativeMethod.call(this, key === 0 ? 0 : key);
      } : KEY == "has" ? function has2(key) {
        return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);
      } : function set4(key, value) {
        nativeMethod.call(this, key === 0 ? 0 : key, value);
        return this;
      });
    };
    var REPLACE = isForced_1(CONSTRUCTOR_NAME, typeof NativeConstructor != "function" || !(IS_WEAK || NativePrototype.forEach && !fails(function() {
      new NativeConstructor().entries().next();
    })));
    if (REPLACE) {
      Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
      internalMetadata.REQUIRED = true;
    } else if (isForced_1(CONSTRUCTOR_NAME, true)) {
      var instance = new Constructor();
      var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
      var THROWS_ON_PRIMITIVES = fails(function() {
        instance.has(1);
      });
      var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function(iterable) {
        new NativeConstructor(iterable);
      });
      var BUGGY_ZERO = !IS_WEAK && fails(function() {
        var $instance = new NativeConstructor();
        var index = 5;
        while (index--)
          $instance[ADDER](index, index);
        return !$instance.has(-0);
      });
      if (!ACCEPT_ITERABLES) {
        Constructor = wrapper(function(dummy, iterable) {
          anInstance(dummy, Constructor, CONSTRUCTOR_NAME);
          var that = inheritIfRequired(new NativeConstructor(), dummy, Constructor);
          if (iterable != void 0)
            iterate(iterable, that[ADDER], { that, AS_ENTRIES: IS_MAP });
          return that;
        });
        Constructor.prototype = NativePrototype;
        NativePrototype.constructor = Constructor;
      }
      if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
        fixMethod("delete");
        fixMethod("has");
        IS_MAP && fixMethod("get");
      }
      if (BUGGY_ZERO || HASNT_CHAINING)
        fixMethod(ADDER);
      if (IS_WEAK && NativePrototype.clear)
        delete NativePrototype.clear;
    }
    exported[CONSTRUCTOR_NAME] = Constructor;
    _export({ global: true, forced: Constructor != NativeConstructor }, exported);
    setToStringTag(Constructor, CONSTRUCTOR_NAME);
    if (!IS_WEAK)
      common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);
    return Constructor;
  };
  var redefineAll = function(target, src, options) {
    for (var key in src)
      redefine(target, key, src[key], options);
    return target;
  };
  var SPECIES$2 = wellKnownSymbol("species");
  var setSpecies = function(CONSTRUCTOR_NAME) {
    var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
    var defineProperty3 = objectDefineProperty.f;
    if (descriptors && Constructor && !Constructor[SPECIES$2]) {
      defineProperty3(Constructor, SPECIES$2, {
        configurable: true,
        get: function() {
          return this;
        }
      });
    }
  };
  var defineProperty$3 = objectDefineProperty.f;
  var fastKey = internalMetadata.fastKey;
  var setInternalState$1 = internalState.set;
  var internalStateGetterFor = internalState.getterFor;
  var collectionStrong = {
    getConstructor: function(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
      var C3 = wrapper(function(that, iterable) {
        anInstance(that, C3, CONSTRUCTOR_NAME);
        setInternalState$1(that, {
          type: CONSTRUCTOR_NAME,
          index: objectCreate(null),
          first: void 0,
          last: void 0,
          size: 0
        });
        if (!descriptors)
          that.size = 0;
        if (iterable != void 0)
          iterate(iterable, that[ADDER], { that, AS_ENTRIES: IS_MAP });
      });
      var getInternalState2 = internalStateGetterFor(CONSTRUCTOR_NAME);
      var define2 = function(that, key, value) {
        var state2 = getInternalState2(that);
        var entry = getEntry(that, key);
        var previous, index;
        if (entry) {
          entry.value = value;
        } else {
          state2.last = entry = {
            index: index = fastKey(key, true),
            key,
            value,
            previous: previous = state2.last,
            next: void 0,
            removed: false
          };
          if (!state2.first)
            state2.first = entry;
          if (previous)
            previous.next = entry;
          if (descriptors)
            state2.size++;
          else
            that.size++;
          if (index !== "F")
            state2.index[index] = entry;
        }
        return that;
      };
      var getEntry = function(that, key) {
        var state2 = getInternalState2(that);
        var index = fastKey(key);
        var entry;
        if (index !== "F")
          return state2.index[index];
        for (entry = state2.first; entry; entry = entry.next) {
          if (entry.key == key)
            return entry;
        }
      };
      redefineAll(C3.prototype, {
        clear: function clear() {
          var that = this;
          var state2 = getInternalState2(that);
          var data2 = state2.index;
          var entry = state2.first;
          while (entry) {
            entry.removed = true;
            if (entry.previous)
              entry.previous = entry.previous.next = void 0;
            delete data2[entry.index];
            entry = entry.next;
          }
          state2.first = state2.last = void 0;
          if (descriptors)
            state2.size = 0;
          else
            that.size = 0;
        },
        "delete": function(key) {
          var that = this;
          var state2 = getInternalState2(that);
          var entry = getEntry(that, key);
          if (entry) {
            var next2 = entry.next;
            var prev = entry.previous;
            delete state2.index[entry.index];
            entry.removed = true;
            if (prev)
              prev.next = next2;
            if (next2)
              next2.previous = prev;
            if (state2.first == entry)
              state2.first = next2;
            if (state2.last == entry)
              state2.last = prev;
            if (descriptors)
              state2.size--;
            else
              that.size--;
          }
          return !!entry;
        },
        forEach: function forEach(callbackfn) {
          var state2 = getInternalState2(this);
          var boundFunction = functionBindContext(callbackfn, arguments.length > 1 ? arguments[1] : void 0, 3);
          var entry;
          while (entry = entry ? entry.next : state2.first) {
            boundFunction(entry.value, entry.key, this);
            while (entry && entry.removed)
              entry = entry.previous;
          }
        },
        has: function has2(key) {
          return !!getEntry(this, key);
        }
      });
      redefineAll(C3.prototype, IS_MAP ? {
        get: function get2(key) {
          var entry = getEntry(this, key);
          return entry && entry.value;
        },
        set: function set4(key, value) {
          return define2(this, key === 0 ? 0 : key, value);
        }
      } : {
        add: function add(value) {
          return define2(this, value = value === 0 ? 0 : value, value);
        }
      });
      if (descriptors)
        defineProperty$3(C3.prototype, "size", {
          get: function() {
            return getInternalState2(this).size;
          }
        });
      return C3;
    },
    setStrong: function(C3, CONSTRUCTOR_NAME, IS_MAP) {
      var ITERATOR_NAME = CONSTRUCTOR_NAME + " Iterator";
      var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
      var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);
      defineIterator(C3, CONSTRUCTOR_NAME, function(iterated, kind) {
        setInternalState$1(this, {
          type: ITERATOR_NAME,
          target: iterated,
          state: getInternalCollectionState(iterated),
          kind,
          last: void 0
        });
      }, function() {
        var state2 = getInternalIteratorState(this);
        var kind = state2.kind;
        var entry = state2.last;
        while (entry && entry.removed)
          entry = entry.previous;
        if (!state2.target || !(state2.last = entry = entry ? entry.next : state2.state.first)) {
          state2.target = void 0;
          return { value: void 0, done: true };
        }
        if (kind == "keys")
          return { value: entry.key, done: false };
        if (kind == "values")
          return { value: entry.value, done: false };
        return { value: [entry.key, entry.value], done: false };
      }, IS_MAP ? "entries" : "values", !IS_MAP, true);
      setSpecies(CONSTRUCTOR_NAME);
    }
  };
  var es_map = collection("Map", function(init) {
    return function Map2() {
      return init(this, arguments.length ? arguments[0] : void 0);
    };
  }, collectionStrong);
  var FAILS_ON_PRIMITIVES = fails(function() {
    objectKeys(1);
  });
  _export({ target: "Object", stat: true, forced: FAILS_ON_PRIMITIVES }, {
    keys: function keys3(it2) {
      return objectKeys(toObject(it2));
    }
  });
  var propertyIsEnumerable2 = objectPropertyIsEnumerable.f;
  var createMethod$2 = function(TO_ENTRIES) {
    return function(it2) {
      var O2 = toIndexedObject(it2);
      var keys5 = objectKeys(O2);
      var length3 = keys5.length;
      var i3 = 0;
      var result = [];
      var key;
      while (length3 > i3) {
        key = keys5[i3++];
        if (!descriptors || propertyIsEnumerable2.call(O2, key)) {
          result.push(TO_ENTRIES ? [key, O2[key]] : O2[key]);
        }
      }
      return result;
    };
  };
  var objectToArray = {
    entries: createMethod$2(true),
    values: createMethod$2(false)
  };
  var $values = objectToArray.values;
  _export({ target: "Object", stat: true }, {
    values: function values(O2) {
      return $values(O2);
    }
  });
  var createMethod$3 = function(CONVERT_TO_STRING) {
    return function($this, pos) {
      var S4 = String(requireObjectCoercible($this));
      var position = toInteger(pos);
      var size = S4.length;
      var first, second;
      if (position < 0 || position >= size)
        return CONVERT_TO_STRING ? "" : void 0;
      first = S4.charCodeAt(position);
      return first < 55296 || first > 56319 || position + 1 === size || (second = S4.charCodeAt(position + 1)) < 56320 || second > 57343 ? CONVERT_TO_STRING ? S4.charAt(position) : first : CONVERT_TO_STRING ? S4.slice(position, position + 2) : (first - 55296 << 10) + (second - 56320) + 65536;
    };
  };
  var stringMultibyte = {
    codeAt: createMethod$3(false),
    charAt: createMethod$3(true)
  };
  var charAt = stringMultibyte.charAt;
  var STRING_ITERATOR = "String Iterator";
  var setInternalState$2 = internalState.set;
  var getInternalState$1 = internalState.getterFor(STRING_ITERATOR);
  defineIterator(String, "String", function(iterated) {
    setInternalState$2(this, {
      type: STRING_ITERATOR,
      string: String(iterated),
      index: 0
    });
  }, function next() {
    var state2 = getInternalState$1(this);
    var string5 = state2.string;
    var index = state2.index;
    var point;
    if (index >= string5.length)
      return { value: void 0, done: true };
    point = charAt(string5, index);
    state2.index += point.length;
    return { value: point, done: false };
  });

  // src/shapes/box/BoxComponent.tsx
  var React = __toModule(require_react());
  var BoxComponent = at.Component(({ shape, events, meta }, ref) => {
    const color2 = meta.isDarkMode ? "white" : "black";
    return /* @__PURE__ */ React.createElement(G, __spreadValues({
      ref
    }, events), /* @__PURE__ */ React.createElement("rect", {
      width: shape.size[0],
      height: shape.size[1],
      stroke: color2,
      strokeWidth: 2,
      strokeLinejoin: "round",
      fill: "none",
      pointerEvents: "all"
    }));
  });

  // src/shapes/box/BoxIndicator.tsx
  var React2 = __toModule(require_react());
  var BoxIndicator = at.Indicator(({ shape }) => {
    return /* @__PURE__ */ React2.createElement("rect", {
      pointerEvents: "none",
      width: shape.size[0],
      height: shape.size[1],
      fill: "none",
      stroke: "blue",
      strokeWidth: 1
    });
  });

  // src/shapes/box/BoxUtil.ts
  var BoxUtil = class extends at {
    constructor() {
      super(...arguments);
      this.Component = BoxComponent;
      this.Indicator = BoxIndicator;
      this.getBounds = (shape) => {
        const bounds = S.getFromCache(this.boundsCache, shape, () => {
          const [width, height] = shape.size;
          return {
            minX: 0,
            maxX: width,
            minY: 0,
            maxY: height,
            width,
            height
          };
        });
        return S.translateBounds(bounds, shape.point);
      };
      this.getCenter = (shape) => {
        return S.getBoundsCenter(this.getBounds(shape));
      };
    }
  };

  // src/shapes/index.ts
  var shapeUtils = {
    box: new BoxUtil()
  };
  var getShapeUtils = (shape) => {
    if (typeof shape === "string")
      return shapeUtils[shape];
    return shapeUtils[shape.type];
  };

  // src/state/constants.ts
  var INITIAL_PAGE = {
    id: "page1",
    shapes: {
      box1: {
        id: "box1",
        type: "box",
        parentId: "page1",
        name: "Box",
        childIndex: 1,
        rotation: 0,
        point: [100, 100],
        size: [100, 100]
      },
      box2: {
        id: "box2",
        type: "box",
        parentId: "page1",
        name: "Box",
        childIndex: 1,
        rotation: 0,
        point: [250, 200],
        size: [100, 100]
      }
    },
    bindings: {}
  };
  var INITIAL_PAGE_STATE = {
    id: "page1",
    selectedIds: [],
    hoveredId: void 0,
    camera: {
      point: [0, 0],
      zoom: 1
    }
  };
  var INITIAL_DATA = {
    page: INITIAL_PAGE,
    pageState: INITIAL_PAGE_STATE,
    meta: {
      isDarkMode: false
    }
  };
  var FIT_TO_SCREEN_PADDING = 100;

  // node_modules/nanoid/index.prod.js
  if (false) {
    if (typeof navigator !== "undefined" && navigator.product === "ReactNative" && typeof crypto === "undefined") {
      throw new Error("React Native does not have a built-in secure random generator. If you don\u2019t need unpredictable IDs use `nanoid/non-secure`. For secure IDs, import `react-native-get-random-values` before Nano ID.");
    }
    if (typeof msCrypto !== "undefined" && typeof crypto === "undefined") {
      throw new Error("Import file with `if (!window.crypto) window.crypto = window.msCrypto` before importing Nano ID to fix IE 11 support");
    }
    if (typeof crypto === "undefined") {
      throw new Error("Your browser does not have secure random generator. If you don\u2019t need unpredictable IDs, you can use nanoid/non-secure.");
    }
  }
  var nanoid = (size = 21) => {
    let id2 = "";
    let bytes = crypto.getRandomValues(new Uint8Array(size));
    while (size--) {
      let byte = bytes[size] & 63;
      if (byte < 36) {
        id2 += byte.toString(36);
      } else if (byte < 62) {
        id2 += (byte - 26).toString(36).toUpperCase();
      } else if (byte < 63) {
        id2 += "_";
      } else {
        id2 += "-";
      }
    }
    return id2;
  };

  // src/state/machine.ts
  var import_immer = __toModule(require_dist());
  var rendererBounds;
  var snapshot = INITIAL_DATA;
  var initialPoint = [0, 0];
  var justShiftSelectedId;
  var isCloning = false;
  var initialBoundsHandle;
  var setBounds = (newBounds) => rendererBounds = newBounds;
  var state = (0, import_core2.createState)({
    data: INITIAL_DATA,
    states: {
      tool: {
        on: {
          SELECTED_TOOL: { to: (data2, payload) => payload.name },
          STARTED_POINTING: ["setInitialPoint", "updateSnapshot"],
          PANNED: "panCamera",
          PINCHED: "pinchCamera",
          ZOOMED_TO_SELECTION: "zoomToSelection",
          ZOOMED_TO_FIT: "zoomToFit"
        },
        initial: "select",
        states: {
          select: {
            initial: "idle",
            states: {
              idle: {
                onEnter: "clearJustShiftSelectedId",
                on: {
                  CANCELLED: "clearSelection",
                  DELETED: "deleteSelection",
                  POINTED_CANVAS: [
                    {
                      unless: "isPressingShiftKey",
                      do: "clearSelection"
                    },
                    {
                      to: "pointingCanvas"
                    }
                  ],
                  POINTED_SHAPE: [
                    {
                      unless: "shapeIsSelected",
                      do: "selectShape"
                    },
                    { to: "pointingShape" }
                  ],
                  POINTED_BOUNDS: {
                    to: "pointingBounds"
                  },
                  POINTED_BOUNDS_HANDLE: {
                    do: "setInitialBoundsHandle",
                    to: "pointingBoundsHandle"
                  }
                }
              },
              pointingCanvas: {
                on: {
                  STOPPED_POINTING: {
                    to: "select.idle"
                  },
                  MOVED_POINTER: {
                    to: "brushSelecting"
                  }
                }
              },
              pointingBoundsHandle: {
                on: {
                  MOVED_POINTER: {
                    if: "hasLeftDeadZone",
                    to: "transformingSelection"
                  },
                  STOPPED_POINTING: {
                    to: "select.idle"
                  }
                }
              },
              pointingBounds: {
                on: {
                  MOVED_POINTER: {
                    if: "hasLeftDeadZone",
                    to: "translatingSelection"
                  },
                  STOPPED_POINTING: {
                    do: "clearSelection",
                    to: "select.idle"
                  }
                }
              },
              pointingShape: {
                on: {
                  MOVED_POINTER: {
                    if: "hasLeftDeadZone",
                    to: "translatingSelection"
                  },
                  STOPPED_POINTING: [
                    {
                      if: "shapeIsSelected",
                      do: "selectShape"
                    },
                    {
                      to: "select.idle"
                    }
                  ]
                }
              },
              translatingSelection: {
                onEnter: ["resetIsCloning"],
                on: {
                  TOGGLED_MODIFIER: "translateSelection",
                  MOVED_POINTER: "translateSelection",
                  PANNED: "translateSelection",
                  CANCELLED: {
                    do: "restoreSnapshot",
                    to: "select.idle"
                  },
                  STOPPED_POINTING: {
                    to: "select.idle"
                  }
                }
              },
              transformingSelection: {
                on: {
                  TOGGLED_MODIFIER: "transformSelection",
                  MOVED_POINTER: "transformSelection",
                  PANNED: "transformSelection",
                  CANCELLED: {
                    do: "restoreSnapshot",
                    to: "select.idle"
                  },
                  STOPPED_POINTING: {
                    to: "select.idle"
                  }
                }
              },
              brushSelecting: {
                onExit: "clearBrush",
                on: {
                  MOVED_POINTER: "updateBrush",
                  PANNED: "updateBrush",
                  CANCELLED: {
                    to: "select.idle"
                  },
                  STOPPED_POINTING: {
                    to: "select.idle"
                  }
                }
              }
            }
          },
          box: {
            initial: "idle",
            states: {
              idle: {
                on: {
                  STARTED_POINTING: {
                    do: "createBoxShape",
                    to: "box.creating"
                  }
                }
              },
              creating: {
                on: {
                  MOVED_POINTER: "updateCreatingShape",
                  PANNED: "updateCreatingShape",
                  STOPPED_POINTING: {
                    to: "select"
                  }
                }
              }
            }
          }
        }
      }
    },
    conditions: {
      hasLeftDeadZone(data2, payload) {
        return c.dist(getPagePoint(payload.point, data2.pageState), initialPoint) > 3;
      },
      shapeIsSelected(data2, payload) {
        return data2.pageState.selectedIds.includes(payload.target);
      },
      shapeIsPointed(data2, payload) {
        return justShiftSelectedId === payload.target;
      },
      isPressingShiftKey(data2, payload) {
        return payload.shiftKey;
      }
    },
    actions: {
      updateSnapshot(data2) {
        snapshot = (0, import_immer.current)(data2);
      },
      restoreSnapshot(data2) {
        Object.assign(data2, snapshot);
      },
      setInitialPoint(data2, payload) {
        initialPoint = getPagePoint(payload.origin, data2.pageState);
      },
      setInitialBoundsHandle(data2, payload) {
        initialBoundsHandle = payload.target;
      },
      resetIsCloning() {
        isCloning = false;
      },
      panCamera(data2, payload) {
        const { point, zoom } = data2.pageState.camera;
        data2.pageState.camera.point = c.sub(point, c.div(payload.delta, zoom));
      },
      pinchCamera(data2, payload) {
        const { camera } = data2.pageState;
        const nextZoom = payload.delta[2];
        const nextPoint = c.sub(camera.point, c.div(payload.delta, camera.zoom));
        const p0 = c.sub(c.div(payload.point, camera.zoom), nextPoint);
        const p1 = c.sub(c.div(payload.point, nextZoom), nextPoint);
        data2.pageState.camera.point = c.round(c.add(nextPoint, c.sub(p1, p0)));
        data2.pageState.camera.zoom = nextZoom;
      },
      zoomToSelection(data2) {
        const { camera, selectedIds } = data2.pageState;
        if (selectedIds.length === 0)
          return;
        const commonBounds = S.getCommonBounds(selectedIds.map((id2) => data2.page.shapes[id2]).map((shape) => getShapeUtils(shape).getBounds(shape)));
        let zoom = Math.min((rendererBounds.width - FIT_TO_SCREEN_PADDING) / commonBounds.width, (rendererBounds.height - FIT_TO_SCREEN_PADDING) / commonBounds.height);
        zoom = camera.zoom === zoom || camera.zoom < 1 ? Math.min(1, zoom) : zoom;
        const delta = [
          (rendererBounds.width - commonBounds.width * zoom) / 2 / zoom,
          (rendererBounds.height - commonBounds.height * zoom) / 2 / zoom
        ];
        camera.zoom = zoom;
        camera.point = c.add([-commonBounds.minX, -commonBounds.minY], delta);
      },
      zoomToFit(data2) {
        const { camera } = data2.pageState;
        const shapes = Object.values(data2.page.shapes);
        if (shapes.length === 0)
          return;
        const commonBounds = S.getCommonBounds(shapes.map((shape) => getShapeUtils(shape).getBounds(shape)));
        let zoom = Math.min((rendererBounds.width - FIT_TO_SCREEN_PADDING) / commonBounds.width, (rendererBounds.height - FIT_TO_SCREEN_PADDING) / commonBounds.height);
        zoom = camera.zoom === zoom || camera.zoom < 1 ? Math.min(1, zoom) : zoom;
        const delta = [
          (rendererBounds.width - commonBounds.width * zoom) / 2 / zoom,
          (rendererBounds.height - commonBounds.height * zoom) / 2 / zoom
        ];
        camera.zoom = zoom;
        camera.point = c.add([-commonBounds.minX, -commonBounds.minY], delta);
      },
      clearSelection(data2) {
        data2.pageState.selectedIds = [];
      },
      clearJustShiftSelectedId() {
        justShiftSelectedId = void 0;
      },
      selectShape(data2, payload) {
        const { selectedIds } = data2.pageState;
        if (payload.shiftKey) {
          if (selectedIds.includes(payload.target) && justShiftSelectedId !== payload.target) {
            selectedIds.splice(selectedIds.indexOf(payload.target), 1);
          } else {
            justShiftSelectedId = payload.target;
            selectedIds.push(payload.target);
          }
        } else {
          data2.pageState.selectedIds = [payload.target];
        }
      },
      updateBrush(data2, payload) {
        const brushBounds = S.getBoundsFromPoints([
          getPagePoint(payload.point, data2.pageState),
          initialPoint
        ]);
        data2.pageState.brush = brushBounds;
        const initialSelectedIds = snapshot.pageState.selectedIds;
        const hits = Object.values(data2.page.shapes).filter((shape) => {
          const shapeBounds = getShapeUtils(shape).getBounds(shape);
          return S.boundsContain(brushBounds, shapeBounds) || !payload.metaKey && S.boundsCollide(brushBounds, shapeBounds);
        }).map((shape) => shape.id);
        if (payload.shiftKey) {
          data2.pageState.selectedIds = Array.from(new Set([...initialSelectedIds, ...hits]).values());
        } else {
          data2.pageState.selectedIds = hits;
        }
      },
      clearBrush(data2) {
        data2.pageState.brush = void 0;
      },
      createBoxShape(data2, payload) {
        const shape = {
          id: nanoid(),
          type: "box",
          name: "Box",
          parentId: "page1",
          point: getPagePoint(payload.point, data2.pageState),
          size: [0, 0],
          childIndex: Object.values(data2.page.shapes).length
        };
        data2.page.shapes[shape.id] = shape;
        data2.pageState.selectedIds = [shape.id];
      },
      updateCreatingShape(data2, payload) {
        const [shapeId] = data2.pageState.selectedIds;
        const shape = data2.page.shapes[shapeId];
        const delta = c.sub(getPagePoint(payload.point, data2.pageState), initialPoint);
        const next2 = S.getTransformedBoundingBox(S.getBoundsFromPoints([initialPoint, c.add(initialPoint, [1, 1])]), v.BottomRight, delta, 0, payload.shiftKey);
        shape.point = [next2.minX, next2.minY];
        shape.size = [next2.width, next2.height];
      },
      deleteSelection(data2) {
        const { page, pageState } = data2;
        if (pageState.hoveredId && pageState.selectedIds.includes(pageState.hoveredId)) {
          pageState.hoveredId = void 0;
        }
        pageState.selectedIds.forEach((id2) => delete page.shapes[id2]);
        pageState.selectedIds = [];
      },
      translateSelection(data2, payload) {
        const delta = c.sub(getPagePoint(payload.point, data2.pageState), initialPoint);
        if (payload.shiftKey) {
          if (Math.abs(delta[0]) > Math.abs(delta[1])) {
            delta[1] = 0;
          } else {
            delta[0] = 0;
          }
        }
        if (payload.altKey && !isCloning) {
          isCloning = true;
          const clones = data2.pageState.selectedIds.map((id2) => snapshot.page.shapes[id2]).map((initialShape) => {
            const shape = data2.page.shapes[initialShape.id];
            shape.point = initialShape.point;
            const clone = __spreadProps(__spreadValues({}, initialShape), { id: nanoid() });
            data2.page.shapes[clone.id] = clone;
            snapshot.page.shapes[clone.id] = __spreadValues({}, clone);
            return clone;
          });
          data2.pageState.selectedIds = clones.map((shape) => shape.id);
        } else if (!payload.altKey && isCloning) {
          isCloning = false;
          data2.pageState.selectedIds.forEach((id2) => {
            delete data2.page.shapes[id2];
          });
          data2.pageState.selectedIds = [...snapshot.pageState.selectedIds];
        }
        data2.pageState.selectedIds.forEach((id2) => {
          const initialShape = snapshot.page.shapes[id2];
          const shape = data2.page.shapes[id2];
          shape.point = c.add(initialShape.point, delta);
        });
      },
      transformSelection(data2, payload) {
        const { selectedIds } = data2.pageState;
        const point = getPagePoint(payload.point, data2.pageState);
        const delta = c.sub(point, initialPoint);
        const initialCommonBounds = S.getCommonBounds(selectedIds.map((id2) => snapshot.page.shapes[id2]).map((shape) => getShapeUtils(shape).getBounds(shape)));
        if (initialBoundsHandle === "rotate") {
          const initialCommonCenter = S.getBoundsCenter(initialCommonBounds);
          const initialAngle = c.angle(initialCommonCenter, initialPoint);
          const currentAngle = c.angle(initialCommonCenter, point);
          let angleDelta = currentAngle - initialAngle;
          if (payload.shiftKey) {
            angleDelta = S.snapAngleToSegments(angleDelta, 24);
          }
          selectedIds.forEach((id2) => {
            const initialShape = snapshot.page.shapes[id2];
            const utils = shapeUtils[initialShape.type];
            let initialAngle2 = 0;
            if (payload.shiftKey) {
              const { rotation = 0 } = initialShape;
              initialAngle2 = S.snapAngleToSegments(rotation, 24) - rotation;
            }
            const initialShapeCenter = utils.getCenter(initialShape);
            const relativeCenter = c.sub(initialShapeCenter, initialShape.point);
            const rotatedCenter = c.rotWith(initialShapeCenter, initialCommonCenter, angleDelta);
            const shape = data2.page.shapes[id2];
            shape.point = c.sub(rotatedCenter, relativeCenter);
            shape.rotation = (initialShape.rotation || 0) + angleDelta + initialAngle2;
          });
        } else {
          let rotation = 0;
          if (selectedIds.length === 1) {
            rotation = snapshot.page.shapes[selectedIds[0]].rotation || 0;
          }
          const nextCommonBounds = S.getTransformedBoundingBox(initialCommonBounds, initialBoundsHandle, delta, rotation, payload.shiftKey);
          selectedIds.forEach((id2) => {
            const initialShape = snapshot.page.shapes[id2];
            const shape = data2.page.shapes[id2];
            const relativeBoundingBox = S.getRelativeTransformedBoundingBox(nextCommonBounds, initialCommonBounds, shapeUtils[initialShape.type].getBounds(initialShape), nextCommonBounds.scaleX < 0, nextCommonBounds.scaleY < 0);
            shape.point = [relativeBoundingBox.minX, relativeBoundingBox.minY];
            shape.size = [relativeBoundingBox.width, relativeBoundingBox.height];
          });
        }
      }
    }
  });
  var useAppState = createSelectorHook(state);
  function getPagePoint(point, pageState) {
    return c.sub(c.div(point, pageState.camera.zoom), pageState.camera.point);
  }

  // src/components/toolbar.tsx
  var React5 = __toModule(require_react());

  // node_modules/react-feather/dist/icons/mouse-pointer.js
  var import_react51 = __toModule(require_react());
  var import_prop_types = __toModule(require_prop_types());
  function _extends() {
    _extends = Object.assign || function(target) {
      for (var i3 = 1; i3 < arguments.length; i3++) {
        var source = arguments[i3];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutProperties(source, excluded) {
    if (source == null)
      return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i3;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i3 = 0; i3 < sourceSymbolKeys.length; i3++) {
        key = sourceSymbolKeys[i3];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key))
          continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i3;
    for (i3 = 0; i3 < sourceKeys.length; i3++) {
      key = sourceKeys[i3];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  var MousePointer = (0, import_react51.forwardRef)(function(_ref, ref) {
    var _ref$color = _ref.color, color2 = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties(_ref, ["color", "size"]);
    return /* @__PURE__ */ import_react51.default.createElement("svg", _extends({
      ref,
      xmlns: "http://www.w3.org/2000/svg",
      width: size,
      height: size,
      viewBox: "0 0 24 24",
      fill: "none",
      stroke: color2,
      strokeWidth: "2",
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }, rest), /* @__PURE__ */ import_react51.default.createElement("path", {
      d: "M3 3l7.07 16.97 2.51-7.39 7.39-2.51L3 3z"
    }), /* @__PURE__ */ import_react51.default.createElement("path", {
      d: "M13 13l6 6"
    }));
  });
  MousePointer.propTypes = {
    color: import_prop_types.default.string,
    size: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.number])
  };
  MousePointer.displayName = "MousePointer";
  var mouse_pointer_default = MousePointer;

  // node_modules/react-feather/dist/icons/square.js
  var import_react52 = __toModule(require_react());
  var import_prop_types2 = __toModule(require_prop_types());
  function _extends2() {
    _extends2 = Object.assign || function(target) {
      for (var i3 = 1; i3 < arguments.length; i3++) {
        var source = arguments[i3];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends2.apply(this, arguments);
  }
  function _objectWithoutProperties2(source, excluded) {
    if (source == null)
      return {};
    var target = _objectWithoutPropertiesLoose2(source, excluded);
    var key, i3;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i3 = 0; i3 < sourceSymbolKeys.length; i3++) {
        key = sourceSymbolKeys[i3];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key))
          continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose2(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i3;
    for (i3 = 0; i3 < sourceKeys.length; i3++) {
      key = sourceKeys[i3];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  var Square = (0, import_react52.forwardRef)(function(_ref, ref) {
    var _ref$color = _ref.color, color2 = _ref$color === void 0 ? "currentColor" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 24 : _ref$size, rest = _objectWithoutProperties2(_ref, ["color", "size"]);
    return /* @__PURE__ */ import_react52.default.createElement("svg", _extends2({
      ref,
      xmlns: "http://www.w3.org/2000/svg",
      width: size,
      height: size,
      viewBox: "0 0 24 24",
      fill: "none",
      stroke: color2,
      strokeWidth: "2",
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }, rest), /* @__PURE__ */ import_react52.default.createElement("rect", {
      x: "3",
      y: "3",
      width: "18",
      height: "18",
      rx: "2",
      ry: "2"
    }));
  });
  Square.propTypes = {
    color: import_prop_types2.default.string,
    size: import_prop_types2.default.oneOfType([import_prop_types2.default.string, import_prop_types2.default.number])
  };
  Square.displayName = "Square";
  var square_default = Square;

  // node_modules/@stitches/react/dist/index.mjs
  var import_react53 = __toModule(require_react());
  var e3 = "colors";
  var t3 = "sizes";
  var r = "space";
  var n = { gap: r, gridGap: r, columnGap: r, gridColumnGap: r, rowGap: r, gridRowGap: r, inset: r, insetBlock: r, insetBlockEnd: r, insetBlockStart: r, insetInline: r, insetInlineEnd: r, insetInlineStart: r, margin: r, marginTop: r, marginRight: r, marginBottom: r, marginLeft: r, marginBlock: r, marginBlockEnd: r, marginBlockStart: r, marginInline: r, marginInlineEnd: r, marginInlineStart: r, padding: r, paddingTop: r, paddingRight: r, paddingBottom: r, paddingLeft: r, paddingBlock: r, paddingBlockEnd: r, paddingBlockStart: r, paddingInline: r, paddingInlineEnd: r, paddingInlineStart: r, top: r, right: r, bottom: r, left: r, scrollMargin: r, scrollMarginTop: r, scrollMarginRight: r, scrollMarginBottom: r, scrollMarginLeft: r, scrollMarginX: r, scrollMarginY: r, scrollMarginBlock: r, scrollMarginBlockEnd: r, scrollMarginBlockStart: r, scrollMarginInline: r, scrollMarginInlineEnd: r, scrollMarginInlineStart: r, scrollPadding: r, scrollPaddingTop: r, scrollPaddingRight: r, scrollPaddingBottom: r, scrollPaddingLeft: r, scrollPaddingX: r, scrollPaddingY: r, scrollPaddingBlock: r, scrollPaddingBlockEnd: r, scrollPaddingBlockStart: r, scrollPaddingInline: r, scrollPaddingInlineEnd: r, scrollPaddingInlineStart: r, fontSize: "fontSizes", background: e3, backgroundColor: e3, backgroundImage: e3, borderImage: e3, border: e3, borderBlock: e3, borderBlockEnd: e3, borderBlockStart: e3, borderBottom: e3, borderBottomColor: e3, borderColor: e3, borderInline: e3, borderInlineEnd: e3, borderInlineStart: e3, borderLeft: e3, borderLeftColor: e3, borderRight: e3, borderRightColor: e3, borderTop: e3, borderTopColor: e3, caretColor: e3, color: e3, columnRuleColor: e3, fill: e3, outline: e3, outlineColor: e3, stroke: e3, textDecorationColor: e3, fontFamily: "fonts", fontWeight: "fontWeights", lineHeight: "lineHeights", letterSpacing: "letterSpacings", blockSize: t3, minBlockSize: t3, maxBlockSize: t3, inlineSize: t3, minInlineSize: t3, maxInlineSize: t3, width: t3, minWidth: t3, maxWidth: t3, height: t3, minHeight: t3, maxHeight: t3, flexBasis: t3, gridTemplateColumns: t3, gridTemplateRows: t3, borderWidth: "borderWidths", borderTopWidth: "borderWidths", borderRightWidth: "borderWidths", borderBottomWidth: "borderWidths", borderLeftWidth: "borderWidths", borderStyle: "borderStyles", borderTopStyle: "borderStyles", borderRightStyle: "borderStyles", borderBottomStyle: "borderStyles", borderLeftStyle: "borderStyles", borderRadius: "radii", borderTopLeftRadius: "radii", borderTopRightRadius: "radii", borderBottomRightRadius: "radii", borderBottomLeftRadius: "radii", boxShadow: "shadows", textShadow: "shadows", transition: "transitions", zIndex: "zIndices" };
  var i = (e4, t4) => typeof t4 == "function" ? { "()": Function.prototype.toString.call(t4) } : t4;
  var o = () => {
    const e4 = Object.create(null);
    return (t4, r2, ...n2) => {
      const o3 = ((e5) => JSON.stringify(e5, i))(t4);
      return o3 in e4 ? e4[o3] : e4[o3] = r2(t4, ...n2);
    };
  };
  var l = Symbol.for("sxs.internal");
  var s = (e4, t4) => Object.defineProperties(e4, Object.getOwnPropertyDescriptors(t4));
  var a = (e4) => {
    for (const t4 in e4)
      return true;
    return false;
  };
  var { hasOwnProperty: c2 } = Object.prototype;
  var d2 = (e4) => e4.includes("-") ? e4 : e4.replace(/[A-Z]/g, (e5) => "-" + e5.toLowerCase());
  var g = /\s+(?![^()]*\))/;
  var p = (e4) => (t4) => e4(...typeof t4 == "string" ? String(t4).split(g) : [t4]);
  var u = { appearance: (e4) => ({ WebkitAppearance: e4, appearance: e4 }), backfaceVisibility: (e4) => ({ WebkitBackfaceVisibility: e4, backfaceVisibility: e4 }), backdropFilter: (e4) => ({ WebkitBackdropFilter: e4, backdropFilter: e4 }), backgroundClip: (e4) => ({ WebkitBackgroundClip: e4, backgroundClip: e4 }), boxDecorationBreak: (e4) => ({ WebkitBoxDecorationBreak: e4, boxDecorationBreak: e4 }), clipPath: (e4) => ({ WebkitClipPath: e4, clipPath: e4 }), content: (e4) => ({ content: e4.includes('"') || e4.includes("'") || /^([A-Za-z]+\([^]*|[^]*-quote|inherit|initial|none|normal|revert|unset)$/.test(e4) ? e4 : `"${e4}"` }), hyphens: (e4) => ({ WebkitHyphens: e4, hyphens: e4 }), maskImage: (e4) => ({ WebkitMaskImage: e4, maskImage: e4 }), maskSize: (e4) => ({ WebkitMaskSize: e4, maskSize: e4 }), tabSize: (e4) => ({ MozTabSize: e4, tabSize: e4 }), textSizeAdjust: (e4) => ({ WebkitTextSizeAdjust: e4, textSizeAdjust: e4 }), userSelect: (e4) => ({ WebkitUserSelect: e4, userSelect: e4 }), marginBlock: p((e4, t4) => ({ marginBlockStart: e4, marginBlockEnd: t4 || e4 })), marginInline: p((e4, t4) => ({ marginInlineStart: e4, marginInlineEnd: t4 || e4 })), maxSize: p((e4, t4) => ({ maxBlockSize: e4, maxInlineSize: t4 || e4 })), minSize: p((e4, t4) => ({ minBlockSize: e4, minInlineSize: t4 || e4 })), paddingBlock: p((e4, t4) => ({ paddingBlockStart: e4, paddingBlockEnd: t4 || e4 })), paddingInline: p((e4, t4) => ({ paddingInlineStart: e4, paddingInlineEnd: t4 || e4 })) };
  var h2 = /([\d.]+)([^]*)/;
  var f2 = (e4, t4) => e4.length ? e4.reduce((e5, r2) => (e5.push(...t4.map((e6) => e6.includes("&") ? e6.replace(/&/g, /[ +>|~]/.test(r2) && /&.*&/.test(e6) ? `:is(${r2})` : r2) : r2 + " " + e6)), e5), []) : t4;
  var m2 = (e4, t4) => e4 in b && typeof t4 == "string" ? t4.replace(/^((?:[^]*[^\w-])?)(fit-content|stretch)((?:[^\w-][^]*)?)$/, (t5, r2, n2, i3) => r2 + (n2 === "stretch" ? `-moz-available${i3};${d2(e4)}:${r2}-webkit-fill-available` : `-moz-fit-content${i3};${d2(e4)}:${r2}fit-content`) + i3) : String(t4);
  var b = { blockSize: 1, height: 1, inlineSize: 1, maxBlockSize: 1, maxHeight: 1, maxInlineSize: 1, maxWidth: 1, minBlockSize: 1, minHeight: 1, minInlineSize: 1, minWidth: 1, width: 1 };
  var S3 = (e4) => e4 ? e4 + "-" : "";
  var k2 = (e4, t4, r2) => e4.replace(/([+-])?((?:\d+(?:\.\d*)?|\.\d+)(?:[Ee][+-]?\d+)?)?(\$|--)([$\w-]+)/g, (e5, n2, i3, o3, l2) => o3 == "$" == !!i3 ? e5 : (n2 || o3 == "--" ? "calc(" : "") + "var(--" + (o3 === "$" ? S3(t4) + (l2.includes("$") ? "" : S3(r2)) + l2.replace(/\$/g, "-") : l2) + ")" + (n2 || o3 == "--" ? "*" + (n2 || "") + (i3 || "1") + ")" : ""));
  var y = /\s*,\s*(?![^()]*\))/;
  var B = Object.prototype.toString;
  var $2 = (e4, t4, r2, n2, i3) => {
    let o3, l2, s3;
    const a3 = (e5, t5, r3) => {
      let c3, g2;
      const p3 = (e6) => {
        for (c3 in e6) {
          const R4 = c3.charCodeAt(0) === 64, z3 = R4 && Array.isArray(e6[c3]) ? e6[c3] : [e6[c3]];
          for (g2 of z3) {
            const e7 = /[A-Z]/.test($3 = c3) ? $3 : $3.replace(/-[^]/g, (e8) => e8[1].toUpperCase()), z4 = typeof g2 == "object" && g2 && g2.toString === B && (!n2.utils[e7] || !t5.length);
            if (e7 in n2.utils && !z4) {
              const t6 = n2.utils[e7];
              if (t6 !== l2) {
                l2 = t6, p3(t6(g2)), l2 = null;
                continue;
              }
            } else if (e7 in u) {
              const t6 = u[e7];
              if (t6 !== s3) {
                s3 = t6, p3(t6(g2)), s3 = null;
                continue;
              }
            }
            if (R4 && (b3 = c3.slice(1) in n2.media ? "@media " + n2.media[c3.slice(1)] : c3, c3 = b3.replace(/\(\s*([\w-]+)\s*(=|<|<=|>|>=)\s*([\w-]+)\s*(?:(<|<=|>|>=)\s*([\w-]+)\s*)?\)/g, (e8, t6, r4, n3, i4, o4) => {
              const l3 = h2.test(t6), s4 = 0.0625 * (l3 ? -1 : 1), [a4, c4] = l3 ? [n3, t6] : [t6, n3];
              return "(" + (r4[0] === "=" ? "" : r4[0] === ">" === l3 ? "max-" : "min-") + a4 + ":" + (r4[0] !== "=" && r4.length === 1 ? c4.replace(h2, (e9, t7, n4) => Number(t7) + s4 * (r4 === ">" ? 1 : -1) + n4) : c4) + (i4 ? ") and (" + (i4[0] === ">" ? "min-" : "max-") + a4 + ":" + (i4.length === 1 ? o4.replace(h2, (e9, t7, r5) => Number(t7) + s4 * (i4 === ">" ? -1 : 1) + r5) : o4) : "") + ")";
            })), z4) {
              const e8 = R4 ? r3.concat(c3) : [...r3], n3 = R4 ? [...t5] : f2(t5, c3.split(y));
              o3 !== void 0 && i3(x(...o3)), o3 = void 0, a3(g2, n3, e8);
            } else
              o3 === void 0 && (o3 = [[], t5, r3]), c3 = R4 || c3.charCodeAt(0) !== 36 ? c3 : `--${S3(n2.prefix)}${c3.slice(1).replace(/\$/g, "-")}`, g2 = z4 ? g2 : typeof g2 == "number" ? g2 && e7 in I2 ? String(g2) + "px" : String(g2) : k2(m2(e7, g2 == null ? "" : g2), n2.prefix, n2.themeMap[e7]), o3[0].push(`${R4 ? `${c3} ` : `${d2(c3)}:`}${g2}`);
          }
        }
        var b3, $3;
      };
      p3(e5), o3 !== void 0 && i3(x(...o3)), o3 = void 0;
    };
    a3(e4, t4, r2);
  };
  var x = (e4, t4, r2) => `${r2.map((e5) => `${e5}{`).join("")}${t4.length ? `${t4.join(",")}{` : ""}${e4.join(";")}${t4.length ? "}" : ""}${Array(r2.length ? r2.length + 1 : 0).join("}")}`;
  var I2 = { animationDelay: 1, animationDuration: 1, backgroundSize: 1, blockSize: 1, border: 1, borderBlock: 1, borderBlockEnd: 1, borderBlockEndWidth: 1, borderBlockStart: 1, borderBlockStartWidth: 1, borderBlockWidth: 1, borderBottom: 1, borderBottomLeftRadius: 1, borderBottomRightRadius: 1, borderBottomWidth: 1, borderEndEndRadius: 1, borderEndStartRadius: 1, borderInlineEnd: 1, borderInlineEndWidth: 1, borderInlineStart: 1, borderInlineStartWidth: 1, borderInlineWidth: 1, borderLeft: 1, borderLeftWidth: 1, borderRadius: 1, borderRight: 1, borderRightWidth: 1, borderSpacing: 1, borderStartEndRadius: 1, borderStartStartRadius: 1, borderTop: 1, borderTopLeftRadius: 1, borderTopRightRadius: 1, borderTopWidth: 1, borderWidth: 1, bottom: 1, columnGap: 1, columnRule: 1, columnRuleWidth: 1, columnWidth: 1, containIntrinsicSize: 1, flexBasis: 1, fontSize: 1, gap: 1, gridAutoColumns: 1, gridAutoRows: 1, gridTemplateColumns: 1, gridTemplateRows: 1, height: 1, inlineSize: 1, inset: 1, insetBlock: 1, insetBlockEnd: 1, insetBlockStart: 1, insetInline: 1, insetInlineEnd: 1, insetInlineStart: 1, left: 1, letterSpacing: 1, margin: 1, marginBlock: 1, marginBlockEnd: 1, marginBlockStart: 1, marginBottom: 1, marginInline: 1, marginInlineEnd: 1, marginInlineStart: 1, marginLeft: 1, marginRight: 1, marginTop: 1, maxBlockSize: 1, maxHeight: 1, maxInlineSize: 1, maxWidth: 1, minBlockSize: 1, minHeight: 1, minInlineSize: 1, minWidth: 1, offsetDistance: 1, offsetRotate: 1, outline: 1, outlineOffset: 1, outlineWidth: 1, overflowClipMargin: 1, padding: 1, paddingBlock: 1, paddingBlockEnd: 1, paddingBlockStart: 1, paddingBottom: 1, paddingInline: 1, paddingInlineEnd: 1, paddingInlineStart: 1, paddingLeft: 1, paddingRight: 1, paddingTop: 1, perspective: 1, right: 1, rowGap: 1, scrollMargin: 1, scrollMarginBlock: 1, scrollMarginBlockEnd: 1, scrollMarginBlockStart: 1, scrollMarginBottom: 1, scrollMarginInline: 1, scrollMarginInlineEnd: 1, scrollMarginInlineStart: 1, scrollMarginLeft: 1, scrollMarginRight: 1, scrollMarginTop: 1, scrollPadding: 1, scrollPaddingBlock: 1, scrollPaddingBlockEnd: 1, scrollPaddingBlockStart: 1, scrollPaddingBottom: 1, scrollPaddingInline: 1, scrollPaddingInlineEnd: 1, scrollPaddingInlineStart: 1, scrollPaddingLeft: 1, scrollPaddingRight: 1, scrollPaddingTop: 1, shapeMargin: 1, textDecoration: 1, textDecorationThickness: 1, textIndent: 1, textUnderlineOffset: 1, top: 1, transitionDelay: 1, transitionDuration: 1, verticalAlign: 1, width: 1, wordSpacing: 1 };
  var R2 = (e4) => String.fromCharCode(e4 + (e4 > 25 ? 39 : 97));
  var z2 = (e4) => ((e5) => {
    let t4, r2 = "";
    for (t4 = Math.abs(e5); t4 > 52; t4 = t4 / 52 | 0)
      r2 = R2(t4 % 52) + r2;
    return R2(t4 % 52) + r2;
  })(((e5, t4) => {
    let r2 = t4.length;
    for (; r2; )
      e5 = 33 * e5 ^ t4.charCodeAt(--r2);
    return e5;
  })(5381, JSON.stringify(e4)) >>> 0);
  var W2 = ["themed", "global", "styled", "onevar", "resonevar", "allvar", "inline"];
  var j2 = (e4) => {
    if (e4.href && !e4.href.startsWith(location.origin))
      return false;
    try {
      return !!e4.cssRules;
    } catch (e5) {
      return false;
    }
  };
  var E = (e4) => {
    let t4;
    const r2 = () => {
      const { cssRules: e5 } = t4.sheet;
      return [].map.call(e5, (r3, n3) => {
        const { cssText: i3 } = r3;
        let o3 = "";
        if (i3.startsWith("--sxs"))
          return "";
        if (e5[n3 - 1] && (o3 = e5[n3 - 1].cssText).startsWith("--sxs")) {
          if (!r3.cssRules.length)
            return "";
          for (const e6 in t4.rules)
            if (t4.rules[e6].group === r3)
              return `--sxs{--sxs:${[...t4.rules[e6].cache].join(" ")}}${i3}`;
          return r3.cssRules.length ? `${o3}${i3}` : "";
        }
        return i3;
      }).join("");
    }, n2 = () => {
      if (t4) {
        const { rules: e5, sheet: r3 } = t4;
        if (!r3.deleteRule) {
          for (; Object(Object(r3.cssRules)[0]).type === 3; )
            r3.cssRules.splice(0, 1);
          r3.cssRules = [];
        }
        for (const t5 in e5)
          delete e5[t5];
      }
      const i3 = Object(e4).styleSheets || [];
      for (const e5 of i3)
        if (j2(e5)) {
          for (let i4 = 0, o4 = e5.cssRules; o4[i4]; ++i4) {
            const l3 = Object(o4[i4]);
            if (l3.type !== 1)
              continue;
            const s3 = Object(o4[i4 + 1]);
            if (s3.type !== 4)
              continue;
            ++i4;
            const { cssText: a3 } = l3;
            if (!a3.startsWith("--sxs"))
              continue;
            const c3 = a3.slice(14, -3).trim().split(/\s+/), d4 = W2[c3[0]];
            d4 && (t4 || (t4 = { sheet: e5, reset: n2, rules: {}, toString: r2 }), t4.rules[d4] = { group: s3, index: i4, cache: new Set(c3) });
          }
          if (t4)
            break;
        }
      if (!t4) {
        const i4 = (e5, t5) => ({ type: t5, cssRules: [], insertRule(e6, t6) {
          this.cssRules.splice(t6, 0, i4(e6, { import: 3, undefined: 1 }[(e6.toLowerCase().match(/^@([a-z]+)/) || [])[1]] || 4));
        }, get cssText() {
          return e5 === "@media{}" ? `@media{${[].map.call(this.cssRules, (e6) => e6.cssText).join("")}}` : e5;
        } });
        t4 = { sheet: e4 ? (e4.head || e4).appendChild(document.createElement("style")).sheet : i4("", "text/css"), rules: {}, reset: n2, toString: r2 };
      }
      const { sheet: o3, rules: l2 } = t4;
      for (let e5 = W2.length - 1; e5 >= 0; --e5) {
        const t5 = W2[e5];
        if (!l2[t5]) {
          const r3 = W2[e5 + 1], n3 = l2[r3] ? l2[r3].index : o3.cssRules.length;
          o3.insertRule("@media{}", n3), o3.insertRule(`--sxs{--sxs:${e5}}`, n3), l2[t5] = { group: o3.cssRules[n3 + 1], index: n3, cache: new Set([e5]) };
        }
        v2(l2[t5]);
      }
    };
    return n2(), t4;
  };
  var v2 = (e4) => {
    const t4 = e4.group;
    let r2 = t4.cssRules.length;
    e4.apply = (e5) => {
      try {
        t4.insertRule(e5, r2), ++r2;
      } catch (e6) {
      }
    };
  };
  var T = Symbol();
  var w = o();
  var M2 = (e4, t4) => w(e4, () => (...r2) => {
    let n2 = { type: null, composers: new Set() };
    for (const t5 of r2)
      if (t5 != null)
        if (t5[l]) {
          n2.type == null && (n2.type = t5[l].type);
          for (const e5 of t5[l].composers)
            n2.composers.add(e5);
        } else
          t5.constructor !== Object || t5.$$typeof ? n2.type == null && (n2.type = t5) : n2.composers.add(C2(t5, e4));
    return n2.type == null && (n2.type = "span"), n2.composers.size || n2.composers.add(["PJLV", {}, [], [], {}, []]), P2(e4, n2, t4);
  });
  var C2 = (_a, i3) => {
    var _b = _a, { variants: e4, compoundVariants: t4, defaultVariants: r2 } = _b, n2 = __objRest(_b, ["variants", "compoundVariants", "defaultVariants"]);
    const o3 = `${S3(i3.prefix)}c-${z2(n2)}`, l2 = [], s3 = [], d4 = Object.create(null), g2 = [];
    for (const e5 in r2)
      d4[e5] = String(r2[e5]);
    if (typeof e4 == "object" && e4)
      for (const t5 in e4) {
        p3 = d4, u2 = t5, c2.call(p3, u2) || (d4[t5] = "undefined");
        const r3 = e4[t5];
        for (const e5 in r3) {
          const n3 = { [t5]: String(e5) };
          String(e5) === "undefined" && g2.push(t5);
          const i4 = r3[e5], o4 = [n3, i4, !a(i4)];
          l2.push(o4);
        }
      }
    var p3, u2;
    if (typeof t4 == "object" && t4)
      for (const e5 of t4) {
        let _a2 = e5, { css: t5 } = _a2, r3 = __objRest(_a2, ["css"]);
        t5 = typeof t5 == "object" && t5 || {};
        for (const e6 in r3)
          r3[e6] = String(r3[e6]);
        const n3 = [r3, t5, !a(t5)];
        s3.push(n3);
      }
    return [o3, n2, l2, s3, d4, g2];
  };
  var P2 = (e4, t4, r2) => {
    const [n2, i3, o3, a3] = L2(t4.composers), c3 = typeof t4.type == "function" || t4.type.$$typeof ? ((e5) => {
      function t5() {
        for (let r3 = 0; r3 < t5[T].length; r3++) {
          const [n3, i4] = t5[T][r3];
          e5.rules[n3].apply(i4);
        }
        return t5[T] = [], null;
      }
      return t5[T] = [], t5.rules = {}, W2.forEach((e6) => t5.rules[e6] = { apply: (r3) => t5[T].push([e6, r3]) }), t5;
    })(r2) : null, d4 = (c3 || r2).rules, g2 = `.${n2}${i3.length > 1 ? `:where(.${i3.slice(1).join(".")})` : ""}`, p3 = (l2) => {
      l2 = typeof l2 == "object" && l2 || A2;
      const _a = l2, { css: s3 } = _a, p4 = __objRest(_a, ["css"]), u2 = {};
      for (const e5 in o3)
        if (delete p4[e5], e5 in l2) {
          let t5 = l2[e5];
          typeof t5 == "object" && t5 ? u2[e5] = __spreadValues({ "@initial": o3[e5] }, t5) : (t5 = String(t5), u2[e5] = t5 !== "undefined" || a3.has(e5) ? t5 : o3[e5]);
        } else
          u2[e5] = o3[e5];
      const h4 = new Set([...i3]);
      for (const [n3, i4, o4, l3] of t4.composers) {
        r2.rules.styled.cache.has(n3) || (r2.rules.styled.cache.add(n3), $2(i4, [`.${n3}`], [], e4, (e5) => {
          d4.styled.apply(e5);
        }));
        const t5 = O(o4, u2, e4.media), s4 = O(l3, u2, e4.media, true);
        for (const i5 of t5)
          if (i5 !== void 0)
            for (const [t6, o5, l4] of i5) {
              const i6 = `${n3}-${z2(o5)}-${t6}`;
              h4.add(i6);
              const s5 = (l4 ? r2.rules.resonevar : r2.rules.onevar).cache, a4 = l4 ? d4.resonevar : d4.onevar;
              s5.has(i6) || (s5.add(i6), $2(o5, [`.${i6}`], [], e4, (e5) => {
                a4.apply(e5);
              }));
            }
        for (const t6 of s4)
          if (t6 !== void 0)
            for (const [i5, o5] of t6) {
              const t7 = `${n3}-${z2(o5)}-${i5}`;
              h4.add(t7), r2.rules.allvar.cache.has(t7) || (r2.rules.allvar.cache.add(t7), $2(o5, [`.${t7}`], [], e4, (e5) => {
                d4.allvar.apply(e5);
              }));
            }
      }
      if (typeof s3 == "object" && s3) {
        const t5 = `${n2}-i${z2(s3)}-css`;
        h4.add(t5), r2.rules.inline.cache.has(t5) || (r2.rules.inline.cache.add(t5), $2(s3, [`.${t5}`], [], e4, (e5) => {
          d4.inline.apply(e5);
        }));
      }
      for (const e5 of String(l2.className || "").trim().split(/\s+/))
        e5 && h4.add(e5);
      const f5 = p4.className = [...h4].join(" ");
      return { type: t4.type, className: f5, selector: g2, props: p4, toString: () => f5, deferredInjector: c3 };
    };
    return s(p3, { className: n2, selector: g2, [l]: t4, toString: () => (r2.rules.styled.cache.has(n2) || p3(), n2) });
  };
  var L2 = (e4) => {
    let t4 = "";
    const r2 = [], n2 = {}, i3 = [];
    for (const [o3, , , , l2, s3] of e4) {
      t4 === "" && (t4 = o3), r2.push(o3), i3.push(...s3);
      for (const e5 in l2) {
        const t5 = l2[e5];
        (n2[e5] === void 0 || t5 !== "undefined" || s3.includes(t5)) && (n2[e5] = t5);
      }
    }
    return [t4, r2, n2, new Set(i3)];
  };
  var O = (e4, t4, r2, n2) => {
    const i3 = [];
    e:
      for (let [o3, l2, s3] of e4) {
        if (s3)
          continue;
        let e5, a3 = 0, c3 = false;
        for (e5 in o3) {
          const n3 = o3[e5];
          let i4 = t4[e5];
          if (i4 !== n3) {
            if (typeof i4 != "object" || !i4)
              continue e;
            {
              let e6, t5, o4 = 0;
              for (const l3 in i4) {
                if (n3 === String(i4[l3])) {
                  if (l3 !== "@initial") {
                    const e7 = l3.slice(1);
                    (t5 = t5 || []).push(e7 in r2 ? r2[e7] : l3.replace(/^@media ?/, "")), c3 = true;
                  }
                  a3 += o4, e6 = true;
                }
                ++o4;
              }
              if (t5 && t5.length && (l2 = { ["@media " + t5.join(", ")]: l2 }), !e6)
                continue e;
            }
          }
        }
        (i3[a3] = i3[a3] || []).push([n2 ? "cv" : `${e5}-${o3[e5]}`, l2, c3]);
      }
    return i3;
  };
  var A2 = {};
  var N2 = o();
  var D2 = (e4, t4) => N2(e4, () => (...r2) => {
    const n2 = () => {
      for (let n3 of r2) {
        n3 = typeof n3 == "object" && n3 || {};
        let r3 = z2(n3);
        if (!t4.rules.global.cache.has(r3)) {
          if (t4.rules.global.cache.add(r3), "@import" in n3) {
            let e5 = [].indexOf.call(t4.sheet.cssRules, t4.rules.themed.group) - 1;
            for (let r4 of [].concat(n3["@import"]))
              r4 = r4.includes('"') || r4.includes("'") ? r4 : `"${r4}"`, t4.sheet.insertRule(`@import ${r4};`, e5++);
            delete n3["@import"];
          }
          $2(n3, [], [], e4, (e5) => {
            t4.rules.global.apply(e5);
          });
        }
      }
      return "";
    };
    return s(n2, { toString: n2 });
  });
  var H2 = o();
  var V2 = (e4, t4) => H2(e4, () => (r2) => {
    const n2 = `${S3(e4.prefix)}k-${z2(r2)}`, i3 = () => {
      if (!t4.rules.global.cache.has(n2)) {
        t4.rules.global.cache.add(n2);
        const i4 = [];
        $2(r2, [], [], e4, (e5) => i4.push(e5));
        const o3 = `@keyframes ${n2}{${i4.join("")}}`;
        t4.rules.global.apply(o3);
      }
      return n2;
    };
    return s(i3, { get name() {
      return i3();
    }, toString: i3 });
  });
  var G2 = class {
    constructor(e4, t4, r2, n2) {
      this.token = e4 == null ? "" : String(e4), this.value = t4 == null ? "" : String(t4), this.scale = r2 == null ? "" : String(r2), this.prefix = n2 == null ? "" : String(n2);
    }
    get computedValue() {
      return "var(" + this.variable + ")";
    }
    get variable() {
      return "--" + S3(this.prefix) + S3(this.scale) + this.token;
    }
    toString() {
      return this.computedValue;
    }
  };
  var F2 = o();
  var J = (e4, t4) => F2(e4, () => (r2, n2) => {
    n2 = typeof r2 == "object" && r2 || Object(n2);
    const i3 = `.${r2 = (r2 = typeof r2 == "string" ? r2 : "") || `${S3(e4.prefix)}t-${z2(n2)}`}`, o3 = {}, l2 = [];
    for (const t5 in n2) {
      o3[t5] = {};
      for (const r3 in n2[t5]) {
        const i4 = `--${S3(e4.prefix)}${t5}-${r3}`, s4 = k2(String(n2[t5][r3]), e4.prefix, t5);
        o3[t5][r3] = new G2(r3, s4, t5, e4.prefix), l2.push(`${i4}:${s4}`);
      }
    }
    const s3 = () => {
      if (l2.length && !t4.rules.themed.cache.has(r2)) {
        t4.rules.themed.cache.add(r2);
        const i4 = `${n2 === e4.theme ? ":root," : ""}.${r2}{${l2.join(";")}}`;
        t4.rules.themed.apply(i4);
      }
      return r2;
    };
    return __spreadProps(__spreadValues({}, o3), { get className() {
      return s3();
    }, selector: i3, toString: s3 });
  });
  var U = o();
  var Y = o();
  var q2 = (e4) => {
    const t4 = ((e5) => {
      let t5 = false;
      const r2 = U(e5, (e6) => {
        t5 = true;
        const r3 = "prefix" in (e6 = typeof e6 == "object" && e6 || {}) ? String(e6.prefix) : "", i3 = typeof e6.media == "object" && e6.media || {}, o3 = typeof e6.root == "object" ? e6.root || null : globalThis.document || null, l2 = typeof e6.theme == "object" && e6.theme || {}, s3 = { prefix: r3, media: i3, theme: l2, themeMap: typeof e6.themeMap == "object" && e6.themeMap || __spreadValues({}, n), utils: typeof e6.utils == "object" && e6.utils || {} }, a3 = E(o3), c3 = { css: M2(s3, a3), globalCss: D2(s3, a3), keyframes: V2(s3, a3), createTheme: J(s3, a3), reset() {
          a3.reset(), c3.theme.toString();
        }, theme: {}, sheet: a3, config: s3, prefix: r3, getCssText: a3.toString, toString: a3.toString };
        return String(c3.theme = c3.createTheme(l2)), c3;
      });
      return t5 || r2.reset(), r2;
    })(e4);
    return t4.styled = (({ config: e5, sheet: t5 }) => Y(e5, () => {
      const r2 = M2(e5, t5);
      return (...e6) => {
        const t6 = r2(...e6), n2 = t6[l].type, i3 = import_react53.default.forwardRef((e7, r3) => {
          const i4 = e7 && e7.as || n2, { props: o3, deferredInjector: l2 } = t6(e7);
          return delete o3.as, o3.ref = r3, l2 ? import_react53.default.createElement(import_react53.default.Fragment, null, import_react53.default.createElement(i4, o3), import_react53.default.createElement(l2, null)) : import_react53.default.createElement(i4, o3);
        });
        return i3.className = t6.className, i3.displayName = `Styled.${n2.displayName || n2.name || n2}`, i3.selector = t6.selector, i3.toString = () => t6.selector, i3[l] = t6[l], i3;
      };
    }))(t4), t4;
  };

  // src/stitches.config.ts
  var { styled } = q2({
    themeMap: __spreadValues({}, n),
    theme: {
      colors: {
        text: "black",
        background: "white",
        hover: "rgba(144, 144, 144, .1)",
        border: "rgba(144, 144, 144, .32)",
        active: "dodgerblue"
      },
      space: {
        0: "2px",
        1: "3px",
        2: "4px",
        3: "8px",
        4: "12px",
        5: "16px"
      },
      fontSizes: {
        0: "10px",
        1: "12px",
        2: "13px",
        3: "16px",
        4: "18px"
      },
      fonts: {
        ui: '"Inter", system-ui, sans-serif',
        body: '"Inter", system-ui, sans-serif',
        mono: '"Roboto Mono", monospace'
      },
      fontWeights: {
        0: "400",
        1: "500",
        2: "700"
      },
      lineHeights: {},
      letterSpacings: {},
      sizes: {},
      borderWidths: {
        0: "$1"
      },
      borderStyles: {},
      radii: {
        0: "2px",
        1: "4px",
        2: "8px"
      },
      zIndices: {},
      transitions: {}
    },
    media: {
      micro: "(max-width: 370px)",
      sm: "(min-width: 640px)",
      md: "(min-width: 768px)"
    },
    utils: {
      zStrokeWidth: () => (value) => ({
        strokeWidth: `calc(${value}px / var(--camera-zoom))`
      })
    }
  });
  var stitches_config_default = styled;

  // src/components/toolbar.tsx
  var onToolSelect = (e4) => {
    state.send("SELECTED_TOOL", { name: e4.currentTarget.id });
  };
  function Toolbar({ activeStates, lastEvent }) {
    return /* @__PURE__ */ React5.createElement(ToolbarContainer, null, /* @__PURE__ */ React5.createElement(PrimaryTools, null, /* @__PURE__ */ React5.createElement(PrimaryToolButton, {
      id: "select",
      isActive: state.isIn("select"),
      onClick: onToolSelect
    }, /* @__PURE__ */ React5.createElement(Highlight, null, /* @__PURE__ */ React5.createElement(mouse_pointer_default, null))), /* @__PURE__ */ React5.createElement(PrimaryToolButton, {
      id: "box",
      isActive: state.isIn("box"),
      onClick: onToolSelect
    }, /* @__PURE__ */ React5.createElement(Highlight, null, /* @__PURE__ */ React5.createElement(square_default, null)))), /* @__PURE__ */ React5.createElement(StatusBar, null, /* @__PURE__ */ React5.createElement("div", null, activeStates.slice(1).map((state2) => state2.split("#state_1.root")[1]).join(" - ")), /* @__PURE__ */ React5.createElement("div", null, lastEvent)));
  }
  var ToolbarContainer = stitches_config_default("div", {
    display: "grid",
    gridTemplateColumns: "1fr",
    gridTemplateRows: "auto auto",
    gridRowGap: "$5",
    position: "fixed",
    bottom: "0",
    width: "100%",
    zIndex: "100"
  });
  var PrimaryTools = stitches_config_default("div", {
    display: "flex",
    width: "fit-content",
    borderRadius: "100px",
    border: "1px solid $border",
    overflow: "hidden",
    padding: "$2",
    justifySelf: "center",
    backgroundColor: "$background"
  });
  var Highlight = stitches_config_default("div", {
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    width: "100%",
    height: "100%",
    padding: 10,
    borderRadius: "100%",
    transition: "background-color .025s"
  });
  var PrimaryToolButton = stitches_config_default("button", {
    cursor: "pointer",
    width: "40px",
    height: "40px",
    padding: 2,
    margin: 0,
    background: "none",
    backgroundColor: "none",
    border: "none",
    color: "$text",
    variants: {
      isActive: {
        true: {
          color: "$background",
          [`& > ${Highlight}`]: {
            backgroundColor: "$text"
          }
        },
        false: {
          [`&:hover > ${Highlight}`]: {
            backgroundColor: "$hover"
          },
          "&:active": {
            color: "$background"
          },
          [`&:active > ${Highlight}`]: {
            backgroundColor: "$text"
          }
        }
      }
    }
  });
  var StatusBar = stitches_config_default("div", {
    display: "flex",
    alignItems: "center",
    justifyContent: "space-between",
    padding: "8px 12px",
    borderTop: "1px solid $border",
    fontSize: "$1",
    fontWeight: "$1",
    backgroundColor: "$background"
  });

  // node_modules/@y-presence/react/dist/esm/index.js
  var import_react55 = __toModule(require_react());
  var import_react56 = __toModule(require_react());
  var import_react57 = __toModule(require_react());
  var import_react58 = __toModule(require_react());
  var import_react59 = __toModule(require_react());
  var import_react60 = __toModule(require_react());
  var import_react61 = __toModule(require_react());
  function o2() {
    let [e4, r2] = (0, import_react56.useReducer)((t4) => t4 + 1, 0);
    return r2;
  }
  function p2() {
    return import_react57.default.createContext(null);
  }
  var a2 = p2();
  function s2() {
    let e4 = import_react57.default.useContext(a2);
    if (e4 == null)
      throw new Error("Couldn't find RoomProvider in the React tree");
    return e4;
  }
  function A3() {
    let e4 = s2(), r2 = o2();
    return import_react55.default.useEffect(() => {
      let t4 = e4.subscribe("others", r2);
      return () => t4();
    }, [e4]), e4.getOthers();
  }
  function K() {
    let e4 = s2();
    return import_react60.default.useCallback((t4) => {
      e4.updatePresence(t4);
    }, [e4]);
  }

  // src/room.tsx
  var import_react64 = __toModule(require_react());

  // src/cursor.tsx
  var import_react62 = __toModule(require_react());
  var Cursor = import_react62.default.memo(({ cursor, color: color2, name: name2 }) => {
    if (!cursor)
      return null;
    const { x: x3, y: y2 } = cursor;
    return /* @__PURE__ */ import_react62.default.createElement("div", {
      style: {
        position: "absolute",
        pointerEvents: "none",
        userSelect: "none",
        left: 0,
        top: 0,
        transition: "transform 0.5s cubic-bezier(.17,.93,.38,1)",
        transform: `translateX(${x3}px) translateY(${y2}px)`
      }
    }, /* @__PURE__ */ import_react62.default.createElement("svg", {
      className: "cursor",
      width: "24",
      height: "36",
      viewBox: "0 0 24 36",
      fill: "none",
      stroke: "white",
      xmlns: "http://www.w3.org/2000/svg"
    }, /* @__PURE__ */ import_react62.default.createElement("path", {
      d: "M5.65376 12.3673H5.46026L5.31717 12.4976L0.500002 16.8829L0.500002 1.19841L11.7841 12.3673H5.65376Z",
      fill: color2
    })), /* @__PURE__ */ import_react62.default.createElement("div", {
      style: {
        backgroundColor: color2,
        borderRadius: 4,
        position: "absolute",
        top: 20,
        left: 10,
        padding: "5px 10px"
      }
    }, /* @__PURE__ */ import_react62.default.createElement("p", {
      style: {
        whiteSpace: "nowrap",
        fontSize: 13,
        color: "white"
      }
    }, name2)));
  });

  // src/room.tsx
  function Room() {
    const others2 = A3();
    const updatePresence = K();
    const handlePointMove = import_react64.default.useCallback((e4) => {
      updatePresence({
        cursor: {
          x: e4.clientX,
          y: e4.clientY
        }
      });
    }, [updatePresence]);
    return /* @__PURE__ */ import_react64.default.createElement("div", {
      className: "room",
      onPointerMove: handlePointMove
    }, /* @__PURE__ */ import_react64.default.createElement("div", {
      className: "info"
    }, "Number of connected users: ", others2.length + 1), others2.map((user) => {
      return /* @__PURE__ */ import_react64.default.createElement(Cursor, __spreadValues({
        key: user.id
      }, user.presence));
    }));
  }

  // node_modules/lib0/map.js
  var create2 = () => new Map();
  var copy = (m3) => {
    const r2 = create2();
    m3.forEach((v3, k3) => {
      r2.set(k3, v3);
    });
    return r2;
  };
  var setIfUndefined = (map10, key, createT) => {
    let set4 = map10.get(key);
    if (set4 === void 0) {
      map10.set(key, set4 = createT());
    }
    return set4;
  };
  var map2 = (m3, f5) => {
    const res = [];
    for (const [key, value] of m3) {
      res.push(f5(value, key));
    }
    return res;
  };
  var any = (m3, f5) => {
    for (const [key, value] of m3) {
      if (f5(value, key)) {
        return true;
      }
    }
    return false;
  };

  // node_modules/lib0/set.js
  var create3 = () => new Set();

  // node_modules/lib0/array.js
  var last = (arr) => arr[arr.length - 1];
  var appendTo = (dest, src) => {
    for (let i3 = 0; i3 < src.length; i3++) {
      dest.push(src[i3]);
    }
  };
  var from2 = Array.from;
  var isArray3 = Array.isArray;

  // node_modules/lib0/observable.js
  var Observable = class {
    constructor() {
      this._observers = create2();
    }
    on(name2, f5) {
      setIfUndefined(this._observers, name2, create3).add(f5);
    }
    once(name2, f5) {
      const _f = (...args2) => {
        this.off(name2, _f);
        f5(...args2);
      };
      this.on(name2, _f);
    }
    off(name2, f5) {
      const observers = this._observers.get(name2);
      if (observers !== void 0) {
        observers.delete(f5);
        if (observers.size === 0) {
          this._observers.delete(name2);
        }
      }
    }
    emit(name2, args2) {
      return from2((this._observers.get(name2) || create2()).values()).forEach((f5) => f5(...args2));
    }
    destroy() {
      this._observers = create2();
    }
  };

  // node_modules/lib0/math.js
  var floor2 = Math.floor;
  var abs = Math.abs;
  var min2 = (a3, b3) => a3 < b3 ? a3 : b3;
  var max2 = (a3, b3) => a3 > b3 ? a3 : b3;
  var isNaN2 = Number.isNaN;
  var pow = Math.pow;
  var isNegativeZero = (n2) => n2 !== 0 ? n2 < 0 : 1 / n2 < 0;

  // node_modules/lib0/string.js
  var fromCharCode = String.fromCharCode;
  var fromCodePoint = String.fromCodePoint;
  var toLowerCase = (s3) => s3.toLowerCase();
  var trimLeftRegex = /^\s*/g;
  var trimLeft = (s3) => s3.replace(trimLeftRegex, "");
  var fromCamelCaseRegex = /([A-Z])/g;
  var fromCamelCase = (s3, separator) => trimLeft(s3.replace(fromCamelCaseRegex, (match2) => `${separator}${toLowerCase(match2)}`));
  var _encodeUtf8Polyfill = (str) => {
    const encodedString = unescape(encodeURIComponent(str));
    const len = encodedString.length;
    const buf = new Uint8Array(len);
    for (let i3 = 0; i3 < len; i3++) {
      buf[i3] = encodedString.codePointAt(i3);
    }
    return buf;
  };
  var utf8TextEncoder = typeof TextEncoder !== "undefined" ? new TextEncoder() : null;
  var _encodeUtf8Native = (str) => utf8TextEncoder.encode(str);
  var encodeUtf8 = utf8TextEncoder ? _encodeUtf8Native : _encodeUtf8Polyfill;
  var utf8TextDecoder = typeof TextDecoder === "undefined" ? null : new TextDecoder("utf-8", { fatal: true, ignoreBOM: true });
  if (utf8TextDecoder && utf8TextDecoder.decode(new Uint8Array()).length === 1) {
    utf8TextDecoder = null;
  }

  // node_modules/lib0/conditions.js
  var undefinedToNull = (v3) => v3 === void 0 ? null : v3;

  // node_modules/lib0/storage.js
  var VarStoragePolyfill = class {
    constructor() {
      this.map = new Map();
    }
    setItem(key, newValue) {
      this.map.set(key, newValue);
    }
    getItem(key) {
      return this.map.get(key);
    }
  };
  var _localStorage = new VarStoragePolyfill();
  var usePolyfill = true;
  try {
    if (typeof localStorage !== "undefined") {
      _localStorage = localStorage;
      usePolyfill = false;
    }
  } catch (e4) {
  }
  var varStorage = _localStorage;
  var onChange = (eventHandler) => usePolyfill || addEventListener("storage", eventHandler);

  // node_modules/lib0/environment.js
  var isNode = typeof process !== "undefined" && process.release && /node|io\.js/.test(process.release.name);
  var isBrowser = typeof window !== "undefined" && !isNode;
  var isMac = typeof navigator !== "undefined" ? /Mac/.test(navigator.platform) : false;
  var params;
  var args = [];
  var computeParams = () => {
    if (params === void 0) {
      if (isNode) {
        params = create2();
        const pargs = process.argv;
        let currParamName = null;
        for (let i3 = 0; i3 < pargs.length; i3++) {
          const parg = pargs[i3];
          if (parg[0] === "-") {
            if (currParamName !== null) {
              params.set(currParamName, "");
            }
            currParamName = parg;
          } else {
            if (currParamName !== null) {
              params.set(currParamName, parg);
              currParamName = null;
            } else {
              args.push(parg);
            }
          }
        }
        if (currParamName !== null) {
          params.set(currParamName, "");
        }
      } else if (typeof location === "object") {
        params = create2();
        (location.search || "?").slice(1).split("&").forEach((kv) => {
          if (kv.length !== 0) {
            const [key, value] = kv.split("=");
            params.set(`--${fromCamelCase(key, "-")}`, value);
            params.set(`-${fromCamelCase(key, "-")}`, value);
          }
        });
      } else {
        params = create2();
      }
    }
    return params;
  };
  var hasParam = (name2) => computeParams().has(name2);
  var getVariable = (name2) => isNode ? undefinedToNull(process.env[name2.toUpperCase()]) : undefinedToNull(varStorage.getItem(name2));
  var hasConf = (name2) => hasParam("--" + name2) || getVariable(name2) !== null;
  var production = hasConf("production");

  // node_modules/lib0/binary.js
  var BIT1 = 1;
  var BIT2 = 2;
  var BIT3 = 4;
  var BIT4 = 8;
  var BIT6 = 32;
  var BIT7 = 64;
  var BIT8 = 128;
  var BIT18 = 1 << 17;
  var BIT19 = 1 << 18;
  var BIT20 = 1 << 19;
  var BIT21 = 1 << 20;
  var BIT22 = 1 << 21;
  var BIT23 = 1 << 22;
  var BIT24 = 1 << 23;
  var BIT25 = 1 << 24;
  var BIT26 = 1 << 25;
  var BIT27 = 1 << 26;
  var BIT28 = 1 << 27;
  var BIT29 = 1 << 28;
  var BIT30 = 1 << 29;
  var BIT31 = 1 << 30;
  var BIT32 = 1 << 31;
  var BITS5 = 31;
  var BITS6 = 63;
  var BITS7 = 127;
  var BITS17 = BIT18 - 1;
  var BITS18 = BIT19 - 1;
  var BITS19 = BIT20 - 1;
  var BITS20 = BIT21 - 1;
  var BITS21 = BIT22 - 1;
  var BITS22 = BIT23 - 1;
  var BITS23 = BIT24 - 1;
  var BITS24 = BIT25 - 1;
  var BITS25 = BIT26 - 1;
  var BITS26 = BIT27 - 1;
  var BITS27 = BIT28 - 1;
  var BITS28 = BIT29 - 1;
  var BITS29 = BIT30 - 1;
  var BITS30 = BIT31 - 1;
  var BITS31 = 2147483647;

  // node_modules/lib0/number.js
  var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER;
  var MIN_SAFE_INTEGER = Number.MIN_SAFE_INTEGER;
  var LOWEST_INT32 = 1 << 31;
  var isInteger = Number.isInteger || ((num) => typeof num === "number" && isFinite(num) && floor2(num) === num);
  var isNaN3 = Number.isNaN;
  var parseInt2 = Number.parseInt;

  // node_modules/lib0/decoding.js
  var Decoder = class {
    constructor(uint8Array) {
      this.arr = uint8Array;
      this.pos = 0;
    }
  };
  var createDecoder = (uint8Array) => new Decoder(uint8Array);
  var hasContent = (decoder) => decoder.pos !== decoder.arr.length;
  var readUint8Array = (decoder, len) => {
    const view = createUint8ArrayViewFromArrayBuffer(decoder.arr.buffer, decoder.pos + decoder.arr.byteOffset, len);
    decoder.pos += len;
    return view;
  };
  var readVarUint8Array = (decoder) => readUint8Array(decoder, readVarUint(decoder));
  var readUint8 = (decoder) => decoder.arr[decoder.pos++];
  var readVarUint = (decoder) => {
    let num = 0;
    let mult = 1;
    while (true) {
      const r2 = decoder.arr[decoder.pos++];
      num = num + (r2 & BITS7) * mult;
      mult *= 128;
      if (r2 < BIT8) {
        return num;
      }
      if (num > MAX_SAFE_INTEGER) {
        throw new Error("Integer out of range!");
      }
    }
  };
  var readVarInt = (decoder) => {
    let r2 = decoder.arr[decoder.pos++];
    let num = r2 & BITS6;
    let mult = 64;
    const sign = (r2 & BIT7) > 0 ? -1 : 1;
    if ((r2 & BIT8) === 0) {
      return sign * num;
    }
    while (true) {
      r2 = decoder.arr[decoder.pos++];
      num = num + (r2 & BITS7) * mult;
      mult *= 128;
      if (r2 < BIT8) {
        return sign * num;
      }
      if (num > MAX_SAFE_INTEGER) {
        throw new Error("Integer out of range!");
      }
    }
  };
  var _readVarStringPolyfill = (decoder) => {
    let remainingLen = readVarUint(decoder);
    if (remainingLen === 0) {
      return "";
    } else {
      let encodedString = String.fromCodePoint(readUint8(decoder));
      if (--remainingLen < 100) {
        while (remainingLen--) {
          encodedString += String.fromCodePoint(readUint8(decoder));
        }
      } else {
        while (remainingLen > 0) {
          const nextLen = remainingLen < 1e4 ? remainingLen : 1e4;
          const bytes = decoder.arr.subarray(decoder.pos, decoder.pos + nextLen);
          decoder.pos += nextLen;
          encodedString += String.fromCodePoint.apply(null, bytes);
          remainingLen -= nextLen;
        }
      }
      return decodeURIComponent(escape(encodedString));
    }
  };
  var _readVarStringNative = (decoder) => utf8TextDecoder.decode(readVarUint8Array(decoder));
  var readVarString = utf8TextDecoder ? _readVarStringNative : _readVarStringPolyfill;
  var readFromDataView = (decoder, len) => {
    const dv = new DataView(decoder.arr.buffer, decoder.arr.byteOffset + decoder.pos, len);
    decoder.pos += len;
    return dv;
  };
  var readFloat32 = (decoder) => readFromDataView(decoder, 4).getFloat32(0, false);
  var readFloat64 = (decoder) => readFromDataView(decoder, 8).getFloat64(0, false);
  var readBigInt64 = (decoder) => readFromDataView(decoder, 8).getBigInt64(0, false);
  var readAnyLookupTable = [
    (decoder) => void 0,
    (decoder) => null,
    readVarInt,
    readFloat32,
    readFloat64,
    readBigInt64,
    (decoder) => false,
    (decoder) => true,
    readVarString,
    (decoder) => {
      const len = readVarUint(decoder);
      const obj = {};
      for (let i3 = 0; i3 < len; i3++) {
        const key = readVarString(decoder);
        obj[key] = readAny(decoder);
      }
      return obj;
    },
    (decoder) => {
      const len = readVarUint(decoder);
      const arr = [];
      for (let i3 = 0; i3 < len; i3++) {
        arr.push(readAny(decoder));
      }
      return arr;
    },
    readVarUint8Array
  ];
  var readAny = (decoder) => readAnyLookupTable[127 - readUint8(decoder)](decoder);
  var RleDecoder = class extends Decoder {
    constructor(uint8Array, reader) {
      super(uint8Array);
      this.reader = reader;
      this.s = null;
      this.count = 0;
    }
    read() {
      if (this.count === 0) {
        this.s = this.reader(this);
        if (hasContent(this)) {
          this.count = readVarUint(this) + 1;
        } else {
          this.count = -1;
        }
      }
      this.count--;
      return this.s;
    }
  };
  var UintOptRleDecoder = class extends Decoder {
    constructor(uint8Array) {
      super(uint8Array);
      this.s = 0;
      this.count = 0;
    }
    read() {
      if (this.count === 0) {
        this.s = readVarInt(this);
        const isNegative = isNegativeZero(this.s);
        this.count = 1;
        if (isNegative) {
          this.s = -this.s;
          this.count = readVarUint(this) + 2;
        }
      }
      this.count--;
      return this.s;
    }
  };
  var IntDiffOptRleDecoder = class extends Decoder {
    constructor(uint8Array) {
      super(uint8Array);
      this.s = 0;
      this.count = 0;
      this.diff = 0;
    }
    read() {
      if (this.count === 0) {
        const diff = readVarInt(this);
        const hasCount = diff & 1;
        this.diff = floor2(diff / 2);
        this.count = 1;
        if (hasCount) {
          this.count = readVarUint(this) + 2;
        }
      }
      this.s += this.diff;
      this.count--;
      return this.s;
    }
  };
  var StringDecoder = class {
    constructor(uint8Array) {
      this.decoder = new UintOptRleDecoder(uint8Array);
      this.str = readVarString(this.decoder);
      this.spos = 0;
    }
    read() {
      const end = this.spos + this.decoder.read();
      const res = this.str.slice(this.spos, end);
      this.spos = end;
      return res;
    }
  };

  // node_modules/lib0/buffer.js
  var createUint8ArrayFromLen = (len) => new Uint8Array(len);
  var createUint8ArrayViewFromArrayBuffer = (buffer5, byteOffset, length3) => new Uint8Array(buffer5, byteOffset, length3);
  var createUint8ArrayFromArrayBuffer = (buffer5) => new Uint8Array(buffer5);
  var toBase64Browser = (bytes) => {
    let s3 = "";
    for (let i3 = 0; i3 < bytes.byteLength; i3++) {
      s3 += fromCharCode(bytes[i3]);
    }
    return btoa(s3);
  };
  var toBase64Node = (bytes) => Buffer.from(bytes.buffer, bytes.byteOffset, bytes.byteLength).toString("base64");
  var fromBase64Browser = (s3) => {
    const a3 = atob(s3);
    const bytes = createUint8ArrayFromLen(a3.length);
    for (let i3 = 0; i3 < a3.length; i3++) {
      bytes[i3] = a3.charCodeAt(i3);
    }
    return bytes;
  };
  var fromBase64Node = (s3) => {
    const buf = Buffer.from(s3, "base64");
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  };
  var toBase64 = isBrowser ? toBase64Browser : toBase64Node;
  var fromBase64 = isBrowser ? fromBase64Browser : fromBase64Node;
  var copyUint8Array = (uint8Array) => {
    const newBuf = createUint8ArrayFromLen(uint8Array.byteLength);
    newBuf.set(uint8Array);
    return newBuf;
  };

  // node_modules/lib0/encoding.js
  var Encoder = class {
    constructor() {
      this.cpos = 0;
      this.cbuf = new Uint8Array(100);
      this.bufs = [];
    }
  };
  var createEncoder = () => new Encoder();
  var length = (encoder) => {
    let len = encoder.cpos;
    for (let i3 = 0; i3 < encoder.bufs.length; i3++) {
      len += encoder.bufs[i3].length;
    }
    return len;
  };
  var toUint8Array = (encoder) => {
    const uint8arr = new Uint8Array(length(encoder));
    let curPos = 0;
    for (let i3 = 0; i3 < encoder.bufs.length; i3++) {
      const d4 = encoder.bufs[i3];
      uint8arr.set(d4, curPos);
      curPos += d4.length;
    }
    uint8arr.set(createUint8ArrayViewFromArrayBuffer(encoder.cbuf.buffer, 0, encoder.cpos), curPos);
    return uint8arr;
  };
  var verifyLen = (encoder, len) => {
    const bufferLen = encoder.cbuf.length;
    if (bufferLen - encoder.cpos < len) {
      encoder.bufs.push(createUint8ArrayViewFromArrayBuffer(encoder.cbuf.buffer, 0, encoder.cpos));
      encoder.cbuf = new Uint8Array(max2(bufferLen, len) * 2);
      encoder.cpos = 0;
    }
  };
  var write = (encoder, num) => {
    const bufferLen = encoder.cbuf.length;
    if (encoder.cpos === bufferLen) {
      encoder.bufs.push(encoder.cbuf);
      encoder.cbuf = new Uint8Array(bufferLen * 2);
      encoder.cpos = 0;
    }
    encoder.cbuf[encoder.cpos++] = num;
  };
  var writeUint8 = write;
  var writeVarUint = (encoder, num) => {
    while (num > BITS7) {
      write(encoder, BIT8 | BITS7 & num);
      num = floor2(num / 128);
    }
    write(encoder, BITS7 & num);
  };
  var writeVarInt = (encoder, num) => {
    const isNegative = isNegativeZero(num);
    if (isNegative) {
      num = -num;
    }
    write(encoder, (num > BITS6 ? BIT8 : 0) | (isNegative ? BIT7 : 0) | BITS6 & num);
    num = floor2(num / 64);
    while (num > 0) {
      write(encoder, (num > BITS7 ? BIT8 : 0) | BITS7 & num);
      num = floor2(num / 128);
    }
  };
  var _strBuffer = new Uint8Array(3e4);
  var _maxStrBSize = _strBuffer.length / 3;
  var _writeVarStringNative = (encoder, str) => {
    if (str.length < _maxStrBSize) {
      const written = utf8TextEncoder.encodeInto(str, _strBuffer).written || 0;
      writeVarUint(encoder, written);
      for (let i3 = 0; i3 < written; i3++) {
        write(encoder, _strBuffer[i3]);
      }
    } else {
      writeVarUint8Array(encoder, encodeUtf8(str));
    }
  };
  var _writeVarStringPolyfill = (encoder, str) => {
    const encodedString = unescape(encodeURIComponent(str));
    const len = encodedString.length;
    writeVarUint(encoder, len);
    for (let i3 = 0; i3 < len; i3++) {
      write(encoder, encodedString.codePointAt(i3));
    }
  };
  var writeVarString = utf8TextEncoder ? _writeVarStringNative : _writeVarStringPolyfill;
  var writeUint8Array = (encoder, uint8Array) => {
    const bufferLen = encoder.cbuf.length;
    const cpos = encoder.cpos;
    const leftCopyLen = min2(bufferLen - cpos, uint8Array.length);
    const rightCopyLen = uint8Array.length - leftCopyLen;
    encoder.cbuf.set(uint8Array.subarray(0, leftCopyLen), cpos);
    encoder.cpos += leftCopyLen;
    if (rightCopyLen > 0) {
      encoder.bufs.push(encoder.cbuf);
      encoder.cbuf = new Uint8Array(max2(bufferLen * 2, rightCopyLen));
      encoder.cbuf.set(uint8Array.subarray(leftCopyLen));
      encoder.cpos = rightCopyLen;
    }
  };
  var writeVarUint8Array = (encoder, uint8Array) => {
    writeVarUint(encoder, uint8Array.byteLength);
    writeUint8Array(encoder, uint8Array);
  };
  var writeOnDataView = (encoder, len) => {
    verifyLen(encoder, len);
    const dview = new DataView(encoder.cbuf.buffer, encoder.cpos, len);
    encoder.cpos += len;
    return dview;
  };
  var writeFloat32 = (encoder, num) => writeOnDataView(encoder, 4).setFloat32(0, num, false);
  var writeFloat64 = (encoder, num) => writeOnDataView(encoder, 8).setFloat64(0, num, false);
  var writeBigInt64 = (encoder, num) => writeOnDataView(encoder, 8).setBigInt64(0, num, false);
  var floatTestBed = new DataView(new ArrayBuffer(4));
  var isFloat32 = (num) => {
    floatTestBed.setFloat32(0, num);
    return floatTestBed.getFloat32(0) === num;
  };
  var writeAny = (encoder, data2) => {
    switch (typeof data2) {
      case "string":
        write(encoder, 119);
        writeVarString(encoder, data2);
        break;
      case "number":
        if (isInteger(data2) && abs(data2) <= BITS31) {
          write(encoder, 125);
          writeVarInt(encoder, data2);
        } else if (isFloat32(data2)) {
          write(encoder, 124);
          writeFloat32(encoder, data2);
        } else {
          write(encoder, 123);
          writeFloat64(encoder, data2);
        }
        break;
      case "bigint":
        write(encoder, 122);
        writeBigInt64(encoder, data2);
        break;
      case "object":
        if (data2 === null) {
          write(encoder, 126);
        } else if (data2 instanceof Array) {
          write(encoder, 117);
          writeVarUint(encoder, data2.length);
          for (let i3 = 0; i3 < data2.length; i3++) {
            writeAny(encoder, data2[i3]);
          }
        } else if (data2 instanceof Uint8Array) {
          write(encoder, 116);
          writeVarUint8Array(encoder, data2);
        } else {
          write(encoder, 118);
          const keys5 = Object.keys(data2);
          writeVarUint(encoder, keys5.length);
          for (let i3 = 0; i3 < keys5.length; i3++) {
            const key = keys5[i3];
            writeVarString(encoder, key);
            writeAny(encoder, data2[key]);
          }
        }
        break;
      case "boolean":
        write(encoder, data2 ? 120 : 121);
        break;
      default:
        write(encoder, 127);
    }
  };
  var RleEncoder = class extends Encoder {
    constructor(writer) {
      super();
      this.w = writer;
      this.s = null;
      this.count = 0;
    }
    write(v3) {
      if (this.s === v3) {
        this.count++;
      } else {
        if (this.count > 0) {
          writeVarUint(this, this.count - 1);
        }
        this.count = 1;
        this.w(this, v3);
        this.s = v3;
      }
    }
  };
  var flushUintOptRleEncoder = (encoder) => {
    if (encoder.count > 0) {
      writeVarInt(encoder.encoder, encoder.count === 1 ? encoder.s : -encoder.s);
      if (encoder.count > 1) {
        writeVarUint(encoder.encoder, encoder.count - 2);
      }
    }
  };
  var UintOptRleEncoder = class {
    constructor() {
      this.encoder = new Encoder();
      this.s = 0;
      this.count = 0;
    }
    write(v3) {
      if (this.s === v3) {
        this.count++;
      } else {
        flushUintOptRleEncoder(this);
        this.count = 1;
        this.s = v3;
      }
    }
    toUint8Array() {
      flushUintOptRleEncoder(this);
      return toUint8Array(this.encoder);
    }
  };
  var flushIntDiffOptRleEncoder = (encoder) => {
    if (encoder.count > 0) {
      const encodedDiff = encoder.diff * 2 + (encoder.count === 1 ? 0 : 1);
      writeVarInt(encoder.encoder, encodedDiff);
      if (encoder.count > 1) {
        writeVarUint(encoder.encoder, encoder.count - 2);
      }
    }
  };
  var IntDiffOptRleEncoder = class {
    constructor() {
      this.encoder = new Encoder();
      this.s = 0;
      this.count = 0;
      this.diff = 0;
    }
    write(v3) {
      if (this.diff === v3 - this.s) {
        this.s = v3;
        this.count++;
      } else {
        flushIntDiffOptRleEncoder(this);
        this.count = 1;
        this.diff = v3 - this.s;
        this.s = v3;
      }
    }
    toUint8Array() {
      flushIntDiffOptRleEncoder(this);
      return toUint8Array(this.encoder);
    }
  };
  var StringEncoder = class {
    constructor() {
      this.sarr = [];
      this.s = "";
      this.lensE = new UintOptRleEncoder();
    }
    write(string5) {
      this.s += string5;
      if (this.s.length > 19) {
        this.sarr.push(this.s);
        this.s = "";
      }
      this.lensE.write(string5.length);
    }
    toUint8Array() {
      const encoder = new Encoder();
      this.sarr.push(this.s);
      this.s = "";
      writeVarString(encoder, this.sarr.join(""));
      writeUint8Array(encoder, this.lensE.toUint8Array());
      return toUint8Array(encoder);
    }
  };

  // node_modules/isomorphic.js/browser.mjs
  var performance2 = typeof window === "undefined" ? null : typeof window.performance !== "undefined" && window.performance || null;
  var isoCrypto = typeof crypto === "undefined" ? null : crypto;
  var cryptoRandomBuffer = isoCrypto !== null ? (len) => {
    const buf = new ArrayBuffer(len);
    const arr = new Uint8Array(buf);
    isoCrypto.getRandomValues(arr);
    return buf;
  } : (len) => {
    const buf = new ArrayBuffer(len);
    const arr = new Uint8Array(buf);
    for (let i3 = 0; i3 < len; i3++) {
      arr[i3] = Math.ceil(Math.random() * 4294967295 >>> 0);
    }
    return buf;
  };

  // node_modules/lib0/random.js
  var uint32 = () => new Uint32Array(cryptoRandomBuffer(4))[0];
  var uuidv4Template = [1e7] + -1e3 + -4e3 + -8e3 + -1e11;
  var uuidv4 = () => uuidv4Template.replace(/[018]/g, (c3) => (c3 ^ uint32() & 15 >> c3 / 4).toString(16));

  // node_modules/lib0/time.js
  var getUnixTime = Date.now;

  // node_modules/lib0/promise.js
  var create4 = (f5) => new Promise(f5);

  // node_modules/lib0/error.js
  var create5 = (s3) => new Error(s3);
  var methodUnimplemented = () => {
    throw create5("Method unimplemented");
  };
  var unexpectedCase = () => {
    throw create5("Unexpected case");
  };

  // node_modules/lib0/object.js
  var keys4 = Object.keys;
  var map5 = (obj, f5) => {
    const results = [];
    for (const key in obj) {
      results.push(f5(obj[key], key));
    }
    return results;
  };
  var length2 = (obj) => keys4(obj).length;
  var every = (obj, f5) => {
    for (const key in obj) {
      if (!f5(obj[key], key)) {
        return false;
      }
    }
    return true;
  };
  var hasProperty = (obj, key) => Object.prototype.hasOwnProperty.call(obj, key);
  var equalFlat = (a3, b3) => a3 === b3 || length2(a3) === length2(b3) && every(a3, (val, key) => (val !== void 0 || hasProperty(b3, key)) && b3[key] === val);

  // node_modules/lib0/function.js
  var callAll = (fs, args2, i3 = 0) => {
    try {
      for (; i3 < fs.length; i3++) {
        fs[i3](...args2);
      }
    } finally {
      if (i3 < fs.length) {
        callAll(fs, args2, i3 + 1);
      }
    }
  };
  var equalityStrict = (a3, b3) => a3 === b3;
  var equalityDeep = (a3, b3) => {
    if (a3 == null || b3 == null) {
      return equalityStrict(a3, b3);
    }
    if (a3.constructor !== b3.constructor) {
      return false;
    }
    if (a3 === b3) {
      return true;
    }
    switch (a3.constructor) {
      case ArrayBuffer:
        a3 = new Uint8Array(a3);
        b3 = new Uint8Array(b3);
      case Uint8Array: {
        if (a3.byteLength !== b3.byteLength) {
          return false;
        }
        for (let i3 = 0; i3 < a3.length; i3++) {
          if (a3[i3] !== b3[i3]) {
            return false;
          }
        }
        break;
      }
      case Set: {
        if (a3.size !== b3.size) {
          return false;
        }
        for (const value of a3) {
          if (!b3.has(value)) {
            return false;
          }
        }
        break;
      }
      case Map: {
        if (a3.size !== b3.size) {
          return false;
        }
        for (const key of a3.keys()) {
          if (!b3.has(key) || !equalityDeep(a3.get(key), b3.get(key))) {
            return false;
          }
        }
        break;
      }
      case Object:
        if (length2(a3) !== length2(b3)) {
          return false;
        }
        for (const key in a3) {
          if (!hasProperty(a3, key) || !equalityDeep(a3[key], b3[key])) {
            return false;
          }
        }
        break;
      case Array:
        if (a3.length !== b3.length) {
          return false;
        }
        for (let i3 = 0; i3 < a3.length; i3++) {
          if (!equalityDeep(a3[i3], b3[i3])) {
            return false;
          }
        }
        break;
      default:
        return false;
    }
    return true;
  };

  // node_modules/lib0/symbol.js
  var create6 = Symbol;

  // node_modules/lib0/pair.js
  var Pair = class {
    constructor(left, right) {
      this.left = left;
      this.right = right;
    }
  };
  var create7 = (left, right) => new Pair(left, right);

  // node_modules/lib0/dom.js
  var doc = typeof document !== "undefined" ? document : {};
  var domParser = typeof DOMParser !== "undefined" ? new DOMParser() : null;
  var mapToStyleString = (m3) => map2(m3, (value, key) => `${key}:${value};`).join("");
  var ELEMENT_NODE = doc.ELEMENT_NODE;
  var TEXT_NODE = doc.TEXT_NODE;
  var CDATA_SECTION_NODE = doc.CDATA_SECTION_NODE;
  var COMMENT_NODE = doc.COMMENT_NODE;
  var DOCUMENT_NODE = doc.DOCUMENT_NODE;
  var DOCUMENT_TYPE_NODE = doc.DOCUMENT_TYPE_NODE;
  var DOCUMENT_FRAGMENT_NODE = doc.DOCUMENT_FRAGMENT_NODE;

  // node_modules/lib0/logging.js
  var BOLD = create6();
  var UNBOLD = create6();
  var BLUE = create6();
  var GREY = create6();
  var GREEN = create6();
  var RED = create6();
  var PURPLE = create6();
  var ORANGE = create6();
  var UNCOLOR = create6();
  var _browserStyleMap = {
    [BOLD]: create7("font-weight", "bold"),
    [UNBOLD]: create7("font-weight", "normal"),
    [BLUE]: create7("color", "blue"),
    [GREEN]: create7("color", "green"),
    [GREY]: create7("color", "grey"),
    [RED]: create7("color", "red"),
    [PURPLE]: create7("color", "purple"),
    [ORANGE]: create7("color", "orange"),
    [UNCOLOR]: create7("color", "black")
  };
  var _nodeStyleMap = {
    [BOLD]: "[1m",
    [UNBOLD]: "[2m",
    [BLUE]: "[34m",
    [GREEN]: "[32m",
    [GREY]: "[37m",
    [RED]: "[31m",
    [PURPLE]: "[35m",
    [ORANGE]: "[38;5;208m",
    [UNCOLOR]: "[0m"
  };
  var computeBrowserLoggingArgs = (args2) => {
    const strBuilder = [];
    const styles = [];
    const currentStyle = create2();
    let logArgs = [];
    let i3 = 0;
    for (; i3 < args2.length; i3++) {
      const arg = args2[i3];
      const style = _browserStyleMap[arg];
      if (style !== void 0) {
        currentStyle.set(style.left, style.right);
      } else {
        if (arg.constructor === String || arg.constructor === Number) {
          const style2 = mapToStyleString(currentStyle);
          if (i3 > 0 || style2.length > 0) {
            strBuilder.push("%c" + arg);
            styles.push(style2);
          } else {
            strBuilder.push(arg);
          }
        } else {
          break;
        }
      }
    }
    if (i3 > 0) {
      logArgs = styles;
      logArgs.unshift(strBuilder.join(""));
    }
    for (; i3 < args2.length; i3++) {
      const arg = args2[i3];
      if (!(arg instanceof Symbol)) {
        logArgs.push(arg);
      }
    }
    return logArgs;
  };
  var computeNodeLoggingArgs = (args2) => {
    const strBuilder = [];
    const logArgs = [];
    let i3 = 0;
    for (; i3 < args2.length; i3++) {
      const arg = args2[i3];
      const style = _nodeStyleMap[arg];
      if (style !== void 0) {
        strBuilder.push(style);
      } else {
        if (arg.constructor === String || arg.constructor === Number) {
          strBuilder.push(arg);
        } else {
          break;
        }
      }
    }
    if (i3 > 0) {
      strBuilder.push("[0m");
      logArgs.push(strBuilder.join(""));
    }
    for (; i3 < args2.length; i3++) {
      const arg = args2[i3];
      if (!(arg instanceof Symbol)) {
        logArgs.push(arg);
      }
    }
    return logArgs;
  };
  var computeLoggingArgs = isNode ? computeNodeLoggingArgs : computeBrowserLoggingArgs;
  var print = (...args2) => {
    console.log(...computeLoggingArgs(args2));
    vconsoles.forEach((vc) => vc.print(args2));
  };
  var vconsoles = new Set();
  var lastLoggingTime = getUnixTime();

  // node_modules/lib0/iterator.js
  var createIterator = (next2) => ({
    [Symbol.iterator]() {
      return this;
    },
    next: next2
  });
  var iteratorFilter = (iterator2, filter) => createIterator(() => {
    let res;
    do {
      res = iterator2.next();
    } while (!res.done && !filter(res.value));
    return res;
  });
  var iteratorMap = (iterator2, fmap) => createIterator(() => {
    const { done, value } = iterator2.next();
    return { done, value: done ? void 0 : fmap(value) };
  });

  // node_modules/yjs/dist/yjs.mjs
  var DeleteItem = class {
    constructor(clock, len) {
      this.clock = clock;
      this.len = len;
    }
  };
  var DeleteSet = class {
    constructor() {
      this.clients = new Map();
    }
  };
  var iterateDeletedStructs = (transaction, ds, f5) => ds.clients.forEach((deletes, clientid) => {
    const structs = transaction.doc.store.clients.get(clientid);
    for (let i3 = 0; i3 < deletes.length; i3++) {
      const del = deletes[i3];
      iterateStructs(transaction, structs, del.clock, del.len, f5);
    }
  });
  var findIndexDS = (dis, clock) => {
    let left = 0;
    let right = dis.length - 1;
    while (left <= right) {
      const midindex = floor2((left + right) / 2);
      const mid = dis[midindex];
      const midclock = mid.clock;
      if (midclock <= clock) {
        if (clock < midclock + mid.len) {
          return midindex;
        }
        left = midindex + 1;
      } else {
        right = midindex - 1;
      }
    }
    return null;
  };
  var isDeleted = (ds, id2) => {
    const dis = ds.clients.get(id2.client);
    return dis !== void 0 && findIndexDS(dis, id2.clock) !== null;
  };
  var sortAndMergeDeleteSet = (ds) => {
    ds.clients.forEach((dels) => {
      dels.sort((a3, b3) => a3.clock - b3.clock);
      let i3, j3;
      for (i3 = 1, j3 = 1; i3 < dels.length; i3++) {
        const left = dels[j3 - 1];
        const right = dels[i3];
        if (left.clock + left.len >= right.clock) {
          left.len = max2(left.len, right.clock + right.len - left.clock);
        } else {
          if (j3 < i3) {
            dels[j3] = right;
          }
          j3++;
        }
      }
      dels.length = j3;
    });
  };
  var mergeDeleteSets = (dss) => {
    const merged = new DeleteSet();
    for (let dssI = 0; dssI < dss.length; dssI++) {
      dss[dssI].clients.forEach((delsLeft, client) => {
        if (!merged.clients.has(client)) {
          const dels = delsLeft.slice();
          for (let i3 = dssI + 1; i3 < dss.length; i3++) {
            appendTo(dels, dss[i3].clients.get(client) || []);
          }
          merged.clients.set(client, dels);
        }
      });
    }
    sortAndMergeDeleteSet(merged);
    return merged;
  };
  var addToDeleteSet = (ds, client, clock, length3) => {
    setIfUndefined(ds.clients, client, () => []).push(new DeleteItem(clock, length3));
  };
  var createDeleteSet = () => new DeleteSet();
  var createDeleteSetFromStructStore = (ss) => {
    const ds = createDeleteSet();
    ss.clients.forEach((structs, client) => {
      const dsitems = [];
      for (let i3 = 0; i3 < structs.length; i3++) {
        const struct = structs[i3];
        if (struct.deleted) {
          const clock = struct.id.clock;
          let len = struct.length;
          if (i3 + 1 < structs.length) {
            for (let next2 = structs[i3 + 1]; i3 + 1 < structs.length && next2.deleted; next2 = structs[++i3 + 1]) {
              len += next2.length;
            }
          }
          dsitems.push(new DeleteItem(clock, len));
        }
      }
      if (dsitems.length > 0) {
        ds.clients.set(client, dsitems);
      }
    });
    return ds;
  };
  var writeDeleteSet = (encoder, ds) => {
    writeVarUint(encoder.restEncoder, ds.clients.size);
    ds.clients.forEach((dsitems, client) => {
      encoder.resetDsCurVal();
      writeVarUint(encoder.restEncoder, client);
      const len = dsitems.length;
      writeVarUint(encoder.restEncoder, len);
      for (let i3 = 0; i3 < len; i3++) {
        const item = dsitems[i3];
        encoder.writeDsClock(item.clock);
        encoder.writeDsLen(item.len);
      }
    });
  };
  var readDeleteSet = (decoder) => {
    const ds = new DeleteSet();
    const numClients = readVarUint(decoder.restDecoder);
    for (let i3 = 0; i3 < numClients; i3++) {
      decoder.resetDsCurVal();
      const client = readVarUint(decoder.restDecoder);
      const numberOfDeletes = readVarUint(decoder.restDecoder);
      if (numberOfDeletes > 0) {
        const dsField = setIfUndefined(ds.clients, client, () => []);
        for (let i4 = 0; i4 < numberOfDeletes; i4++) {
          dsField.push(new DeleteItem(decoder.readDsClock(), decoder.readDsLen()));
        }
      }
    }
    return ds;
  };
  var readAndApplyDeleteSet = (decoder, transaction, store2) => {
    const unappliedDS = new DeleteSet();
    const numClients = readVarUint(decoder.restDecoder);
    for (let i3 = 0; i3 < numClients; i3++) {
      decoder.resetDsCurVal();
      const client = readVarUint(decoder.restDecoder);
      const numberOfDeletes = readVarUint(decoder.restDecoder);
      const structs = store2.clients.get(client) || [];
      const state2 = getState(store2, client);
      for (let i4 = 0; i4 < numberOfDeletes; i4++) {
        const clock = decoder.readDsClock();
        const clockEnd = clock + decoder.readDsLen();
        if (clock < state2) {
          if (state2 < clockEnd) {
            addToDeleteSet(unappliedDS, client, state2, clockEnd - state2);
          }
          let index = findIndexSS(structs, clock);
          let struct = structs[index];
          if (!struct.deleted && struct.id.clock < clock) {
            structs.splice(index + 1, 0, splitItem(transaction, struct, clock - struct.id.clock));
            index++;
          }
          while (index < structs.length) {
            struct = structs[index++];
            if (struct.id.clock < clockEnd) {
              if (!struct.deleted) {
                if (clockEnd < struct.id.clock + struct.length) {
                  structs.splice(index, 0, splitItem(transaction, struct, clockEnd - struct.id.clock));
                }
                struct.delete(transaction);
              }
            } else {
              break;
            }
          }
        } else {
          addToDeleteSet(unappliedDS, client, clock, clockEnd - clock);
        }
      }
    }
    if (unappliedDS.clients.size > 0) {
      const ds = new UpdateEncoderV2();
      writeVarUint(ds.restEncoder, 0);
      writeDeleteSet(ds, unappliedDS);
      return ds.toUint8Array();
    }
    return null;
  };
  var generateNewClientId = uint32;
  var Doc = class extends Observable {
    constructor({ guid = uuidv4(), collectionid = null, gc = true, gcFilter = () => true, meta = null, autoLoad = false, shouldLoad = true } = {}) {
      super();
      this.gc = gc;
      this.gcFilter = gcFilter;
      this.clientID = generateNewClientId();
      this.guid = guid;
      this.collectionid = collectionid;
      this.share = new Map();
      this.store = new StructStore();
      this._transaction = null;
      this._transactionCleanups = [];
      this.subdocs = new Set();
      this._item = null;
      this.shouldLoad = shouldLoad;
      this.autoLoad = autoLoad;
      this.meta = meta;
      this.isLoaded = false;
      this.whenLoaded = create4((resolve) => {
        this.on("load", () => {
          this.isLoaded = true;
          resolve(this);
        });
      });
    }
    load() {
      const item = this._item;
      if (item !== null && !this.shouldLoad) {
        transact(item.parent.doc, (transaction) => {
          transaction.subdocsLoaded.add(this);
        }, null, true);
      }
      this.shouldLoad = true;
    }
    getSubdocs() {
      return this.subdocs;
    }
    getSubdocGuids() {
      return new Set(Array.from(this.subdocs).map((doc3) => doc3.guid));
    }
    transact(f5, origin = null) {
      transact(this, f5, origin);
    }
    get(name2, TypeConstructor = AbstractType) {
      const type = setIfUndefined(this.share, name2, () => {
        const t4 = new TypeConstructor();
        t4._integrate(this, null);
        return t4;
      });
      const Constr = type.constructor;
      if (TypeConstructor !== AbstractType && Constr !== TypeConstructor) {
        if (Constr === AbstractType) {
          const t4 = new TypeConstructor();
          t4._map = type._map;
          type._map.forEach((n2) => {
            for (; n2 !== null; n2 = n2.left) {
              n2.parent = t4;
            }
          });
          t4._start = type._start;
          for (let n2 = t4._start; n2 !== null; n2 = n2.right) {
            n2.parent = t4;
          }
          t4._length = type._length;
          this.share.set(name2, t4);
          t4._integrate(this, null);
          return t4;
        } else {
          throw new Error(`Type with the name ${name2} has already been defined with a different constructor`);
        }
      }
      return type;
    }
    getArray(name2 = "") {
      return this.get(name2, YArray);
    }
    getText(name2 = "") {
      return this.get(name2, YText);
    }
    getMap(name2 = "") {
      return this.get(name2, YMap);
    }
    getXmlFragment(name2 = "") {
      return this.get(name2, YXmlFragment);
    }
    toJSON() {
      const doc3 = {};
      this.share.forEach((value, key) => {
        doc3[key] = value.toJSON();
      });
      return doc3;
    }
    destroy() {
      from2(this.subdocs).forEach((subdoc) => subdoc.destroy());
      const item = this._item;
      if (item !== null) {
        this._item = null;
        const content = item.content;
        content.doc = new Doc(__spreadProps(__spreadValues({ guid: this.guid }, content.opts), { shouldLoad: false }));
        content.doc._item = item;
        transact(item.parent.doc, (transaction) => {
          const doc3 = content.doc;
          if (!item.deleted) {
            transaction.subdocsAdded.add(doc3);
          }
          transaction.subdocsRemoved.add(this);
        }, null, true);
      }
      this.emit("destroyed", [true]);
      this.emit("destroy", [this]);
      super.destroy();
    }
    on(eventName, f5) {
      super.on(eventName, f5);
    }
    off(eventName, f5) {
      super.off(eventName, f5);
    }
  };
  var DSDecoderV1 = class {
    constructor(decoder) {
      this.restDecoder = decoder;
    }
    resetDsCurVal() {
    }
    readDsClock() {
      return readVarUint(this.restDecoder);
    }
    readDsLen() {
      return readVarUint(this.restDecoder);
    }
  };
  var UpdateDecoderV1 = class extends DSDecoderV1 {
    readLeftID() {
      return createID(readVarUint(this.restDecoder), readVarUint(this.restDecoder));
    }
    readRightID() {
      return createID(readVarUint(this.restDecoder), readVarUint(this.restDecoder));
    }
    readClient() {
      return readVarUint(this.restDecoder);
    }
    readInfo() {
      return readUint8(this.restDecoder);
    }
    readString() {
      return readVarString(this.restDecoder);
    }
    readParentInfo() {
      return readVarUint(this.restDecoder) === 1;
    }
    readTypeRef() {
      return readVarUint(this.restDecoder);
    }
    readLen() {
      return readVarUint(this.restDecoder);
    }
    readAny() {
      return readAny(this.restDecoder);
    }
    readBuf() {
      return copyUint8Array(readVarUint8Array(this.restDecoder));
    }
    readJSON() {
      return JSON.parse(readVarString(this.restDecoder));
    }
    readKey() {
      return readVarString(this.restDecoder);
    }
  };
  var DSDecoderV2 = class {
    constructor(decoder) {
      this.dsCurrVal = 0;
      this.restDecoder = decoder;
    }
    resetDsCurVal() {
      this.dsCurrVal = 0;
    }
    readDsClock() {
      this.dsCurrVal += readVarUint(this.restDecoder);
      return this.dsCurrVal;
    }
    readDsLen() {
      const diff = readVarUint(this.restDecoder) + 1;
      this.dsCurrVal += diff;
      return diff;
    }
  };
  var UpdateDecoderV2 = class extends DSDecoderV2 {
    constructor(decoder) {
      super(decoder);
      this.keys = [];
      readVarUint(decoder);
      this.keyClockDecoder = new IntDiffOptRleDecoder(readVarUint8Array(decoder));
      this.clientDecoder = new UintOptRleDecoder(readVarUint8Array(decoder));
      this.leftClockDecoder = new IntDiffOptRleDecoder(readVarUint8Array(decoder));
      this.rightClockDecoder = new IntDiffOptRleDecoder(readVarUint8Array(decoder));
      this.infoDecoder = new RleDecoder(readVarUint8Array(decoder), readUint8);
      this.stringDecoder = new StringDecoder(readVarUint8Array(decoder));
      this.parentInfoDecoder = new RleDecoder(readVarUint8Array(decoder), readUint8);
      this.typeRefDecoder = new UintOptRleDecoder(readVarUint8Array(decoder));
      this.lenDecoder = new UintOptRleDecoder(readVarUint8Array(decoder));
    }
    readLeftID() {
      return new ID(this.clientDecoder.read(), this.leftClockDecoder.read());
    }
    readRightID() {
      return new ID(this.clientDecoder.read(), this.rightClockDecoder.read());
    }
    readClient() {
      return this.clientDecoder.read();
    }
    readInfo() {
      return this.infoDecoder.read();
    }
    readString() {
      return this.stringDecoder.read();
    }
    readParentInfo() {
      return this.parentInfoDecoder.read() === 1;
    }
    readTypeRef() {
      return this.typeRefDecoder.read();
    }
    readLen() {
      return this.lenDecoder.read();
    }
    readAny() {
      return readAny(this.restDecoder);
    }
    readBuf() {
      return readVarUint8Array(this.restDecoder);
    }
    readJSON() {
      return readAny(this.restDecoder);
    }
    readKey() {
      const keyClock = this.keyClockDecoder.read();
      if (keyClock < this.keys.length) {
        return this.keys[keyClock];
      } else {
        const key = this.stringDecoder.read();
        this.keys.push(key);
        return key;
      }
    }
  };
  var DSEncoderV1 = class {
    constructor() {
      this.restEncoder = createEncoder();
    }
    toUint8Array() {
      return toUint8Array(this.restEncoder);
    }
    resetDsCurVal() {
    }
    writeDsClock(clock) {
      writeVarUint(this.restEncoder, clock);
    }
    writeDsLen(len) {
      writeVarUint(this.restEncoder, len);
    }
  };
  var UpdateEncoderV1 = class extends DSEncoderV1 {
    writeLeftID(id2) {
      writeVarUint(this.restEncoder, id2.client);
      writeVarUint(this.restEncoder, id2.clock);
    }
    writeRightID(id2) {
      writeVarUint(this.restEncoder, id2.client);
      writeVarUint(this.restEncoder, id2.clock);
    }
    writeClient(client) {
      writeVarUint(this.restEncoder, client);
    }
    writeInfo(info) {
      writeUint8(this.restEncoder, info);
    }
    writeString(s3) {
      writeVarString(this.restEncoder, s3);
    }
    writeParentInfo(isYKey) {
      writeVarUint(this.restEncoder, isYKey ? 1 : 0);
    }
    writeTypeRef(info) {
      writeVarUint(this.restEncoder, info);
    }
    writeLen(len) {
      writeVarUint(this.restEncoder, len);
    }
    writeAny(any2) {
      writeAny(this.restEncoder, any2);
    }
    writeBuf(buf) {
      writeVarUint8Array(this.restEncoder, buf);
    }
    writeJSON(embed) {
      writeVarString(this.restEncoder, JSON.stringify(embed));
    }
    writeKey(key) {
      writeVarString(this.restEncoder, key);
    }
  };
  var DSEncoderV2 = class {
    constructor() {
      this.restEncoder = createEncoder();
      this.dsCurrVal = 0;
    }
    toUint8Array() {
      return toUint8Array(this.restEncoder);
    }
    resetDsCurVal() {
      this.dsCurrVal = 0;
    }
    writeDsClock(clock) {
      const diff = clock - this.dsCurrVal;
      this.dsCurrVal = clock;
      writeVarUint(this.restEncoder, diff);
    }
    writeDsLen(len) {
      if (len === 0) {
        unexpectedCase();
      }
      writeVarUint(this.restEncoder, len - 1);
      this.dsCurrVal += len;
    }
  };
  var UpdateEncoderV2 = class extends DSEncoderV2 {
    constructor() {
      super();
      this.keyMap = new Map();
      this.keyClock = 0;
      this.keyClockEncoder = new IntDiffOptRleEncoder();
      this.clientEncoder = new UintOptRleEncoder();
      this.leftClockEncoder = new IntDiffOptRleEncoder();
      this.rightClockEncoder = new IntDiffOptRleEncoder();
      this.infoEncoder = new RleEncoder(writeUint8);
      this.stringEncoder = new StringEncoder();
      this.parentInfoEncoder = new RleEncoder(writeUint8);
      this.typeRefEncoder = new UintOptRleEncoder();
      this.lenEncoder = new UintOptRleEncoder();
    }
    toUint8Array() {
      const encoder = createEncoder();
      writeVarUint(encoder, 0);
      writeVarUint8Array(encoder, this.keyClockEncoder.toUint8Array());
      writeVarUint8Array(encoder, this.clientEncoder.toUint8Array());
      writeVarUint8Array(encoder, this.leftClockEncoder.toUint8Array());
      writeVarUint8Array(encoder, this.rightClockEncoder.toUint8Array());
      writeVarUint8Array(encoder, toUint8Array(this.infoEncoder));
      writeVarUint8Array(encoder, this.stringEncoder.toUint8Array());
      writeVarUint8Array(encoder, toUint8Array(this.parentInfoEncoder));
      writeVarUint8Array(encoder, this.typeRefEncoder.toUint8Array());
      writeVarUint8Array(encoder, this.lenEncoder.toUint8Array());
      writeUint8Array(encoder, toUint8Array(this.restEncoder));
      return toUint8Array(encoder);
    }
    writeLeftID(id2) {
      this.clientEncoder.write(id2.client);
      this.leftClockEncoder.write(id2.clock);
    }
    writeRightID(id2) {
      this.clientEncoder.write(id2.client);
      this.rightClockEncoder.write(id2.clock);
    }
    writeClient(client) {
      this.clientEncoder.write(client);
    }
    writeInfo(info) {
      this.infoEncoder.write(info);
    }
    writeString(s3) {
      this.stringEncoder.write(s3);
    }
    writeParentInfo(isYKey) {
      this.parentInfoEncoder.write(isYKey ? 1 : 0);
    }
    writeTypeRef(info) {
      this.typeRefEncoder.write(info);
    }
    writeLen(len) {
      this.lenEncoder.write(len);
    }
    writeAny(any2) {
      writeAny(this.restEncoder, any2);
    }
    writeBuf(buf) {
      writeVarUint8Array(this.restEncoder, buf);
    }
    writeJSON(embed) {
      writeAny(this.restEncoder, embed);
    }
    writeKey(key) {
      const clock = this.keyMap.get(key);
      if (clock === void 0) {
        this.keyClockEncoder.write(this.keyClock++);
        this.stringEncoder.write(key);
      } else {
        this.keyClockEncoder.write(this.keyClock++);
      }
    }
  };
  var writeStructs = (encoder, structs, client, clock) => {
    clock = max2(clock, structs[0].id.clock);
    const startNewStructs = findIndexSS(structs, clock);
    writeVarUint(encoder.restEncoder, structs.length - startNewStructs);
    encoder.writeClient(client);
    writeVarUint(encoder.restEncoder, clock);
    const firstStruct = structs[startNewStructs];
    firstStruct.write(encoder, clock - firstStruct.id.clock);
    for (let i3 = startNewStructs + 1; i3 < structs.length; i3++) {
      structs[i3].write(encoder, 0);
    }
  };
  var writeClientsStructs = (encoder, store2, _sm) => {
    const sm = new Map();
    _sm.forEach((clock, client) => {
      if (getState(store2, client) > clock) {
        sm.set(client, clock);
      }
    });
    getStateVector(store2).forEach((clock, client) => {
      if (!_sm.has(client)) {
        sm.set(client, 0);
      }
    });
    writeVarUint(encoder.restEncoder, sm.size);
    Array.from(sm.entries()).sort((a3, b3) => b3[0] - a3[0]).forEach(([client, clock]) => {
      writeStructs(encoder, store2.clients.get(client), client, clock);
    });
  };
  var readClientsStructRefs = (decoder, doc3) => {
    const clientRefs = create2();
    const numOfStateUpdates = readVarUint(decoder.restDecoder);
    for (let i3 = 0; i3 < numOfStateUpdates; i3++) {
      const numberOfStructs = readVarUint(decoder.restDecoder);
      const refs = new Array(numberOfStructs);
      const client = decoder.readClient();
      let clock = readVarUint(decoder.restDecoder);
      clientRefs.set(client, { i: 0, refs });
      for (let i4 = 0; i4 < numberOfStructs; i4++) {
        const info = decoder.readInfo();
        switch (BITS5 & info) {
          case 0: {
            const len = decoder.readLen();
            refs[i4] = new GC(createID(client, clock), len);
            clock += len;
            break;
          }
          case 10: {
            const len = readVarUint(decoder.restDecoder);
            refs[i4] = new Skip(createID(client, clock), len);
            clock += len;
            break;
          }
          default: {
            const cantCopyParentInfo = (info & (BIT7 | BIT8)) === 0;
            const struct = new Item(createID(client, clock), null, (info & BIT8) === BIT8 ? decoder.readLeftID() : null, null, (info & BIT7) === BIT7 ? decoder.readRightID() : null, cantCopyParentInfo ? decoder.readParentInfo() ? doc3.get(decoder.readString()) : decoder.readLeftID() : null, cantCopyParentInfo && (info & BIT6) === BIT6 ? decoder.readString() : null, readItemContent(decoder, info));
            refs[i4] = struct;
            clock += struct.length;
          }
        }
      }
    }
    return clientRefs;
  };
  var integrateStructs = (transaction, store2, clientsStructRefs) => {
    const stack = [];
    let clientsStructRefsIds = Array.from(clientsStructRefs.keys()).sort((a3, b3) => a3 - b3);
    if (clientsStructRefsIds.length === 0) {
      return null;
    }
    const getNextStructTarget = () => {
      if (clientsStructRefsIds.length === 0) {
        return null;
      }
      let nextStructsTarget = clientsStructRefs.get(clientsStructRefsIds[clientsStructRefsIds.length - 1]);
      while (nextStructsTarget.refs.length === nextStructsTarget.i) {
        clientsStructRefsIds.pop();
        if (clientsStructRefsIds.length > 0) {
          nextStructsTarget = clientsStructRefs.get(clientsStructRefsIds[clientsStructRefsIds.length - 1]);
        } else {
          return null;
        }
      }
      return nextStructsTarget;
    };
    let curStructsTarget = getNextStructTarget();
    if (curStructsTarget === null && stack.length === 0) {
      return null;
    }
    const restStructs = new StructStore();
    const missingSV = new Map();
    const updateMissingSv = (client, clock) => {
      const mclock = missingSV.get(client);
      if (mclock == null || mclock > clock) {
        missingSV.set(client, clock);
      }
    };
    let stackHead = curStructsTarget.refs[curStructsTarget.i++];
    const state2 = new Map();
    const addStackToRestSS = () => {
      for (const item of stack) {
        const client = item.id.client;
        const unapplicableItems = clientsStructRefs.get(client);
        if (unapplicableItems) {
          unapplicableItems.i--;
          restStructs.clients.set(client, unapplicableItems.refs.slice(unapplicableItems.i));
          clientsStructRefs.delete(client);
          unapplicableItems.i = 0;
          unapplicableItems.refs = [];
        } else {
          restStructs.clients.set(client, [item]);
        }
        clientsStructRefsIds = clientsStructRefsIds.filter((c3) => c3 !== client);
      }
      stack.length = 0;
    };
    while (true) {
      if (stackHead.constructor !== Skip) {
        const localClock = setIfUndefined(state2, stackHead.id.client, () => getState(store2, stackHead.id.client));
        const offset = localClock - stackHead.id.clock;
        if (offset < 0) {
          stack.push(stackHead);
          updateMissingSv(stackHead.id.client, stackHead.id.clock - 1);
          addStackToRestSS();
        } else {
          const missing = stackHead.getMissing(transaction, store2);
          if (missing !== null) {
            stack.push(stackHead);
            const structRefs = clientsStructRefs.get(missing) || { refs: [], i: 0 };
            if (structRefs.refs.length === structRefs.i) {
              updateMissingSv(missing, getState(store2, missing));
              addStackToRestSS();
            } else {
              stackHead = structRefs.refs[structRefs.i++];
              continue;
            }
          } else if (offset === 0 || offset < stackHead.length) {
            stackHead.integrate(transaction, offset);
            state2.set(stackHead.id.client, stackHead.id.clock + stackHead.length);
          }
        }
      }
      if (stack.length > 0) {
        stackHead = stack.pop();
      } else if (curStructsTarget !== null && curStructsTarget.i < curStructsTarget.refs.length) {
        stackHead = curStructsTarget.refs[curStructsTarget.i++];
      } else {
        curStructsTarget = getNextStructTarget();
        if (curStructsTarget === null) {
          break;
        } else {
          stackHead = curStructsTarget.refs[curStructsTarget.i++];
        }
      }
    }
    if (restStructs.clients.size > 0) {
      const encoder = new UpdateEncoderV2();
      writeClientsStructs(encoder, restStructs, new Map());
      writeVarUint(encoder.restEncoder, 0);
      return { missing: missingSV, update: encoder.toUint8Array() };
    }
    return null;
  };
  var writeStructsFromTransaction = (encoder, transaction) => writeClientsStructs(encoder, transaction.doc.store, transaction.beforeState);
  var readUpdateV2 = (decoder, ydoc, transactionOrigin, structDecoder = new UpdateDecoderV2(decoder)) => transact(ydoc, (transaction) => {
    transaction.local = false;
    let retry = false;
    const doc3 = transaction.doc;
    const store2 = doc3.store;
    const ss = readClientsStructRefs(structDecoder, doc3);
    const restStructs = integrateStructs(transaction, store2, ss);
    const pending = store2.pendingStructs;
    if (pending) {
      for (const [client, clock] of pending.missing) {
        if (clock < getState(store2, client)) {
          retry = true;
          break;
        }
      }
      if (restStructs) {
        for (const [client, clock] of restStructs.missing) {
          const mclock = pending.missing.get(client);
          if (mclock == null || mclock > clock) {
            pending.missing.set(client, clock);
          }
        }
        pending.update = mergeUpdatesV2([pending.update, restStructs.update]);
      }
    } else {
      store2.pendingStructs = restStructs;
    }
    const dsRest = readAndApplyDeleteSet(structDecoder, transaction, store2);
    if (store2.pendingDs) {
      const pendingDSUpdate = new UpdateDecoderV2(createDecoder(store2.pendingDs));
      readVarUint(pendingDSUpdate.restDecoder);
      const dsRest2 = readAndApplyDeleteSet(pendingDSUpdate, transaction, store2);
      if (dsRest && dsRest2) {
        store2.pendingDs = mergeUpdatesV2([dsRest, dsRest2]);
      } else {
        store2.pendingDs = dsRest || dsRest2;
      }
    } else {
      store2.pendingDs = dsRest;
    }
    if (retry) {
      const update = store2.pendingStructs.update;
      store2.pendingStructs = null;
      applyUpdateV2(transaction.doc, update);
    }
  }, transactionOrigin, false);
  var applyUpdateV2 = (ydoc, update, transactionOrigin, YDecoder = UpdateDecoderV2) => {
    const decoder = createDecoder(update);
    readUpdateV2(decoder, ydoc, transactionOrigin, new YDecoder(decoder));
  };
  var applyUpdate = (ydoc, update, transactionOrigin) => applyUpdateV2(ydoc, update, transactionOrigin, UpdateDecoderV1);
  var writeStateAsUpdate = (encoder, doc3, targetStateVector = new Map()) => {
    writeClientsStructs(encoder, doc3.store, targetStateVector);
    writeDeleteSet(encoder, createDeleteSetFromStructStore(doc3.store));
  };
  var encodeStateAsUpdateV2 = (doc3, encodedTargetStateVector = new Uint8Array([0]), encoder = new UpdateEncoderV2()) => {
    const targetStateVector = decodeStateVector(encodedTargetStateVector);
    writeStateAsUpdate(encoder, doc3, targetStateVector);
    const updates = [encoder.toUint8Array()];
    if (doc3.store.pendingDs) {
      updates.push(doc3.store.pendingDs);
    }
    if (doc3.store.pendingStructs) {
      updates.push(diffUpdateV2(doc3.store.pendingStructs.update, encodedTargetStateVector));
    }
    if (updates.length > 1) {
      if (encoder.constructor === UpdateEncoderV1) {
        return mergeUpdates(updates.map((update, i3) => i3 === 0 ? update : convertUpdateFormatV2ToV1(update)));
      } else if (encoder.constructor === UpdateEncoderV2) {
        return mergeUpdatesV2(updates);
      }
    }
    return updates[0];
  };
  var encodeStateAsUpdate = (doc3, encodedTargetStateVector) => encodeStateAsUpdateV2(doc3, encodedTargetStateVector, new UpdateEncoderV1());
  var readStateVector = (decoder) => {
    const ss = new Map();
    const ssLength = readVarUint(decoder.restDecoder);
    for (let i3 = 0; i3 < ssLength; i3++) {
      const client = readVarUint(decoder.restDecoder);
      const clock = readVarUint(decoder.restDecoder);
      ss.set(client, clock);
    }
    return ss;
  };
  var decodeStateVector = (decodedState) => readStateVector(new DSDecoderV1(createDecoder(decodedState)));
  var writeStateVector = (encoder, sv) => {
    writeVarUint(encoder.restEncoder, sv.size);
    Array.from(sv.entries()).sort((a3, b3) => b3[0] - a3[0]).forEach(([client, clock]) => {
      writeVarUint(encoder.restEncoder, client);
      writeVarUint(encoder.restEncoder, clock);
    });
    return encoder;
  };
  var writeDocumentStateVector = (encoder, doc3) => writeStateVector(encoder, getStateVector(doc3.store));
  var encodeStateVectorV2 = (doc3, encoder = new DSEncoderV2()) => {
    if (doc3 instanceof Map) {
      writeStateVector(encoder, doc3);
    } else {
      writeDocumentStateVector(encoder, doc3);
    }
    return encoder.toUint8Array();
  };
  var encodeStateVector = (doc3) => encodeStateVectorV2(doc3, new DSEncoderV1());
  var EventHandler = class {
    constructor() {
      this.l = [];
    }
  };
  var createEventHandler = () => new EventHandler();
  var addEventHandlerListener = (eventHandler, f5) => eventHandler.l.push(f5);
  var removeEventHandlerListener = (eventHandler, f5) => {
    const l2 = eventHandler.l;
    const len = l2.length;
    eventHandler.l = l2.filter((g2) => f5 !== g2);
    if (len === eventHandler.l.length) {
      console.error("[yjs] Tried to remove event handler that doesn't exist.");
    }
  };
  var callEventHandlerListeners = (eventHandler, arg0, arg1) => callAll(eventHandler.l, [arg0, arg1]);
  var ID = class {
    constructor(client, clock) {
      this.client = client;
      this.clock = clock;
    }
  };
  var compareIDs = (a3, b3) => a3 === b3 || a3 !== null && b3 !== null && a3.client === b3.client && a3.clock === b3.clock;
  var createID = (client, clock) => new ID(client, clock);
  var writeID = (encoder, id2) => {
    writeVarUint(encoder, id2.client);
    writeVarUint(encoder, id2.clock);
  };
  var readID = (decoder) => createID(readVarUint(decoder), readVarUint(decoder));
  var findRootTypeKey = (type) => {
    for (const [key, value] of type.doc.share.entries()) {
      if (value === type) {
        return key;
      }
    }
    throw unexpectedCase();
  };
  var lengthExceeded = create5("Length exceeded!");
  var ListIterator = class {
    constructor(type) {
      this.type = type;
      this.index = 0;
      this.rel = 0;
      this.nextItem = type._start;
      this.reachedEnd = type._start === null;
      this.currMove = null;
      this.currMoveStart = null;
      this.currMoveEnd = null;
      this.movedStack = [];
    }
    clone() {
      const iter = new ListIterator(this.type);
      iter.index = this.index;
      iter.rel = this.rel;
      iter.nextItem = this.nextItem;
      iter.reachedEnd = this.reachedEnd;
      iter.currMove = this.currMove;
      iter.currMoveStart = this.currMoveStart;
      iter.currMoveEnd = this.currMoveEnd;
      iter.movedStack = this.movedStack.slice();
      return iter;
    }
    get left() {
      if (this.reachedEnd) {
        return this.nextItem;
      } else {
        return this.nextItem && this.nextItem.left;
      }
    }
    get right() {
      if (this.reachedEnd) {
        return null;
      } else {
        return this.nextItem;
      }
    }
    moveTo(tr2, index) {
      const diff = index - this.index;
      if (diff > 0) {
        this.forward(tr2, diff);
      } else if (diff < 0) {
        this.backward(tr2, -diff);
      }
    }
    forward(tr2, len) {
      if (this.index + len > this.type._length) {
        throw lengthExceeded;
      }
      let item = this.nextItem;
      this.index += len;
      if (this.rel) {
        len += this.rel;
        this.rel = 0;
      }
      while ((!this.reachedEnd || this.currMove !== null) && (len > 0 || len === 0 && item && (!item.countable || item.deleted || item === this.currMoveEnd || this.reachedEnd && this.currMoveEnd === null || item.moved !== this.currMove))) {
        if (item === this.currMoveEnd || this.currMoveEnd === null && this.reachedEnd && this.currMove) {
          item = this.currMove;
          const { start, end, move } = this.movedStack.pop() || { start: null, end: null, move: null };
          this.currMove = move;
          this.currMoveStart = start;
          this.currMoveEnd = end;
          this.reachedEnd = false;
        } else if (item === null) {
          break;
        } else if (item.countable && !item.deleted && item.moved === this.currMove && len > 0) {
          len -= item.length;
          if (len < 0) {
            this.rel = item.length + len;
            len = 0;
            break;
          }
        } else if (item.content.constructor === ContentMove && item.moved === this.currMove) {
          if (this.currMove) {
            this.movedStack.push({ start: this.currMoveStart, end: this.currMoveEnd, move: this.currMove });
          }
          const { start, end } = getMovedCoords(item.content, tr2);
          this.currMove = item;
          this.currMoveStart = start;
          this.currMoveEnd = end;
          item = start;
          continue;
        }
        if (item.right) {
          item = item.right;
        } else {
          this.reachedEnd = true;
        }
      }
      this.index -= len;
      this.nextItem = item;
      return this;
    }
    reduceMoves(tr2) {
      let item = this.nextItem;
      if (item !== null) {
        while (item === this.currMoveStart) {
          item = this.currMove;
          const { start, end, move } = this.movedStack.pop() || { start: null, end: null, move: null };
          this.currMove = move;
          this.currMoveStart = start;
          this.currMoveEnd = end;
        }
        this.nextItem = item;
      }
    }
    backward(tr2, len) {
      if (this.index - len < 0) {
        throw lengthExceeded;
      }
      this.index -= len;
      if (this.reachedEnd) {
        const nextItem = this.nextItem;
        this.rel = nextItem.countable && !nextItem.deleted ? nextItem.length : 0;
        this.reachedEnd = false;
      }
      if (this.rel >= len) {
        this.rel -= len;
        return this;
      }
      let item = this.nextItem && this.nextItem.left;
      if (this.rel) {
        len -= this.rel;
        this.rel = 0;
      }
      while (item && len > 0) {
        if (item.countable && !item.deleted && item.moved === this.currMove) {
          len -= item.length;
          if (len < 0) {
            this.rel = -len;
            len = 0;
          }
          if (len === 0) {
            break;
          }
        } else if (item.content.constructor === ContentMove && item.moved === this.currMove) {
          if (this.currMove) {
            this.movedStack.push({ start: this.currMoveStart, end: this.currMoveEnd, move: this.currMove });
          }
          const { start, end } = getMovedCoords(item.content, tr2);
          this.currMove = item;
          this.currMoveStart = start;
          this.currMoveEnd = end;
          item = start;
          continue;
        }
        if (item === this.currMoveStart) {
          item = this.currMove;
          const { start, end, move } = this.movedStack.pop() || { start: null, end: null, move: null };
          this.currMove = move;
          this.currMoveStart = start;
          this.currMoveEnd = end;
        }
        item = item.left;
      }
      this.nextItem = item;
      return this;
    }
    _slice(tr2, len, value, slice, concat) {
      this.index += len;
      while (len > 0 && !this.reachedEnd) {
        while (this.nextItem && this.nextItem.countable && !this.reachedEnd && len > 0 && this.nextItem !== this.currMoveEnd) {
          if (!this.nextItem.deleted && this.nextItem.moved === this.currMove) {
            const item = this.nextItem;
            const slicedContent = slice(item.content, this.rel, len);
            len -= slicedContent.length;
            value = concat(value, slicedContent);
            if (item.length !== slicedContent.length) {
              if (this.rel + slicedContent.length === item.length) {
                this.rel = 0;
              } else {
                this.rel += slicedContent.length;
                continue;
              }
            }
          }
          if (this.nextItem.right) {
            this.nextItem = this.nextItem.right;
          } else {
            this.reachedEnd = true;
          }
        }
        if (this.nextItem && (!this.reachedEnd || this.currMove !== null) && len > 0) {
          this.forward(tr2, 0);
        }
      }
      if (len < 0) {
        this.index -= len;
      }
      return value;
    }
    delete(tr2, len) {
      const startLength = len;
      const sm = this.type._searchMarker;
      let item = this.nextItem;
      while (len > 0) {
        while (item && !item.deleted && item.countable && !this.reachedEnd && len > 0 && item.moved === this.currMove && item !== this.currMoveEnd) {
          if (this.rel > 0) {
            item = getItemCleanStart(tr2, createID(item.id.client, item.id.clock + this.rel));
            this.rel = 0;
          }
          if (len < item.length) {
            getItemCleanStart(tr2, createID(item.id.client, item.id.clock + len));
          }
          len -= item.length;
          item.delete(tr2);
          if (item.right) {
            item = item.right;
          } else {
            this.reachedEnd = true;
          }
        }
        if (len > 0) {
          this.nextItem = item;
          this.forward(tr2, 0);
          item = this.nextItem;
        }
      }
      this.nextItem = item;
      if (sm) {
        updateMarkerChanges(sm, this.index, -startLength + len, this);
      }
    }
    _splitRel(tr2) {
      if (this.rel > 0) {
        const itemid = this.nextItem.id;
        this.nextItem = getItemCleanStart(tr2, createID(itemid.client, itemid.clock + this.rel));
        this.rel = 0;
      }
    }
    insertContents(tr2, content) {
      this.reduceMoves(tr2);
      this._splitRel(tr2);
      const parent = this.type;
      const store2 = tr2.doc.store;
      const ownClientId = tr2.doc.clientID;
      const right = this.right;
      let left = this.left;
      content.forEach((c3) => {
        left = new Item(createID(ownClientId, getState(store2, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, c3);
        left.integrate(tr2, 0);
      });
      if (right === null) {
        this.nextItem = left;
        this.reachedEnd = true;
      } else {
        this.nextItem = right;
      }
    }
    insertMove(tr2, start, end) {
      this.insertContents(tr2, [new ContentMove(start, end, -1)]);
      const sm = this.type._searchMarker;
      if (sm)
        sm.length = 0;
    }
    insertArrayValue(tr2, values2) {
      this._splitRel(tr2);
      const sm = this.type._searchMarker;
      const contents = [];
      let jsonContent = [];
      const packJsonContent = () => {
        if (jsonContent.length > 0) {
          contents.push(new ContentAny(jsonContent));
          jsonContent = [];
        }
      };
      values2.forEach((c3) => {
        if (c3 === null) {
          jsonContent.push(c3);
        } else {
          switch (c3.constructor) {
            case Number:
            case Object:
            case Boolean:
            case Array:
            case String:
              jsonContent.push(c3);
              break;
            default:
              packJsonContent();
              switch (c3.constructor) {
                case Uint8Array:
                case ArrayBuffer:
                  contents.push(new ContentBinary(new Uint8Array(c3)));
                  break;
                case Doc:
                  contents.push(new ContentDoc(c3));
                  break;
                default:
                  if (c3 instanceof AbstractType) {
                    contents.push(new ContentType(c3));
                  } else {
                    throw new Error("Unexpected content type in insert operation");
                  }
              }
          }
        }
      });
      packJsonContent();
      this.insertContents(tr2, contents);
      this.index += values2.length;
      if (sm) {
        updateMarkerChanges(sm, this.index - values2.length, values2.length, this);
      }
    }
    slice(tr2, len) {
      return this._slice(tr2, len, [], sliceArrayContent, concatArrayContent);
    }
    forEach(tr2, f5) {
      for (const val of this.values(tr2)) {
        f5(val, this.index, this.type);
      }
    }
    map(tr2, f5) {
      const arr = new Array(this.type._length - this.index);
      let i3 = 0;
      for (const val of this.values(tr2)) {
        arr[i3++] = f5(val, this.index, this.type);
      }
      return arr;
    }
    values(tr2) {
      return {
        [Symbol.iterator]() {
          return this;
        },
        next: () => {
          if (this.reachedEnd || this.index === this.type._length) {
            return { done: true };
          }
          const [value] = this.slice(tr2, 1);
          return {
            done: false,
            value
          };
        }
      };
    }
  };
  var sliceArrayContent = (itemcontent, start, len) => {
    const content = itemcontent.getContent();
    return content.length <= len && start === 0 ? content : content.slice(start, start + len);
  };
  var concatArrayContent = (content, added) => {
    content.push(...added);
    return content;
  };
  var RelativePosition = class {
    constructor(type, tname, item, assoc = 0) {
      this.type = type;
      this.tname = tname;
      this.item = item;
      this.assoc = assoc;
    }
    clone() {
      return new RelativePosition(this.type, this.tname, this.item, this.assoc);
    }
  };
  var createRelativePosition = (type, item, assoc) => {
    let typeid = null;
    let tname = null;
    if (type._item === null) {
      tname = findRootTypeKey(type);
    } else {
      typeid = createID(type._item.id.client, type._item.id.clock);
    }
    return new RelativePosition(typeid, tname, item, assoc);
  };
  var createRelativePositionFromTypeIndex = (type, index, assoc = 0) => {
    if (assoc < 0) {
      if (index === 0) {
        return createRelativePosition(type, null, assoc);
      }
      index--;
    }
    return transact(type.doc, (tr2) => useSearchMarker(tr2, type, index, (walker) => {
      if (walker.reachedEnd) {
        const item = assoc < 0 ? walker.nextItem.lastId : null;
        return createRelativePosition(type, item, assoc);
      } else {
        const id2 = walker.nextItem.id;
        return createRelativePosition(type, createID(id2.client, id2.clock + walker.rel), assoc);
      }
    }));
  };
  var writeRelativePosition = (encoder, rpos) => {
    const { type, tname, item, assoc } = rpos;
    if (item !== null) {
      writeVarUint(encoder, 0);
      writeID(encoder, item);
    } else if (tname !== null) {
      writeUint8(encoder, 1);
      writeVarString(encoder, tname);
    } else if (type !== null) {
      writeUint8(encoder, 2);
      writeID(encoder, type);
    } else {
      throw unexpectedCase();
    }
    writeVarInt(encoder, assoc);
    return encoder;
  };
  var encodeRelativePosition = (rpos) => {
    const encoder = createEncoder();
    writeRelativePosition(encoder, rpos);
    return toUint8Array(encoder);
  };
  var readRelativePosition = (decoder) => {
    let type = null;
    let tname = null;
    let itemID = null;
    switch (readVarUint(decoder)) {
      case 0:
        itemID = readID(decoder);
        break;
      case 1:
        tname = readVarString(decoder);
        break;
      case 2: {
        type = readID(decoder);
      }
    }
    const assoc = hasContent(decoder) ? readVarInt(decoder) : 0;
    return new RelativePosition(type, tname, itemID, assoc);
  };
  var decodeRelativePosition = (uint8Array) => readRelativePosition(createDecoder(uint8Array));
  var Snapshot = class {
    constructor(ds, sv) {
      this.ds = ds;
      this.sv = sv;
    }
  };
  var createSnapshot = (ds, sm) => new Snapshot(ds, sm);
  var emptySnapshot = createSnapshot(createDeleteSet(), new Map());
  var isVisible = (item, snapshot2) => snapshot2 === void 0 ? !item.deleted : snapshot2.sv.has(item.id.client) && (snapshot2.sv.get(item.id.client) || 0) > item.id.clock && !isDeleted(snapshot2.ds, item.id);
  var splitSnapshotAffectedStructs = (transaction, snapshot2) => {
    const meta = setIfUndefined(transaction.meta, splitSnapshotAffectedStructs, create3);
    const store2 = transaction.doc.store;
    if (!meta.has(snapshot2)) {
      snapshot2.sv.forEach((clock, client) => {
        if (clock < getState(store2, client)) {
          getItemCleanStart(transaction, createID(client, clock));
        }
      });
      iterateDeletedStructs(transaction, snapshot2.ds, (item) => {
      });
      meta.add(snapshot2);
    }
  };
  var StructStore = class {
    constructor() {
      this.clients = new Map();
      this.pendingStructs = null;
      this.pendingDs = null;
    }
  };
  var getStateVector = (store2) => {
    const sm = new Map();
    store2.clients.forEach((structs, client) => {
      const struct = structs[structs.length - 1];
      sm.set(client, struct.id.clock + struct.length);
    });
    return sm;
  };
  var getState = (store2, client) => {
    const structs = store2.clients.get(client);
    if (structs === void 0) {
      return 0;
    }
    const lastStruct = structs[structs.length - 1];
    return lastStruct.id.clock + lastStruct.length;
  };
  var addStruct = (store2, struct) => {
    let structs = store2.clients.get(struct.id.client);
    if (structs === void 0) {
      structs = [];
      store2.clients.set(struct.id.client, structs);
    } else {
      const lastStruct = structs[structs.length - 1];
      if (lastStruct.id.clock + lastStruct.length !== struct.id.clock) {
        throw unexpectedCase();
      }
    }
    structs.push(struct);
  };
  var findIndexSS = (structs, clock) => {
    let left = 0;
    let right = structs.length - 1;
    let mid = structs[right];
    let midclock = mid.id.clock;
    if (midclock === clock) {
      return right;
    }
    let midindex = floor2(clock / (midclock + mid.length - 1) * right);
    while (left <= right) {
      mid = structs[midindex];
      midclock = mid.id.clock;
      if (midclock <= clock) {
        if (clock < midclock + mid.length) {
          return midindex;
        }
        left = midindex + 1;
      } else {
        right = midindex - 1;
      }
      midindex = floor2((left + right) / 2);
    }
    throw unexpectedCase();
  };
  var find = (store2, id2) => {
    const structs = store2.clients.get(id2.client);
    return structs[findIndexSS(structs, id2.clock)];
  };
  var getItem = find;
  var findIndexCleanStart = (transaction, structs, clock) => {
    const index = findIndexSS(structs, clock);
    const struct = structs[index];
    if (struct.id.clock < clock && struct instanceof Item) {
      structs.splice(index + 1, 0, splitItem(transaction, struct, clock - struct.id.clock));
      return index + 1;
    }
    return index;
  };
  var getItemCleanStart = (transaction, id2) => {
    const structs = transaction.doc.store.clients.get(id2.client);
    return structs[findIndexCleanStart(transaction, structs, id2.clock)];
  };
  var getItemCleanEnd = (transaction, id2) => {
    const structs = transaction.doc.store.clients.get(id2.client);
    const index = findIndexSS(structs, id2.clock);
    const struct = structs[index];
    if (id2.clock !== struct.id.clock + struct.length - 1 && struct.constructor !== GC) {
      structs.splice(index + 1, 0, splitItem(transaction, struct, id2.clock - struct.id.clock + 1));
    }
    return struct;
  };
  var replaceStruct = (store2, struct, newStruct) => {
    const structs = store2.clients.get(struct.id.client);
    structs[findIndexSS(structs, struct.id.clock)] = newStruct;
  };
  var iterateStructs = (transaction, structs, clockStart, len, f5) => {
    if (len === 0) {
      return;
    }
    const clockEnd = clockStart + len;
    let index = findIndexCleanStart(transaction, structs, clockStart);
    let struct;
    do {
      struct = structs[index++];
      if (clockEnd < struct.id.clock + struct.length) {
        findIndexCleanStart(transaction, structs, clockEnd);
      }
      f5(struct);
    } while (index < structs.length && structs[index].id.clock < clockEnd);
  };
  var Transaction = class {
    constructor(doc3, origin, local) {
      this.doc = doc3;
      this.deleteSet = new DeleteSet();
      this.beforeState = getStateVector(doc3.store);
      this.afterState = new Map();
      this.changed = new Map();
      this.changedParentTypes = new Map();
      this._mergeStructs = [];
      this.origin = origin;
      this.meta = new Map();
      this.local = local;
      this.subdocsAdded = new Set();
      this.subdocsRemoved = new Set();
      this.subdocsLoaded = new Set();
      this.prevMoved = new Map();
    }
  };
  var writeUpdateMessageFromTransaction = (encoder, transaction) => {
    if (transaction.deleteSet.clients.size === 0 && !any(transaction.afterState, (clock, client) => transaction.beforeState.get(client) !== clock)) {
      return false;
    }
    sortAndMergeDeleteSet(transaction.deleteSet);
    writeStructsFromTransaction(encoder, transaction);
    writeDeleteSet(encoder, transaction.deleteSet);
    return true;
  };
  var addChangedTypeToTransaction = (transaction, type, parentSub) => {
    const item = type._item;
    if (item === null || item.id.clock < (transaction.beforeState.get(item.id.client) || 0) && !item.deleted) {
      setIfUndefined(transaction.changed, type, create3).add(parentSub);
    }
  };
  var tryToMergeWithLeft = (structs, pos) => {
    const left = structs[pos - 1];
    const right = structs[pos];
    if (left.deleted === right.deleted && left.constructor === right.constructor) {
      if (left.mergeWith(right)) {
        structs.splice(pos, 1);
        if (right instanceof Item && right.parentSub !== null && right.parent._map.get(right.parentSub) === right) {
          right.parent._map.set(right.parentSub, left);
        }
      }
    }
  };
  var tryGcDeleteSet = (ds, store2, gcFilter) => {
    for (const [client, deleteItems] of ds.clients.entries()) {
      const structs = store2.clients.get(client);
      for (let di = deleteItems.length - 1; di >= 0; di--) {
        const deleteItem = deleteItems[di];
        const endDeleteItemClock = deleteItem.clock + deleteItem.len;
        for (let si = findIndexSS(structs, deleteItem.clock), struct = structs[si]; si < structs.length && struct.id.clock < endDeleteItemClock; struct = structs[++si]) {
          const struct2 = structs[si];
          if (deleteItem.clock + deleteItem.len <= struct2.id.clock) {
            break;
          }
          if (struct2 instanceof Item && struct2.deleted && !struct2.keep && gcFilter(struct2)) {
            struct2.gc(store2, false);
          }
        }
      }
    }
  };
  var tryMergeDeleteSet = (ds, store2) => {
    ds.clients.forEach((deleteItems, client) => {
      const structs = store2.clients.get(client);
      for (let di = deleteItems.length - 1; di >= 0; di--) {
        const deleteItem = deleteItems[di];
        const mostRightIndexToCheck = min2(structs.length - 1, 1 + findIndexSS(structs, deleteItem.clock + deleteItem.len - 1));
        for (let si = mostRightIndexToCheck, struct = structs[si]; si > 0 && struct.id.clock >= deleteItem.clock; struct = structs[--si]) {
          tryToMergeWithLeft(structs, si);
        }
      }
    });
  };
  var cleanupTransactions = (transactionCleanups, i3) => {
    if (i3 < transactionCleanups.length) {
      const transaction = transactionCleanups[i3];
      const doc3 = transaction.doc;
      const store2 = doc3.store;
      const ds = transaction.deleteSet;
      const mergeStructs = transaction._mergeStructs;
      try {
        sortAndMergeDeleteSet(ds);
        transaction.afterState = getStateVector(transaction.doc.store);
        doc3._transaction = null;
        doc3.emit("beforeObserverCalls", [transaction, doc3]);
        const fs = [];
        transaction.changed.forEach((subs, itemtype) => fs.push(() => {
          if (itemtype._item === null || !itemtype._item.deleted) {
            itemtype._callObserver(transaction, subs);
          }
        }));
        fs.push(() => {
          transaction.changedParentTypes.forEach((events, type) => fs.push(() => {
            if (type._item === null || !type._item.deleted) {
              events = events.filter((event) => event.target._item === null || !event.target._item.deleted);
              events.forEach((event) => {
                event.currentTarget = type;
              });
              events.sort((event1, event2) => event1.path.length - event2.path.length);
              callEventHandlerListeners(type._dEH, events, transaction);
            }
          }));
          fs.push(() => doc3.emit("afterTransaction", [transaction, doc3]));
        });
        callAll(fs, []);
      } finally {
        if (doc3.gc) {
          tryGcDeleteSet(ds, store2, doc3.gcFilter);
        }
        tryMergeDeleteSet(ds, store2);
        transaction.afterState.forEach((clock, client) => {
          const beforeClock = transaction.beforeState.get(client) || 0;
          if (beforeClock !== clock) {
            const structs = store2.clients.get(client);
            const firstChangePos = max2(findIndexSS(structs, beforeClock), 1);
            for (let i4 = structs.length - 1; i4 >= firstChangePos; i4--) {
              tryToMergeWithLeft(structs, i4);
            }
          }
        });
        for (let i4 = 0; i4 < mergeStructs.length; i4++) {
          const { client, clock } = mergeStructs[i4].id;
          const structs = store2.clients.get(client);
          const replacedStructPos = findIndexSS(structs, clock);
          if (replacedStructPos + 1 < structs.length) {
            tryToMergeWithLeft(structs, replacedStructPos + 1);
          }
          if (replacedStructPos > 0) {
            tryToMergeWithLeft(structs, replacedStructPos);
          }
        }
        if (!transaction.local && transaction.afterState.get(doc3.clientID) !== transaction.beforeState.get(doc3.clientID)) {
          print(ORANGE, BOLD, "[yjs] ", UNBOLD, RED, "Changed the client-id because another client seems to be using it.");
          doc3.clientID = generateNewClientId();
        }
        doc3.emit("afterTransactionCleanup", [transaction, doc3]);
        if (doc3._observers.has("update")) {
          const encoder = new UpdateEncoderV1();
          const hasContent2 = writeUpdateMessageFromTransaction(encoder, transaction);
          if (hasContent2) {
            doc3.emit("update", [encoder.toUint8Array(), transaction.origin, doc3, transaction]);
          }
        }
        if (doc3._observers.has("updateV2")) {
          const encoder = new UpdateEncoderV2();
          const hasContent2 = writeUpdateMessageFromTransaction(encoder, transaction);
          if (hasContent2) {
            doc3.emit("updateV2", [encoder.toUint8Array(), transaction.origin, doc3, transaction]);
          }
        }
        const { subdocsAdded, subdocsLoaded, subdocsRemoved } = transaction;
        if (subdocsAdded.size > 0 || subdocsRemoved.size > 0 || subdocsLoaded.size > 0) {
          subdocsAdded.forEach((subdoc) => {
            subdoc.clientID = doc3.clientID;
            if (subdoc.collectionid == null) {
              subdoc.collectionid = doc3.collectionid;
            }
            doc3.subdocs.add(subdoc);
          });
          subdocsRemoved.forEach((subdoc) => doc3.subdocs.delete(subdoc));
          doc3.emit("subdocs", [{ loaded: subdocsLoaded, added: subdocsAdded, removed: subdocsRemoved }, doc3, transaction]);
          subdocsRemoved.forEach((subdoc) => subdoc.destroy());
        }
        if (transactionCleanups.length <= i3 + 1) {
          doc3._transactionCleanups = [];
          doc3.emit("afterAllTransactions", [doc3, transactionCleanups]);
        } else {
          cleanupTransactions(transactionCleanups, i3 + 1);
        }
      }
    }
  };
  var transact = (doc3, f5, origin = null, local = true) => {
    const transactionCleanups = doc3._transactionCleanups;
    let initialCall = false;
    if (doc3._transaction === null) {
      initialCall = true;
      doc3._transaction = new Transaction(doc3, origin, local);
      transactionCleanups.push(doc3._transaction);
      if (transactionCleanups.length === 1) {
        doc3.emit("beforeAllTransactions", [doc3]);
      }
      doc3.emit("beforeTransaction", [doc3._transaction, doc3]);
    }
    let res;
    try {
      res = f5(doc3._transaction);
    } finally {
      if (initialCall && transactionCleanups[0] === doc3._transaction) {
        cleanupTransactions(transactionCleanups, 0);
      }
    }
    return res;
  };
  function* lazyStructReaderGenerator(decoder) {
    const numOfStateUpdates = readVarUint(decoder.restDecoder);
    for (let i3 = 0; i3 < numOfStateUpdates; i3++) {
      const numberOfStructs = readVarUint(decoder.restDecoder);
      const client = decoder.readClient();
      let clock = readVarUint(decoder.restDecoder);
      for (let i4 = 0; i4 < numberOfStructs; i4++) {
        const info = decoder.readInfo();
        if (info === 10) {
          const len = readVarUint(decoder.restDecoder);
          yield new Skip(createID(client, clock), len);
          clock += len;
        } else if ((BITS5 & info) !== 0) {
          const cantCopyParentInfo = (info & (BIT7 | BIT8)) === 0;
          const struct = new Item(createID(client, clock), null, (info & BIT8) === BIT8 ? decoder.readLeftID() : null, null, (info & BIT7) === BIT7 ? decoder.readRightID() : null, cantCopyParentInfo ? decoder.readParentInfo() ? decoder.readString() : decoder.readLeftID() : null, cantCopyParentInfo && (info & BIT6) === BIT6 ? decoder.readString() : null, readItemContent(decoder, info));
          yield struct;
          clock += struct.length;
        } else {
          const len = decoder.readLen();
          yield new GC(createID(client, clock), len);
          clock += len;
        }
      }
    }
  }
  var LazyStructReader = class {
    constructor(decoder, filterSkips) {
      this.gen = lazyStructReaderGenerator(decoder);
      this.curr = null;
      this.done = false;
      this.filterSkips = filterSkips;
      this.next();
    }
    next() {
      do {
        this.curr = this.gen.next().value || null;
      } while (this.filterSkips && this.curr !== null && this.curr.constructor === Skip);
      return this.curr;
    }
  };
  var LazyStructWriter = class {
    constructor(encoder) {
      this.currClient = 0;
      this.startClock = 0;
      this.written = 0;
      this.encoder = encoder;
      this.clientStructs = [];
    }
  };
  var mergeUpdates = (updates) => mergeUpdatesV2(updates, UpdateDecoderV1, UpdateEncoderV1);
  var sliceStruct = (left, diff) => {
    if (left.constructor === GC) {
      const { client, clock } = left.id;
      return new GC(createID(client, clock + diff), left.length - diff);
    } else if (left.constructor === Skip) {
      const { client, clock } = left.id;
      return new Skip(createID(client, clock + diff), left.length - diff);
    } else {
      const leftItem = left;
      const { client, clock } = leftItem.id;
      return new Item(createID(client, clock + diff), null, createID(client, clock + diff - 1), null, leftItem.rightOrigin, leftItem.parent, leftItem.parentSub, leftItem.content.splice(diff));
    }
  };
  var mergeUpdatesV2 = (updates, YDecoder = UpdateDecoderV2, YEncoder = UpdateEncoderV2) => {
    if (updates.length === 1) {
      return updates[0];
    }
    const updateDecoders = updates.map((update) => new YDecoder(createDecoder(update)));
    let lazyStructDecoders = updateDecoders.map((decoder) => new LazyStructReader(decoder, true));
    let currWrite = null;
    const updateEncoder = new YEncoder();
    const lazyStructEncoder = new LazyStructWriter(updateEncoder);
    while (true) {
      lazyStructDecoders = lazyStructDecoders.filter((dec) => dec.curr !== null);
      lazyStructDecoders.sort((dec1, dec2) => {
        if (dec1.curr.id.client === dec2.curr.id.client) {
          const clockDiff = dec1.curr.id.clock - dec2.curr.id.clock;
          if (clockDiff === 0) {
            return dec1.curr.constructor === dec2.curr.constructor ? 0 : dec1.curr.constructor === Skip ? 1 : -1;
          } else {
            return clockDiff;
          }
        } else {
          return dec2.curr.id.client - dec1.curr.id.client;
        }
      });
      if (lazyStructDecoders.length === 0) {
        break;
      }
      const currDecoder = lazyStructDecoders[0];
      const firstClient = currDecoder.curr.id.client;
      if (currWrite !== null) {
        let curr = currDecoder.curr;
        let iterated = false;
        while (curr !== null && curr.id.clock + curr.length <= currWrite.struct.id.clock + currWrite.struct.length && curr.id.client >= currWrite.struct.id.client) {
          curr = currDecoder.next();
          iterated = true;
        }
        if (curr === null || curr.id.client !== firstClient || iterated && curr.id.clock > currWrite.struct.id.clock + currWrite.struct.length) {
          continue;
        }
        if (firstClient !== currWrite.struct.id.client) {
          writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset);
          currWrite = { struct: curr, offset: 0 };
          currDecoder.next();
        } else {
          if (currWrite.struct.id.clock + currWrite.struct.length < curr.id.clock) {
            if (currWrite.struct.constructor === Skip) {
              currWrite.struct.length = curr.id.clock + curr.length - currWrite.struct.id.clock;
            } else {
              writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset);
              const diff = curr.id.clock - currWrite.struct.id.clock - currWrite.struct.length;
              const struct = new Skip(createID(firstClient, currWrite.struct.id.clock + currWrite.struct.length), diff);
              currWrite = { struct, offset: 0 };
            }
          } else {
            const diff = currWrite.struct.id.clock + currWrite.struct.length - curr.id.clock;
            if (diff > 0) {
              if (currWrite.struct.constructor === Skip) {
                currWrite.struct.length -= diff;
              } else {
                curr = sliceStruct(curr, diff);
              }
            }
            if (!currWrite.struct.mergeWith(curr)) {
              writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset);
              currWrite = { struct: curr, offset: 0 };
              currDecoder.next();
            }
          }
        }
      } else {
        currWrite = { struct: currDecoder.curr, offset: 0 };
        currDecoder.next();
      }
      for (let next2 = currDecoder.curr; next2 !== null && next2.id.client === firstClient && next2.id.clock === currWrite.struct.id.clock + currWrite.struct.length && next2.constructor !== Skip; next2 = currDecoder.next()) {
        writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset);
        currWrite = { struct: next2, offset: 0 };
      }
    }
    if (currWrite !== null) {
      writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset);
      currWrite = null;
    }
    finishLazyStructWriting(lazyStructEncoder);
    const dss = updateDecoders.map((decoder) => readDeleteSet(decoder));
    const ds = mergeDeleteSets(dss);
    writeDeleteSet(updateEncoder, ds);
    return updateEncoder.toUint8Array();
  };
  var diffUpdateV2 = (update, sv, YDecoder = UpdateDecoderV2, YEncoder = UpdateEncoderV2) => {
    const state2 = decodeStateVector(sv);
    const encoder = new YEncoder();
    const lazyStructWriter = new LazyStructWriter(encoder);
    const decoder = new YDecoder(createDecoder(update));
    const reader = new LazyStructReader(decoder, false);
    while (reader.curr) {
      const curr = reader.curr;
      const currClient = curr.id.client;
      const svClock = state2.get(currClient) || 0;
      if (reader.curr.constructor === Skip) {
        reader.next();
        continue;
      }
      if (curr.id.clock + curr.length > svClock) {
        writeStructToLazyStructWriter(lazyStructWriter, curr, max2(svClock - curr.id.clock, 0));
        reader.next();
        while (reader.curr && reader.curr.id.client === currClient) {
          writeStructToLazyStructWriter(lazyStructWriter, reader.curr, 0);
          reader.next();
        }
      } else {
        while (reader.curr && reader.curr.id.client === currClient && reader.curr.id.clock + reader.curr.length <= svClock) {
          reader.next();
        }
      }
    }
    finishLazyStructWriting(lazyStructWriter);
    const ds = readDeleteSet(decoder);
    writeDeleteSet(encoder, ds);
    return encoder.toUint8Array();
  };
  var flushLazyStructWriter = (lazyWriter) => {
    if (lazyWriter.written > 0) {
      lazyWriter.clientStructs.push({ written: lazyWriter.written, restEncoder: toUint8Array(lazyWriter.encoder.restEncoder) });
      lazyWriter.encoder.restEncoder = createEncoder();
      lazyWriter.written = 0;
    }
  };
  var writeStructToLazyStructWriter = (lazyWriter, struct, offset) => {
    if (lazyWriter.written > 0 && lazyWriter.currClient !== struct.id.client) {
      flushLazyStructWriter(lazyWriter);
    }
    if (lazyWriter.written === 0) {
      lazyWriter.currClient = struct.id.client;
      lazyWriter.encoder.writeClient(struct.id.client);
      writeVarUint(lazyWriter.encoder.restEncoder, struct.id.clock + offset);
    }
    struct.write(lazyWriter.encoder, offset);
    lazyWriter.written++;
  };
  var finishLazyStructWriting = (lazyWriter) => {
    flushLazyStructWriter(lazyWriter);
    const restEncoder = lazyWriter.encoder.restEncoder;
    writeVarUint(restEncoder, lazyWriter.clientStructs.length);
    for (let i3 = 0; i3 < lazyWriter.clientStructs.length; i3++) {
      const partStructs = lazyWriter.clientStructs[i3];
      writeVarUint(restEncoder, partStructs.written);
      writeUint8Array(restEncoder, partStructs.restEncoder);
    }
  };
  var convertUpdateFormat = (update, YDecoder, YEncoder) => {
    const updateDecoder = new YDecoder(createDecoder(update));
    const lazyDecoder = new LazyStructReader(updateDecoder, false);
    const updateEncoder = new YEncoder();
    const lazyWriter = new LazyStructWriter(updateEncoder);
    for (let curr = lazyDecoder.curr; curr !== null; curr = lazyDecoder.next()) {
      writeStructToLazyStructWriter(lazyWriter, curr, 0);
    }
    finishLazyStructWriting(lazyWriter);
    const ds = readDeleteSet(updateDecoder);
    writeDeleteSet(updateEncoder, ds);
    return updateEncoder.toUint8Array();
  };
  var convertUpdateFormatV2ToV1 = (update) => convertUpdateFormat(update, UpdateDecoderV2, UpdateEncoderV1);
  var YEvent = class {
    constructor(target, transaction) {
      this.target = target;
      this.currentTarget = target;
      this.transaction = transaction;
      this._changes = null;
      this._keys = null;
      this._delta = null;
    }
    get path() {
      return getPathTo(this.currentTarget, this.target);
    }
    deletes(struct) {
      return isDeleted(this.transaction.deleteSet, struct.id);
    }
    get keys() {
      if (this._keys === null) {
        const keys5 = new Map();
        const target = this.target;
        const changed = this.transaction.changed.get(target);
        changed.forEach((key) => {
          if (key !== null) {
            const item = target._map.get(key);
            let action;
            let oldValue;
            if (this.adds(item)) {
              let prev = item.left;
              while (prev !== null && this.adds(prev)) {
                prev = prev.left;
              }
              if (this.deletes(item)) {
                if (prev !== null && this.deletes(prev)) {
                  action = "delete";
                  oldValue = last(prev.content.getContent());
                } else {
                  return;
                }
              } else {
                if (prev !== null && this.deletes(prev)) {
                  action = "update";
                  oldValue = last(prev.content.getContent());
                } else {
                  action = "add";
                  oldValue = void 0;
                }
              }
            } else {
              if (this.deletes(item)) {
                action = "delete";
                oldValue = last(item.content.getContent());
              } else {
                return;
              }
            }
            keys5.set(key, { action, oldValue });
          }
        });
        this._keys = keys5;
      }
      return this._keys;
    }
    get delta() {
      return this.changes.delta;
    }
    adds(struct) {
      return struct.id.clock >= (this.transaction.beforeState.get(struct.id.client) || 0);
    }
    get changes() {
      let changes = this._changes;
      if (changes === null) {
        this.transaction.doc.transact((tr2) => {
          const target = this.target;
          const added = create3();
          const deleted = create3();
          const delta = [];
          changes = {
            added,
            deleted,
            delta,
            keys: this.keys
          };
          const changed = this.transaction.changed.get(target);
          if (changed.has(null)) {
            const movedStack = [];
            let currMove = null;
            let currMoveIsNew = false;
            let currMoveEnd = null;
            let lastOp = null;
            const packOp = () => {
              if (lastOp) {
                delta.push(lastOp);
              }
            };
            for (let item = target._start; ; ) {
              if (item === currMoveEnd && currMove) {
                item = currMove;
                const { end, move, isNew } = movedStack.pop() || { end: null, move: null, isNew: false };
                currMoveIsNew = isNew;
                currMoveEnd = end;
                currMove = move;
              } else if (item === null) {
                break;
              } else if (item.content.constructor === ContentMove) {
                if (item.moved === currMove) {
                  movedStack.push({ end: currMoveEnd, move: currMove, isNew: currMoveIsNew });
                  const { start, end } = getMovedCoords(item.content, tr2);
                  currMove = item;
                  currMoveEnd = end;
                  currMoveIsNew = this.adds(item);
                  item = start;
                  continue;
                }
              } else if (item.moved !== currMove) {
                if (!currMoveIsNew && item.countable && item.moved && !this.adds(item) && this.adds(item.moved) && (this.transaction.prevMoved.get(item) || null) === currMove) {
                  if (lastOp === null || lastOp.delete === void 0) {
                    packOp();
                    lastOp = { delete: 0 };
                  }
                  lastOp.delete += item.length;
                }
              } else if (item.deleted) {
                if (!currMoveIsNew && this.deletes(item) && !this.adds(item)) {
                  if (lastOp === null || lastOp.delete === void 0) {
                    packOp();
                    lastOp = { delete: 0 };
                  }
                  lastOp.delete += item.length;
                  deleted.add(item);
                }
              } else {
                if (currMoveIsNew || this.adds(item)) {
                  if (lastOp === null || lastOp.insert === void 0) {
                    packOp();
                    lastOp = { insert: [] };
                  }
                  lastOp.insert = lastOp.insert.concat(item.content.getContent());
                  added.add(item);
                } else {
                  if (lastOp === null || lastOp.retain === void 0) {
                    packOp();
                    lastOp = { retain: 0 };
                  }
                  lastOp.retain += item.length;
                }
              }
              item = item.right;
            }
            if (lastOp !== null && lastOp.retain === void 0) {
              packOp();
            }
          }
          this._changes = changes;
        });
      }
      return changes;
    }
  };
  var getPathTo = (parent, child) => {
    const path2 = [];
    while (child._item !== null && child !== parent) {
      if (child._item.parentSub !== null) {
        path2.unshift(child._item.parentSub);
      } else {
        let i3 = 0;
        let c3 = child._item.parent._start;
        while (c3 !== child._item && c3 !== null) {
          if (!c3.deleted) {
            i3++;
          }
          c3 = c3.right;
        }
        path2.unshift(i3);
      }
      child = child._item.parent;
    }
    return path2;
  };
  var maxSearchMarker = 80;
  var useSearchMarker = (tr2, yarray, index, f5) => {
    const searchMarker = yarray._searchMarker;
    if (searchMarker === null || yarray._start === null || index < 5) {
      return f5(new ListIterator(yarray).forward(tr2, index));
    }
    if (searchMarker.length === 0) {
      const sm2 = new ListIterator(yarray).forward(tr2, index);
      searchMarker.push(sm2);
      if (sm2.nextItem)
        sm2.nextItem.marker = true;
    }
    const sm = searchMarker.reduce((a3, b3, arrayIndex) => abs(index - a3.index) < abs(index - b3.index) ? a3 : b3);
    const newIsCheaper = abs(sm.index - index) > index;
    const createFreshMarker = searchMarker.length < maxSearchMarker && (abs(sm.index - index) > 5 || newIsCheaper);
    const fsm = createFreshMarker ? newIsCheaper ? new ListIterator(yarray) : sm.clone() : sm;
    const prevItem = sm.nextItem;
    if (createFreshMarker) {
      searchMarker.push(fsm);
    }
    const diff = fsm.index - index;
    if (diff > 0) {
      fsm.backward(tr2, diff);
    } else {
      fsm.forward(tr2, -diff);
    }
    const result = f5(fsm);
    if (fsm.reachedEnd) {
      fsm.reachedEnd = false;
      const nextItem = fsm.nextItem;
      if (nextItem.countable && !nextItem.deleted) {
        fsm.index -= nextItem.length;
      }
      fsm.rel = 0;
    }
    if (!createFreshMarker) {
      prevItem.marker = false;
    }
    const fsmItem = fsm.nextItem;
    if (fsmItem) {
      if (fsmItem.marker) {
        searchMarker.splice(searchMarker.findIndex((m3) => m3 === fsm), 1);
      } else {
        fsmItem.marker = true;
      }
    }
    return result;
  };
  var updateMarkerChanges = (searchMarker, index, len, origSearchMarker) => {
    for (let i3 = searchMarker.length - 1; i3 >= 0; i3--) {
      const marker = searchMarker[i3];
      if (marker !== origSearchMarker) {
        if (len > 0 && index === marker.index) {
          searchMarker.splice(i3, 1);
          if (marker.nextItem)
            marker.nextItem.marker = false;
          continue;
        }
        if (index < marker.index) {
          marker.index = max2(index, marker.index + len);
        }
      }
    }
  };
  var callTypeObservers = (type, transaction, event) => {
    const changedType = type;
    const changedParentTypes = transaction.changedParentTypes;
    while (true) {
      setIfUndefined(changedParentTypes, type, () => []).push(event);
      if (type._item === null) {
        break;
      }
      type = type._item.parent;
    }
    callEventHandlerListeners(changedType._eH, event, transaction);
  };
  var AbstractType = class {
    constructor() {
      this._item = null;
      this._map = new Map();
      this._start = null;
      this.doc = null;
      this._length = 0;
      this._eH = createEventHandler();
      this._dEH = createEventHandler();
      this._searchMarker = null;
      this.meta = new Map();
    }
    get parent() {
      return this._item ? this._item.parent : null;
    }
    _integrate(y2, item) {
      this.doc = y2;
      this._item = item;
    }
    _copy() {
      throw methodUnimplemented();
    }
    clone() {
      throw methodUnimplemented();
    }
    _write(encoder) {
    }
    get _first() {
      let n2 = this._start;
      while (n2 !== null && n2.deleted) {
        n2 = n2.right;
      }
      return n2;
    }
    _callObserver(transaction, parentSubs) {
      if (!transaction.local && this._searchMarker) {
        this._searchMarker.length = 0;
      }
    }
    observe(f5) {
      addEventHandlerListener(this._eH, f5);
    }
    observeDeep(f5) {
      addEventHandlerListener(this._dEH, f5);
    }
    unobserve(f5) {
      removeEventHandlerListener(this._eH, f5);
    }
    unobserveDeep(f5) {
      removeEventHandlerListener(this._dEH, f5);
    }
    toJSON() {
    }
  };
  var typeListSlice = (type, start, end) => {
    if (start < 0) {
      start = type._length + start;
    }
    if (end < 0) {
      end = type._length + end;
    }
    let len = end - start;
    const cs = [];
    let n2 = type._start;
    while (n2 !== null && len > 0) {
      if (n2.countable && !n2.deleted) {
        const c3 = n2.content.getContent();
        if (c3.length <= start) {
          start -= c3.length;
        } else {
          for (let i3 = start; i3 < c3.length && len > 0; i3++) {
            cs.push(c3[i3]);
            len--;
          }
          start = 0;
        }
      }
      n2 = n2.right;
    }
    return cs;
  };
  var typeListToArray = (type) => {
    const cs = [];
    let n2 = type._start;
    while (n2 !== null) {
      if (n2.countable && !n2.deleted) {
        const c3 = n2.content.getContent();
        for (let i3 = 0; i3 < c3.length; i3++) {
          cs.push(c3[i3]);
        }
      }
      n2 = n2.right;
    }
    return cs;
  };
  var typeListForEach = (type, f5) => {
    let index = 0;
    let n2 = type._start;
    while (n2 !== null) {
      if (n2.countable && !n2.deleted) {
        const c3 = n2.content.getContent();
        for (let i3 = 0; i3 < c3.length; i3++) {
          f5(c3[i3], index++, type);
        }
      }
      n2 = n2.right;
    }
  };
  var typeListMap = (type, f5) => {
    const result = [];
    typeListForEach(type, (c3, i3) => {
      result.push(f5(c3, i3, type));
    });
    return result;
  };
  var typeListInsertGenericsAfter = (transaction, parent, referenceItem, content) => {
    let left = referenceItem;
    const doc3 = transaction.doc;
    const ownClientId = doc3.clientID;
    const store2 = doc3.store;
    const right = referenceItem === null ? parent._start : referenceItem.right;
    let jsonContent = [];
    const packJsonContent = () => {
      if (jsonContent.length > 0) {
        left = new Item(createID(ownClientId, getState(store2, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentAny(jsonContent));
        left.integrate(transaction, 0);
        jsonContent = [];
      }
    };
    content.forEach((c3) => {
      if (c3 === null) {
        jsonContent.push(c3);
      } else {
        switch (c3.constructor) {
          case Number:
          case Object:
          case Boolean:
          case Array:
          case String:
            jsonContent.push(c3);
            break;
          default:
            packJsonContent();
            switch (c3.constructor) {
              case Uint8Array:
              case ArrayBuffer:
                left = new Item(createID(ownClientId, getState(store2, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentBinary(new Uint8Array(c3)));
                left.integrate(transaction, 0);
                break;
              case Doc:
                left = new Item(createID(ownClientId, getState(store2, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentDoc(c3));
                left.integrate(transaction, 0);
                break;
              default:
                if (c3 instanceof AbstractType) {
                  left = new Item(createID(ownClientId, getState(store2, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentType(c3));
                  left.integrate(transaction, 0);
                } else {
                  throw new Error("Unexpected content type in insert operation");
                }
            }
        }
      }
    });
    packJsonContent();
  };
  var typeMapDelete = (transaction, parent, key) => {
    const c3 = parent._map.get(key);
    if (c3 !== void 0) {
      c3.delete(transaction);
    }
  };
  var typeMapSet = (transaction, parent, key, value) => {
    const left = parent._map.get(key) || null;
    const doc3 = transaction.doc;
    const ownClientId = doc3.clientID;
    let content;
    if (value == null) {
      content = new ContentAny([value]);
    } else {
      switch (value.constructor) {
        case Number:
        case Object:
        case Boolean:
        case Array:
        case String:
          content = new ContentAny([value]);
          break;
        case Uint8Array:
          content = new ContentBinary(value);
          break;
        case Doc:
          content = new ContentDoc(value);
          break;
        default:
          if (value instanceof AbstractType) {
            content = new ContentType(value);
          } else {
            throw new Error("Unexpected content type");
          }
      }
    }
    new Item(createID(ownClientId, getState(doc3.store, ownClientId)), left, left && left.lastId, null, null, parent, key, content).integrate(transaction, 0);
  };
  var typeMapGet = (parent, key) => {
    const val = parent._map.get(key);
    return val !== void 0 && !val.deleted ? val.content.getContent()[val.length - 1] : void 0;
  };
  var typeMapGetAll = (parent) => {
    const res = {};
    parent._map.forEach((value, key) => {
      if (!value.deleted) {
        res[key] = value.content.getContent()[value.length - 1];
      }
    });
    return res;
  };
  var typeMapHas = (parent, key) => {
    const val = parent._map.get(key);
    return val !== void 0 && !val.deleted;
  };
  var createMapIterator = (map10) => iteratorFilter(map10.entries(), (entry) => !entry[1].deleted);
  var YArrayEvent = class extends YEvent {
    constructor(yarray, transaction) {
      super(yarray, transaction);
      this._transaction = transaction;
    }
  };
  var YArray = class extends AbstractType {
    constructor() {
      super();
      this._prelimContent = [];
      this._searchMarker = [];
    }
    static from(items) {
      const a3 = new YArray();
      a3.push(items);
      return a3;
    }
    _integrate(y2, item) {
      super._integrate(y2, item);
      this.insert(0, this._prelimContent);
      this._prelimContent = null;
    }
    _copy() {
      return new YArray();
    }
    clone() {
      const arr = new YArray();
      arr.insert(0, this.toArray().map((el) => el instanceof AbstractType ? el.clone() : el));
      return arr;
    }
    get length() {
      return this._prelimContent === null ? this._length : this._prelimContent.length;
    }
    _callObserver(transaction, parentSubs) {
      super._callObserver(transaction, parentSubs);
      callTypeObservers(this, transaction, new YArrayEvent(this, transaction));
    }
    insert(index, content) {
      if (content.length > 0) {
        if (this.doc !== null) {
          transact(this.doc, (transaction) => {
            useSearchMarker(transaction, this, index, (walker) => walker.insertArrayValue(transaction, content));
          });
        } else {
          this._prelimContent.splice(index, 0, ...content);
        }
      }
    }
    move(index, target) {
      if (index === target || index + 1 === target || index >= this.length) {
        return;
      }
      if (this.doc !== null) {
        transact(this.doc, (transaction) => {
          const left = createRelativePositionFromTypeIndex(this, index, 1);
          const right = left.clone();
          right.assoc = -1;
          useSearchMarker(transaction, this, target, (walker) => {
            walker.insertMove(transaction, left, right);
          });
        });
      } else {
        const content = this._prelimContent.splice(index, 1);
        this._prelimContent.splice(target, 0, ...content);
      }
    }
    moveRange(start, end, target, assocStart = 1, assocEnd = -1) {
      if (start <= target && target <= end) {
        return;
      }
      if (this.doc !== null) {
        transact(this.doc, (transaction) => {
          const left = createRelativePositionFromTypeIndex(this, start, assocStart);
          const right = createRelativePositionFromTypeIndex(this, end + 1, assocEnd);
          useSearchMarker(transaction, this, target, (walker) => {
            walker.insertMove(transaction, left, right);
          });
        });
      } else {
        const content = this._prelimContent.splice(start, end - start + 1);
        this._prelimContent.splice(target, 0, ...content);
      }
    }
    push(content) {
      this.insert(this.length, content);
    }
    unshift(content) {
      this.insert(0, content);
    }
    delete(index, length3 = 1) {
      if (this.doc !== null) {
        transact(this.doc, (transaction) => {
          useSearchMarker(transaction, this, index, (walker) => walker.delete(transaction, length3));
        });
      } else {
        this._prelimContent.splice(index, length3);
      }
    }
    get(index) {
      return transact(this.doc, (transaction) => useSearchMarker(transaction, this, index, (walker) => walker.slice(transaction, 1)[0]));
    }
    toArray() {
      return transact(this.doc, (tr2) => new ListIterator(this).slice(tr2, this.length));
    }
    slice(start = 0, end = this.length) {
      return transact(this.doc, (transaction) => useSearchMarker(transaction, this, start, (walker) => walker.slice(transaction, end < 0 ? this.length + end - start : end - start)));
    }
    toJSON() {
      return this.map((c3) => c3 instanceof AbstractType ? c3.toJSON() : c3);
    }
    map(f5) {
      return transact(this.doc, (tr2) => new ListIterator(this).map(tr2, f5));
    }
    forEach(f5) {
      return transact(this.doc, (tr2) => new ListIterator(this).forEach(tr2, f5));
    }
    [Symbol.iterator]() {
      return this.toArray().values();
    }
    _write(encoder) {
      encoder.writeTypeRef(YArrayRefID);
    }
  };
  var readYArray = (decoder) => new YArray();
  var YMapEvent = class extends YEvent {
    constructor(ymap, transaction, subs) {
      super(ymap, transaction);
      this.keysChanged = subs;
    }
  };
  var YMap = class extends AbstractType {
    constructor(entries) {
      super();
      this._prelimContent = null;
      if (entries === void 0) {
        this._prelimContent = new Map();
      } else {
        this._prelimContent = new Map(entries);
      }
    }
    _integrate(y2, item) {
      super._integrate(y2, item);
      this._prelimContent.forEach((value, key) => {
        this.set(key, value);
      });
      this._prelimContent = null;
    }
    _copy() {
      return new YMap();
    }
    clone() {
      const map10 = new YMap();
      this.forEach((value, key) => {
        map10.set(key, value instanceof AbstractType ? value.clone() : value);
      });
      return map10;
    }
    _callObserver(transaction, parentSubs) {
      callTypeObservers(this, transaction, new YMapEvent(this, transaction, parentSubs));
    }
    toJSON() {
      const map10 = {};
      this._map.forEach((item, key) => {
        if (!item.deleted) {
          const v3 = item.content.getContent()[item.length - 1];
          map10[key] = v3 instanceof AbstractType ? v3.toJSON() : v3;
        }
      });
      return map10;
    }
    get size() {
      return [...createMapIterator(this._map)].length;
    }
    keys() {
      return iteratorMap(createMapIterator(this._map), (v3) => v3[0]);
    }
    values() {
      return iteratorMap(createMapIterator(this._map), (v3) => v3[1].content.getContent()[v3[1].length - 1]);
    }
    entries() {
      return iteratorMap(createMapIterator(this._map), (v3) => [v3[0], v3[1].content.getContent()[v3[1].length - 1]]);
    }
    forEach(f5) {
      const map10 = {};
      this._map.forEach((item, key) => {
        if (!item.deleted) {
          f5(item.content.getContent()[item.length - 1], key, this);
        }
      });
      return map10;
    }
    [Symbol.iterator]() {
      return this.entries();
    }
    delete(key) {
      if (this.doc !== null) {
        transact(this.doc, (transaction) => {
          typeMapDelete(transaction, this, key);
        });
      } else {
        this._prelimContent.delete(key);
      }
    }
    set(key, value) {
      if (this.doc !== null) {
        transact(this.doc, (transaction) => {
          typeMapSet(transaction, this, key, value);
        });
      } else {
        this._prelimContent.set(key, value);
      }
      return value;
    }
    get(key) {
      return typeMapGet(this, key);
    }
    has(key) {
      return typeMapHas(this, key);
    }
    clear() {
      if (this.doc !== null) {
        transact(this.doc, (transaction) => {
          this.forEach(function(value, key, map10) {
            typeMapDelete(transaction, map10, key);
          });
        });
      } else {
        this._prelimContent.clear();
      }
    }
    _write(encoder) {
      encoder.writeTypeRef(YMapRefID);
    }
  };
  var readYMap = (decoder) => new YMap();
  var equalAttrs = (a3, b3) => a3 === b3 || typeof a3 === "object" && typeof b3 === "object" && a3 && b3 && equalFlat(a3, b3);
  var ItemTextListPosition = class {
    constructor(left, right, index, currentAttributes) {
      this.left = left;
      this.right = right;
      this.index = index;
      this.currentAttributes = currentAttributes;
    }
    forward() {
      if (this.right === null) {
        unexpectedCase();
      }
      switch (this.right.content.constructor) {
        case ContentFormat:
          if (!this.right.deleted) {
            updateCurrentAttributes(this.currentAttributes, this.right.content);
          }
          break;
        default:
          if (!this.right.deleted) {
            this.index += this.right.length;
          }
          break;
      }
      this.left = this.right;
      this.right = this.right.right;
    }
  };
  var findNextPosition = (transaction, pos, count) => {
    while (pos.right !== null && count > 0) {
      switch (pos.right.content.constructor) {
        case ContentFormat:
          if (!pos.right.deleted) {
            updateCurrentAttributes(pos.currentAttributes, pos.right.content);
          }
          break;
        default:
          if (!pos.right.deleted) {
            if (count < pos.right.length) {
              getItemCleanStart(transaction, createID(pos.right.id.client, pos.right.id.clock + count));
            }
            pos.index += pos.right.length;
            count -= pos.right.length;
          }
          break;
      }
      pos.left = pos.right;
      pos.right = pos.right.right;
    }
    return pos;
  };
  var findPosition = (transaction, parent, index) => {
    const currentAttributes = new Map();
    if (parent._searchMarker) {
      return useSearchMarker(transaction, parent, index, (listIter) => {
        let left, right;
        if (listIter.rel > 0) {
          const nextItem = listIter.nextItem;
          if (listIter.rel === nextItem.length) {
            left = nextItem;
            right = left.right;
          } else {
            const structs = transaction.doc.store.clients.get(nextItem.id.client);
            const after = structs[findIndexCleanStart(transaction, structs, nextItem.id.clock + listIter.rel)];
            listIter.nextItem = after;
            listIter.rel = 0;
            left = listIter.left;
            right = listIter.right;
          }
        } else {
          left = listIter.left;
          right = listIter.right;
        }
        return new ItemTextListPosition(left, right, index, currentAttributes);
      });
    } else {
      const pos = new ItemTextListPosition(null, parent._start, 0, currentAttributes);
      return findNextPosition(transaction, pos, index);
    }
  };
  var insertNegatedAttributes = (transaction, parent, currPos, negatedAttributes) => {
    while (currPos.right !== null && (currPos.right.deleted === true || currPos.right.content.constructor === ContentFormat && equalAttrs(negatedAttributes.get(currPos.right.content.key), currPos.right.content.value))) {
      if (!currPos.right.deleted) {
        negatedAttributes.delete(currPos.right.content.key);
      }
      currPos.forward();
    }
    const doc3 = transaction.doc;
    const ownClientId = doc3.clientID;
    negatedAttributes.forEach((val, key) => {
      const left = currPos.left;
      const right = currPos.right;
      const nextFormat = new Item(createID(ownClientId, getState(doc3.store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentFormat(key, val));
      nextFormat.integrate(transaction, 0);
      currPos.right = nextFormat;
      currPos.forward();
    });
  };
  var updateCurrentAttributes = (currentAttributes, format) => {
    const { key, value } = format;
    if (value === null) {
      currentAttributes.delete(key);
    } else {
      currentAttributes.set(key, value);
    }
  };
  var minimizeAttributeChanges = (currPos, attributes) => {
    while (true) {
      if (currPos.right === null) {
        break;
      } else if (currPos.right.deleted || currPos.right.content.constructor === ContentFormat && equalAttrs(attributes[currPos.right.content.key] || null, currPos.right.content.value))
        ;
      else {
        break;
      }
      currPos.forward();
    }
  };
  var insertAttributes = (transaction, parent, currPos, attributes) => {
    const doc3 = transaction.doc;
    const ownClientId = doc3.clientID;
    const negatedAttributes = new Map();
    for (const key in attributes) {
      const val = attributes[key];
      const currentVal = currPos.currentAttributes.get(key) || null;
      if (!equalAttrs(currentVal, val)) {
        negatedAttributes.set(key, currentVal);
        const { left, right } = currPos;
        currPos.right = new Item(createID(ownClientId, getState(doc3.store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentFormat(key, val));
        currPos.right.integrate(transaction, 0);
        currPos.forward();
      }
    }
    return negatedAttributes;
  };
  var insertText = (transaction, parent, currPos, text2, attributes) => {
    currPos.currentAttributes.forEach((val, key) => {
      if (attributes[key] === void 0) {
        attributes[key] = null;
      }
    });
    const doc3 = transaction.doc;
    const ownClientId = doc3.clientID;
    minimizeAttributeChanges(currPos, attributes);
    const negatedAttributes = insertAttributes(transaction, parent, currPos, attributes);
    const content = text2.constructor === String ? new ContentString(text2) : text2 instanceof AbstractType ? new ContentType(text2) : new ContentEmbed(text2);
    let { left, right, index } = currPos;
    if (parent._searchMarker) {
      updateMarkerChanges(parent._searchMarker, currPos.index, content.getLength(), null);
    }
    right = new Item(createID(ownClientId, getState(doc3.store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, content);
    right.integrate(transaction, 0);
    currPos.right = right;
    currPos.index = index;
    currPos.forward();
    insertNegatedAttributes(transaction, parent, currPos, negatedAttributes);
  };
  var formatText = (transaction, parent, currPos, length3, attributes) => {
    const doc3 = transaction.doc;
    const ownClientId = doc3.clientID;
    minimizeAttributeChanges(currPos, attributes);
    const negatedAttributes = insertAttributes(transaction, parent, currPos, attributes);
    while (length3 > 0 && currPos.right !== null) {
      if (!currPos.right.deleted) {
        switch (currPos.right.content.constructor) {
          case ContentFormat: {
            const { key, value } = currPos.right.content;
            const attr = attributes[key];
            if (attr !== void 0) {
              if (equalAttrs(attr, value)) {
                negatedAttributes.delete(key);
              } else {
                negatedAttributes.set(key, value);
              }
              currPos.right.delete(transaction);
            }
            break;
          }
          default:
            if (length3 < currPos.right.length) {
              getItemCleanStart(transaction, createID(currPos.right.id.client, currPos.right.id.clock + length3));
            }
            length3 -= currPos.right.length;
            break;
        }
      }
      currPos.forward();
    }
    if (length3 > 0) {
      let newlines = "";
      for (; length3 > 0; length3--) {
        newlines += "\n";
      }
      currPos.right = new Item(createID(ownClientId, getState(doc3.store, ownClientId)), currPos.left, currPos.left && currPos.left.lastId, currPos.right, currPos.right && currPos.right.id, parent, null, new ContentString(newlines));
      currPos.right.integrate(transaction, 0);
      currPos.forward();
    }
    insertNegatedAttributes(transaction, parent, currPos, negatedAttributes);
  };
  var cleanupFormattingGap = (transaction, start, end, startAttributes, endAttributes) => {
    while (end && (!end.countable || end.deleted)) {
      if (!end.deleted && end.content.constructor === ContentFormat) {
        updateCurrentAttributes(endAttributes, end.content);
      }
      end = end.right;
    }
    let cleanups = 0;
    while (start !== end) {
      if (!start.deleted) {
        const content = start.content;
        switch (content.constructor) {
          case ContentFormat: {
            const { key, value } = content;
            if ((endAttributes.get(key) || null) !== value || (startAttributes.get(key) || null) === value) {
              start.delete(transaction);
              cleanups++;
            }
            break;
          }
        }
      }
      start = start.right;
    }
    return cleanups;
  };
  var cleanupContextlessFormattingGap = (transaction, item) => {
    while (item && item.right && (item.right.deleted || !item.right.countable)) {
      item = item.right;
    }
    const attrs = new Set();
    while (item && (item.deleted || !item.countable)) {
      if (!item.deleted && item.content.constructor === ContentFormat) {
        const key = item.content.key;
        if (attrs.has(key)) {
          item.delete(transaction);
        } else {
          attrs.add(key);
        }
      }
      item = item.left;
    }
  };
  var cleanupYTextFormatting = (type) => {
    let res = 0;
    transact(type.doc, (transaction) => {
      let start = type._start;
      let end = type._start;
      let startAttributes = create2();
      const currentAttributes = copy(startAttributes);
      while (end) {
        if (end.deleted === false) {
          switch (end.content.constructor) {
            case ContentFormat:
              updateCurrentAttributes(currentAttributes, end.content);
              break;
            default:
              res += cleanupFormattingGap(transaction, start, end, startAttributes, currentAttributes);
              startAttributes = copy(currentAttributes);
              start = end;
              break;
          }
        }
        end = end.right;
      }
    });
    return res;
  };
  var deleteText = (transaction, currPos, length3) => {
    const startLength = length3;
    const startAttrs = copy(currPos.currentAttributes);
    const start = currPos.right;
    while (length3 > 0 && currPos.right !== null) {
      if (currPos.right.deleted === false) {
        switch (currPos.right.content.constructor) {
          case ContentType:
          case ContentEmbed:
          case ContentString:
            if (length3 < currPos.right.length) {
              getItemCleanStart(transaction, createID(currPos.right.id.client, currPos.right.id.clock + length3));
            }
            length3 -= currPos.right.length;
            currPos.right.delete(transaction);
            break;
        }
      }
      currPos.forward();
    }
    if (start) {
      cleanupFormattingGap(transaction, start, currPos.right, startAttrs, copy(currPos.currentAttributes));
    }
    const parent = (currPos.left || currPos.right).parent;
    if (parent._searchMarker) {
      updateMarkerChanges(parent._searchMarker, currPos.index, -startLength + length3, null);
    }
    return currPos;
  };
  var YTextEvent = class extends YEvent {
    constructor(ytext, transaction, subs) {
      super(ytext, transaction);
      this.childListChanged = false;
      this.keysChanged = new Set();
      subs.forEach((sub) => {
        if (sub === null) {
          this.childListChanged = true;
        } else {
          this.keysChanged.add(sub);
        }
      });
    }
    get changes() {
      if (this._changes === null) {
        const changes = {
          keys: this.keys,
          delta: this.delta,
          added: new Set(),
          deleted: new Set()
        };
        this._changes = changes;
      }
      return this._changes;
    }
    get delta() {
      if (this._delta === null) {
        const y2 = this.target.doc;
        const delta = [];
        transact(y2, (transaction) => {
          const currentAttributes = new Map();
          const oldAttributes = new Map();
          let item = this.target._start;
          let action = null;
          const attributes = {};
          let insert = "";
          let retain = 0;
          let deleteLen = 0;
          const addOp = () => {
            if (action !== null) {
              let op;
              switch (action) {
                case "delete":
                  op = { delete: deleteLen };
                  deleteLen = 0;
                  break;
                case "insert":
                  op = { insert };
                  if (currentAttributes.size > 0) {
                    op.attributes = {};
                    currentAttributes.forEach((value, key) => {
                      if (value !== null) {
                        op.attributes[key] = value;
                      }
                    });
                  }
                  insert = "";
                  break;
                case "retain":
                  op = { retain };
                  if (Object.keys(attributes).length > 0) {
                    op.attributes = {};
                    for (const key in attributes) {
                      op.attributes[key] = attributes[key];
                    }
                  }
                  retain = 0;
                  break;
              }
              delta.push(op);
              action = null;
            }
          };
          while (item !== null) {
            switch (item.content.constructor) {
              case ContentType:
              case ContentEmbed:
                if (this.adds(item)) {
                  if (!this.deletes(item)) {
                    addOp();
                    action = "insert";
                    insert = item.content.getContent()[0];
                    addOp();
                  }
                } else if (this.deletes(item)) {
                  if (action !== "delete") {
                    addOp();
                    action = "delete";
                  }
                  deleteLen += 1;
                } else if (!item.deleted) {
                  if (action !== "retain") {
                    addOp();
                    action = "retain";
                  }
                  retain += 1;
                }
                break;
              case ContentString:
                if (this.adds(item)) {
                  if (!this.deletes(item)) {
                    if (action !== "insert") {
                      addOp();
                      action = "insert";
                    }
                    insert += item.content.str;
                  }
                } else if (this.deletes(item)) {
                  if (action !== "delete") {
                    addOp();
                    action = "delete";
                  }
                  deleteLen += item.length;
                } else if (!item.deleted) {
                  if (action !== "retain") {
                    addOp();
                    action = "retain";
                  }
                  retain += item.length;
                }
                break;
              case ContentFormat: {
                const { key, value } = item.content;
                if (this.adds(item)) {
                  if (!this.deletes(item)) {
                    const curVal = currentAttributes.get(key) || null;
                    if (!equalAttrs(curVal, value)) {
                      if (action === "retain") {
                        addOp();
                      }
                      if (equalAttrs(value, oldAttributes.get(key) || null)) {
                        delete attributes[key];
                      } else {
                        attributes[key] = value;
                      }
                    } else {
                      item.delete(transaction);
                    }
                  }
                } else if (this.deletes(item)) {
                  oldAttributes.set(key, value);
                  const curVal = currentAttributes.get(key) || null;
                  if (!equalAttrs(curVal, value)) {
                    if (action === "retain") {
                      addOp();
                    }
                    attributes[key] = curVal;
                  }
                } else if (!item.deleted) {
                  oldAttributes.set(key, value);
                  const attr = attributes[key];
                  if (attr !== void 0) {
                    if (!equalAttrs(attr, value)) {
                      if (action === "retain") {
                        addOp();
                      }
                      if (value === null) {
                        delete attributes[key];
                      } else {
                        attributes[key] = value;
                      }
                    } else {
                      item.delete(transaction);
                    }
                  }
                }
                if (!item.deleted) {
                  if (action === "insert") {
                    addOp();
                  }
                  updateCurrentAttributes(currentAttributes, item.content);
                }
                break;
              }
            }
            item = item.right;
          }
          addOp();
          while (delta.length > 0) {
            const lastOp = delta[delta.length - 1];
            if (lastOp.retain !== void 0 && lastOp.attributes === void 0) {
              delta.pop();
            } else {
              break;
            }
          }
        });
        this._delta = delta;
      }
      return this._delta;
    }
  };
  var YText = class extends AbstractType {
    constructor(string5) {
      super();
      this._pending = string5 !== void 0 ? [() => this.insert(0, string5)] : [];
      this._searchMarker = [];
    }
    get length() {
      return this._length;
    }
    _integrate(y2, item) {
      super._integrate(y2, item);
      try {
        this._pending.forEach((f5) => f5());
      } catch (e4) {
        console.error(e4);
      }
      this._pending = null;
    }
    _copy() {
      return new YText();
    }
    clone() {
      const text2 = new YText();
      text2.applyDelta(this.toDelta());
      return text2;
    }
    _callObserver(transaction, parentSubs) {
      super._callObserver(transaction, parentSubs);
      const event = new YTextEvent(this, transaction, parentSubs);
      const doc3 = transaction.doc;
      callTypeObservers(this, transaction, event);
      if (!transaction.local) {
        let foundFormattingItem = false;
        for (const [client, afterClock] of transaction.afterState.entries()) {
          const clock = transaction.beforeState.get(client) || 0;
          if (afterClock === clock) {
            continue;
          }
          iterateStructs(transaction, doc3.store.clients.get(client), clock, afterClock, (item) => {
            if (!item.deleted && item.content.constructor === ContentFormat) {
              foundFormattingItem = true;
            }
          });
          if (foundFormattingItem) {
            break;
          }
        }
        if (!foundFormattingItem) {
          iterateDeletedStructs(transaction, transaction.deleteSet, (item) => {
            if (item instanceof GC || foundFormattingItem) {
              return;
            }
            if (item.parent === this && item.content.constructor === ContentFormat) {
              foundFormattingItem = true;
            }
          });
        }
        transact(doc3, (t4) => {
          if (foundFormattingItem) {
            cleanupYTextFormatting(this);
          } else {
            iterateDeletedStructs(t4, t4.deleteSet, (item) => {
              if (item instanceof GC) {
                return;
              }
              if (item.parent === this) {
                cleanupContextlessFormattingGap(t4, item);
              }
            });
          }
        });
      }
    }
    toString() {
      let str = "";
      let n2 = this._start;
      while (n2 !== null) {
        if (!n2.deleted && n2.countable && n2.content.constructor === ContentString) {
          str += n2.content.str;
        }
        n2 = n2.right;
      }
      return str;
    }
    toJSON() {
      return this.toString();
    }
    applyDelta(delta, { sanitize = true } = {}) {
      if (this.doc !== null) {
        transact(this.doc, (transaction) => {
          const currPos = new ItemTextListPosition(null, this._start, 0, new Map());
          for (let i3 = 0; i3 < delta.length; i3++) {
            const op = delta[i3];
            if (op.insert !== void 0) {
              const ins = !sanitize && typeof op.insert === "string" && i3 === delta.length - 1 && currPos.right === null && op.insert.slice(-1) === "\n" ? op.insert.slice(0, -1) : op.insert;
              if (typeof ins !== "string" || ins.length > 0) {
                insertText(transaction, this, currPos, ins, op.attributes || {});
              }
            } else if (op.retain !== void 0) {
              formatText(transaction, this, currPos, op.retain, op.attributes || {});
            } else if (op.delete !== void 0) {
              deleteText(transaction, currPos, op.delete);
            }
          }
        });
      } else {
        this._pending.push(() => this.applyDelta(delta));
      }
    }
    toDelta(snapshot2, prevSnapshot, computeYChange) {
      const ops = [];
      const currentAttributes = new Map();
      const doc3 = this.doc;
      let str = "";
      let n2 = this._start;
      function packStr() {
        if (str.length > 0) {
          const attributes = {};
          let addAttributes = false;
          currentAttributes.forEach((value, key) => {
            addAttributes = true;
            attributes[key] = value;
          });
          const op = { insert: str };
          if (addAttributes) {
            op.attributes = attributes;
          }
          ops.push(op);
          str = "";
        }
      }
      transact(doc3, (transaction) => {
        if (snapshot2) {
          splitSnapshotAffectedStructs(transaction, snapshot2);
        }
        if (prevSnapshot) {
          splitSnapshotAffectedStructs(transaction, prevSnapshot);
        }
        while (n2 !== null) {
          if (isVisible(n2, snapshot2) || prevSnapshot !== void 0 && isVisible(n2, prevSnapshot)) {
            switch (n2.content.constructor) {
              case ContentString: {
                const cur = currentAttributes.get("ychange");
                if (snapshot2 !== void 0 && !isVisible(n2, snapshot2)) {
                  if (cur === void 0 || cur.user !== n2.id.client || cur.state !== "removed") {
                    packStr();
                    currentAttributes.set("ychange", computeYChange ? computeYChange("removed", n2.id) : { type: "removed" });
                  }
                } else if (prevSnapshot !== void 0 && !isVisible(n2, prevSnapshot)) {
                  if (cur === void 0 || cur.user !== n2.id.client || cur.state !== "added") {
                    packStr();
                    currentAttributes.set("ychange", computeYChange ? computeYChange("added", n2.id) : { type: "added" });
                  }
                } else if (cur !== void 0) {
                  packStr();
                  currentAttributes.delete("ychange");
                }
                str += n2.content.str;
                break;
              }
              case ContentType:
              case ContentEmbed: {
                packStr();
                const op = {
                  insert: n2.content.getContent()[0]
                };
                if (currentAttributes.size > 0) {
                  const attrs = {};
                  op.attributes = attrs;
                  currentAttributes.forEach((value, key) => {
                    attrs[key] = value;
                  });
                }
                ops.push(op);
                break;
              }
              case ContentFormat:
                if (isVisible(n2, snapshot2)) {
                  packStr();
                  updateCurrentAttributes(currentAttributes, n2.content);
                }
                break;
            }
          }
          n2 = n2.right;
        }
        packStr();
      }, splitSnapshotAffectedStructs);
      return ops;
    }
    insert(index, text2, attributes) {
      if (text2.length <= 0) {
        return;
      }
      const y2 = this.doc;
      if (y2 !== null) {
        transact(y2, (transaction) => {
          const pos = findPosition(transaction, this, index);
          if (!attributes) {
            attributes = {};
            pos.currentAttributes.forEach((v3, k3) => {
              attributes[k3] = v3;
            });
          }
          insertText(transaction, this, pos, text2, attributes);
        });
      } else {
        this._pending.push(() => this.insert(index, text2, attributes));
      }
    }
    insertEmbed(index, embed, attributes = {}) {
      const y2 = this.doc;
      if (y2 !== null) {
        transact(y2, (transaction) => {
          const pos = findPosition(transaction, this, index);
          insertText(transaction, this, pos, embed, attributes);
        });
      } else {
        this._pending.push(() => this.insertEmbed(index, embed, attributes));
      }
    }
    delete(index, length3) {
      if (length3 === 0) {
        return;
      }
      const y2 = this.doc;
      if (y2 !== null) {
        transact(y2, (transaction) => {
          deleteText(transaction, findPosition(transaction, this, index), length3);
        });
      } else {
        this._pending.push(() => this.delete(index, length3));
      }
    }
    format(index, length3, attributes) {
      if (length3 === 0) {
        return;
      }
      const y2 = this.doc;
      if (y2 !== null) {
        transact(y2, (transaction) => {
          const pos = findPosition(transaction, this, index);
          if (pos.right === null) {
            return;
          }
          formatText(transaction, this, pos, length3, attributes);
        });
      } else {
        this._pending.push(() => this.format(index, length3, attributes));
      }
    }
    removeAttribute(attributeName) {
      if (this.doc !== null) {
        transact(this.doc, (transaction) => {
          typeMapDelete(transaction, this, attributeName);
        });
      } else {
        this._pending.push(() => this.removeAttribute(attributeName));
      }
    }
    setAttribute(attributeName, attributeValue) {
      if (this.doc !== null) {
        transact(this.doc, (transaction) => {
          typeMapSet(transaction, this, attributeName, attributeValue);
        });
      } else {
        this._pending.push(() => this.setAttribute(attributeName, attributeValue));
      }
    }
    getAttribute(attributeName) {
      return typeMapGet(this, attributeName);
    }
    getAttributes(snapshot2) {
      return typeMapGetAll(this);
    }
    _write(encoder) {
      encoder.writeTypeRef(YTextRefID);
    }
  };
  var readYText = (decoder) => new YText();
  var YXmlTreeWalker = class {
    constructor(root, f5 = () => true) {
      this._filter = f5;
      this._root = root;
      this._currentNode = root._start;
      this._firstCall = true;
    }
    [Symbol.iterator]() {
      return this;
    }
    next() {
      let n2 = this._currentNode;
      let type = n2 && n2.content && n2.content.type;
      if (n2 !== null && (!this._firstCall || n2.deleted || !this._filter(type))) {
        do {
          type = n2.content.type;
          if (!n2.deleted && (type.constructor === YXmlElement || type.constructor === YXmlFragment) && type._start !== null) {
            n2 = type._start;
          } else {
            while (n2 !== null) {
              if (n2.right !== null) {
                n2 = n2.right;
                break;
              } else if (n2.parent === this._root) {
                n2 = null;
              } else {
                n2 = n2.parent._item;
              }
            }
          }
        } while (n2 !== null && (n2.deleted || !this._filter(n2.content.type)));
      }
      this._firstCall = false;
      if (n2 === null) {
        return { value: void 0, done: true };
      }
      this._currentNode = n2;
      return { value: n2.content.type, done: false };
    }
  };
  var YXmlFragment = class extends AbstractType {
    constructor() {
      super();
      this._prelimContent = [];
    }
    get firstChild() {
      const first = this._first;
      return first ? first.content.getContent()[0] : null;
    }
    _integrate(y2, item) {
      super._integrate(y2, item);
      this.insert(0, this._prelimContent);
      this._prelimContent = null;
    }
    _copy() {
      return new YXmlFragment();
    }
    clone() {
      const el = new YXmlFragment();
      el.insert(0, this.toArray().map((item) => item instanceof AbstractType ? item.clone() : item));
      return el;
    }
    get length() {
      return this._prelimContent === null ? this._length : this._prelimContent.length;
    }
    createTreeWalker(filter) {
      return new YXmlTreeWalker(this, filter);
    }
    querySelector(query) {
      query = query.toUpperCase();
      const iterator2 = new YXmlTreeWalker(this, (element2) => element2.nodeName && element2.nodeName.toUpperCase() === query);
      const next2 = iterator2.next();
      if (next2.done) {
        return null;
      } else {
        return next2.value;
      }
    }
    querySelectorAll(query) {
      query = query.toUpperCase();
      return Array.from(new YXmlTreeWalker(this, (element2) => element2.nodeName && element2.nodeName.toUpperCase() === query));
    }
    _callObserver(transaction, parentSubs) {
      callTypeObservers(this, transaction, new YXmlEvent(this, parentSubs, transaction));
    }
    toString() {
      return typeListMap(this, (xml) => xml.toString()).join("");
    }
    toJSON() {
      return this.toString();
    }
    toDOM(_document = document, hooks = {}, binding) {
      const fragment = _document.createDocumentFragment();
      if (binding !== void 0) {
        binding._createAssociation(fragment, this);
      }
      typeListForEach(this, (xmlType) => {
        fragment.insertBefore(xmlType.toDOM(_document, hooks, binding), null);
      });
      return fragment;
    }
    insert(index, content) {
      if (this.doc !== null) {
        return transact(this.doc, (transaction) => useSearchMarker(transaction, this, index, (walker) => walker.insertArrayValue(transaction, content)));
      } else {
        this._prelimContent.splice(index, 0, ...content);
      }
    }
    insertAfter(ref, content) {
      if (this.doc !== null) {
        transact(this.doc, (transaction) => {
          const refItem = ref && ref instanceof AbstractType ? ref._item : ref;
          typeListInsertGenericsAfter(transaction, this, refItem, content);
        });
      } else {
        const pc = this._prelimContent;
        const index = ref === null ? 0 : pc.findIndex((el) => el === ref) + 1;
        if (index === 0 && ref !== null) {
          throw create5("Reference item not found");
        }
        pc.splice(index, 0, ...content);
      }
    }
    delete(index, length3 = 1) {
      if (this.doc !== null) {
        transact(this.doc, (transaction) => useSearchMarker(transaction, this, index, (walker) => walker.delete(transaction, length3)));
      } else {
        this._prelimContent.splice(index, length3);
      }
    }
    toArray() {
      return typeListToArray(this);
    }
    push(content) {
      this.insert(this.length, content);
    }
    unshift(content) {
      this.insert(0, content);
    }
    get(index) {
      return transact(this.doc, (transaction) => useSearchMarker(transaction, this, index, (walker) => walker.slice(transaction, 1)[0]));
    }
    slice(start = 0, end = this.length) {
      return typeListSlice(this, start, end);
    }
    _write(encoder) {
      encoder.writeTypeRef(YXmlFragmentRefID);
    }
  };
  var readYXmlFragment = (decoder) => new YXmlFragment();
  var YXmlElement = class extends YXmlFragment {
    constructor(nodeName = "UNDEFINED") {
      super();
      this.nodeName = nodeName;
      this._prelimAttrs = new Map();
    }
    get nextSibling() {
      const n2 = this._item ? this._item.next : null;
      return n2 ? n2.content.type : null;
    }
    get prevSibling() {
      const n2 = this._item ? this._item.prev : null;
      return n2 ? n2.content.type : null;
    }
    _integrate(y2, item) {
      super._integrate(y2, item);
      this._prelimAttrs.forEach((value, key) => {
        this.setAttribute(key, value);
      });
      this._prelimAttrs = null;
    }
    _copy() {
      return new YXmlElement(this.nodeName);
    }
    clone() {
      const el = new YXmlElement(this.nodeName);
      const attrs = this.getAttributes();
      for (const key in attrs) {
        el.setAttribute(key, attrs[key]);
      }
      el.insert(0, this.toArray().map((item) => item instanceof AbstractType ? item.clone() : item));
      return el;
    }
    toString() {
      const attrs = this.getAttributes();
      const stringBuilder = [];
      const keys5 = [];
      for (const key in attrs) {
        keys5.push(key);
      }
      keys5.sort();
      const keysLen = keys5.length;
      for (let i3 = 0; i3 < keysLen; i3++) {
        const key = keys5[i3];
        stringBuilder.push(key + '="' + attrs[key] + '"');
      }
      const nodeName = this.nodeName.toLocaleLowerCase();
      const attrsString = stringBuilder.length > 0 ? " " + stringBuilder.join(" ") : "";
      return `<${nodeName}${attrsString}>${super.toString()}</${nodeName}>`;
    }
    removeAttribute(attributeName) {
      if (this.doc !== null) {
        transact(this.doc, (transaction) => {
          typeMapDelete(transaction, this, attributeName);
        });
      } else {
        this._prelimAttrs.delete(attributeName);
      }
    }
    setAttribute(attributeName, attributeValue) {
      if (this.doc !== null) {
        transact(this.doc, (transaction) => {
          typeMapSet(transaction, this, attributeName, attributeValue);
        });
      } else {
        this._prelimAttrs.set(attributeName, attributeValue);
      }
    }
    getAttribute(attributeName) {
      return typeMapGet(this, attributeName);
    }
    hasAttribute(attributeName) {
      return typeMapHas(this, attributeName);
    }
    getAttributes(snapshot2) {
      return typeMapGetAll(this);
    }
    toDOM(_document = document, hooks = {}, binding) {
      const dom2 = _document.createElement(this.nodeName);
      const attrs = this.getAttributes();
      for (const key in attrs) {
        dom2.setAttribute(key, attrs[key]);
      }
      typeListForEach(this, (yxml) => {
        dom2.appendChild(yxml.toDOM(_document, hooks, binding));
      });
      if (binding !== void 0) {
        binding._createAssociation(dom2, this);
      }
      return dom2;
    }
    _write(encoder) {
      encoder.writeTypeRef(YXmlElementRefID);
      encoder.writeKey(this.nodeName);
    }
  };
  var readYXmlElement = (decoder) => new YXmlElement(decoder.readKey());
  var YXmlEvent = class extends YEvent {
    constructor(target, subs, transaction) {
      super(target, transaction);
      this.childListChanged = false;
      this.attributesChanged = new Set();
      subs.forEach((sub) => {
        if (sub === null) {
          this.childListChanged = true;
        } else {
          this.attributesChanged.add(sub);
        }
      });
    }
  };
  var YXmlHook = class extends YMap {
    constructor(hookName) {
      super();
      this.hookName = hookName;
    }
    _copy() {
      return new YXmlHook(this.hookName);
    }
    clone() {
      const el = new YXmlHook(this.hookName);
      this.forEach((value, key) => {
        el.set(key, value);
      });
      return el;
    }
    toDOM(_document = document, hooks = {}, binding) {
      const hook = hooks[this.hookName];
      let dom2;
      if (hook !== void 0) {
        dom2 = hook.createDom(this);
      } else {
        dom2 = document.createElement(this.hookName);
      }
      dom2.setAttribute("data-yjs-hook", this.hookName);
      if (binding !== void 0) {
        binding._createAssociation(dom2, this);
      }
      return dom2;
    }
    _write(encoder) {
      encoder.writeTypeRef(YXmlHookRefID);
      encoder.writeKey(this.hookName);
    }
  };
  var readYXmlHook = (decoder) => new YXmlHook(decoder.readKey());
  var YXmlText = class extends YText {
    get nextSibling() {
      const n2 = this._item ? this._item.next : null;
      return n2 ? n2.content.type : null;
    }
    get prevSibling() {
      const n2 = this._item ? this._item.prev : null;
      return n2 ? n2.content.type : null;
    }
    _copy() {
      return new YXmlText();
    }
    clone() {
      const text2 = new YXmlText();
      text2.applyDelta(this.toDelta());
      return text2;
    }
    toDOM(_document = document, hooks, binding) {
      const dom2 = _document.createTextNode(this.toString());
      if (binding !== void 0) {
        binding._createAssociation(dom2, this);
      }
      return dom2;
    }
    toString() {
      return this.toDelta().map((delta) => {
        const nestedNodes = [];
        for (const nodeName in delta.attributes) {
          const attrs = [];
          for (const key in delta.attributes[nodeName]) {
            attrs.push({ key, value: delta.attributes[nodeName][key] });
          }
          attrs.sort((a3, b3) => a3.key < b3.key ? -1 : 1);
          nestedNodes.push({ nodeName, attrs });
        }
        nestedNodes.sort((a3, b3) => a3.nodeName < b3.nodeName ? -1 : 1);
        let str = "";
        for (let i3 = 0; i3 < nestedNodes.length; i3++) {
          const node = nestedNodes[i3];
          str += `<${node.nodeName}`;
          for (let j3 = 0; j3 < node.attrs.length; j3++) {
            const attr = node.attrs[j3];
            str += ` ${attr.key}="${attr.value}"`;
          }
          str += ">";
        }
        str += delta.insert;
        for (let i3 = nestedNodes.length - 1; i3 >= 0; i3--) {
          str += `</${nestedNodes[i3].nodeName}>`;
        }
        return str;
      }).join("");
    }
    toJSON() {
      return this.toString();
    }
    _write(encoder) {
      encoder.writeTypeRef(YXmlTextRefID);
    }
  };
  var readYXmlText = (decoder) => new YXmlText();
  var AbstractStruct = class {
    constructor(id2, length3) {
      this.id = id2;
      this.length = length3;
    }
    get deleted() {
      throw methodUnimplemented();
    }
    mergeWith(right) {
      return false;
    }
    write(encoder, offset, encodingRef) {
      throw methodUnimplemented();
    }
    integrate(transaction, offset) {
      throw methodUnimplemented();
    }
  };
  var structGCRefNumber = 0;
  var GC = class extends AbstractStruct {
    get deleted() {
      return true;
    }
    delete() {
    }
    mergeWith(right) {
      if (this.constructor !== right.constructor) {
        return false;
      }
      this.length += right.length;
      return true;
    }
    integrate(transaction, offset) {
      if (offset > 0) {
        this.id.clock += offset;
        this.length -= offset;
      }
      addStruct(transaction.doc.store, this);
    }
    write(encoder, offset) {
      encoder.writeInfo(structGCRefNumber);
      encoder.writeLen(this.length - offset);
    }
    getMissing(transaction, store2) {
      return null;
    }
  };
  var ContentBinary = class {
    constructor(content) {
      this.content = content;
    }
    getLength() {
      return 1;
    }
    getContent() {
      return [this.content];
    }
    isCountable() {
      return true;
    }
    copy() {
      return new ContentBinary(this.content);
    }
    splice(offset) {
      throw methodUnimplemented();
    }
    mergeWith(right) {
      return false;
    }
    integrate(transaction, item) {
    }
    delete(transaction) {
    }
    gc(store2) {
    }
    write(encoder, offset) {
      encoder.writeBuf(this.content);
    }
    getRef() {
      return 3;
    }
  };
  var readContentBinary = (decoder) => new ContentBinary(decoder.readBuf());
  var ContentDeleted = class {
    constructor(len) {
      this.len = len;
    }
    getLength() {
      return this.len;
    }
    getContent() {
      return [];
    }
    isCountable() {
      return false;
    }
    copy() {
      return new ContentDeleted(this.len);
    }
    splice(offset) {
      const right = new ContentDeleted(this.len - offset);
      this.len = offset;
      return right;
    }
    mergeWith(right) {
      this.len += right.len;
      return true;
    }
    integrate(transaction, item) {
      addToDeleteSet(transaction.deleteSet, item.id.client, item.id.clock, this.len);
      item.markDeleted();
    }
    delete(transaction) {
    }
    gc(store2) {
    }
    write(encoder, offset) {
      encoder.writeLen(this.len - offset);
    }
    getRef() {
      return 1;
    }
  };
  var readContentDeleted = (decoder) => new ContentDeleted(decoder.readLen());
  var createDocFromOpts = (guid, opts) => new Doc(__spreadProps(__spreadValues({ guid }, opts), { shouldLoad: opts.shouldLoad || opts.autoLoad || false }));
  var ContentDoc = class {
    constructor(doc3) {
      if (doc3._item) {
        console.error("This document was already integrated as a sub-document. You should create a second instance instead with the same guid.");
      }
      this.doc = doc3;
      const opts = {};
      this.opts = opts;
      if (!doc3.gc) {
        opts.gc = false;
      }
      if (doc3.autoLoad) {
        opts.autoLoad = true;
      }
      if (doc3.meta !== null) {
        opts.meta = doc3.meta;
      }
    }
    getLength() {
      return 1;
    }
    getContent() {
      return [this.doc];
    }
    isCountable() {
      return true;
    }
    copy() {
      return new ContentDoc(createDocFromOpts(this.doc.guid, this.opts));
    }
    splice(offset) {
      throw methodUnimplemented();
    }
    mergeWith(right) {
      return false;
    }
    integrate(transaction, item) {
      this.doc._item = item;
      transaction.subdocsAdded.add(this.doc);
      if (this.doc.shouldLoad) {
        transaction.subdocsLoaded.add(this.doc);
      }
    }
    delete(transaction) {
      if (transaction.subdocsAdded.has(this.doc)) {
        transaction.subdocsAdded.delete(this.doc);
      } else {
        transaction.subdocsRemoved.add(this.doc);
      }
    }
    gc(store2) {
    }
    write(encoder, offset) {
      encoder.writeString(this.doc.guid);
      encoder.writeAny(this.opts);
    }
    getRef() {
      return 9;
    }
  };
  var readContentDoc = (decoder) => new ContentDoc(createDocFromOpts(decoder.readString(), decoder.readAny()));
  var ContentEmbed = class {
    constructor(embed) {
      this.embed = embed;
    }
    getLength() {
      return 1;
    }
    getContent() {
      return [this.embed];
    }
    isCountable() {
      return true;
    }
    copy() {
      return new ContentEmbed(this.embed);
    }
    splice(offset) {
      throw methodUnimplemented();
    }
    mergeWith(right) {
      return false;
    }
    integrate(transaction, item) {
    }
    delete(transaction) {
    }
    gc(store2) {
    }
    write(encoder, offset) {
      encoder.writeJSON(this.embed);
    }
    getRef() {
      return 5;
    }
  };
  var readContentEmbed = (decoder) => new ContentEmbed(decoder.readJSON());
  var ContentFormat = class {
    constructor(key, value) {
      this.key = key;
      this.value = value;
    }
    getLength() {
      return 1;
    }
    getContent() {
      return [];
    }
    isCountable() {
      return false;
    }
    copy() {
      return new ContentFormat(this.key, this.value);
    }
    splice(offset) {
      throw methodUnimplemented();
    }
    mergeWith(right) {
      return false;
    }
    integrate(transaction, item) {
      item.parent._searchMarker = null;
    }
    delete(transaction) {
    }
    gc(store2) {
    }
    write(encoder, offset) {
      encoder.writeKey(this.key);
      encoder.writeJSON(this.value);
    }
    getRef() {
      return 6;
    }
  };
  var readContentFormat = (decoder) => new ContentFormat(decoder.readString(), decoder.readJSON());
  var ContentJSON = class {
    constructor(arr) {
      this.arr = arr;
    }
    getLength() {
      return this.arr.length;
    }
    getContent() {
      return this.arr;
    }
    isCountable() {
      return true;
    }
    copy() {
      return new ContentJSON(this.arr);
    }
    splice(offset) {
      const right = new ContentJSON(this.arr.slice(offset));
      this.arr = this.arr.slice(0, offset);
      return right;
    }
    mergeWith(right) {
      this.arr = this.arr.concat(right.arr);
      return true;
    }
    integrate(transaction, item) {
    }
    delete(transaction) {
    }
    gc(store2) {
    }
    write(encoder, offset) {
      const len = this.arr.length;
      encoder.writeLen(len - offset);
      for (let i3 = offset; i3 < len; i3++) {
        const c3 = this.arr[i3];
        encoder.writeString(c3 === void 0 ? "undefined" : JSON.stringify(c3));
      }
    }
    getRef() {
      return 2;
    }
  };
  var readContentJSON = (decoder) => {
    const len = decoder.readLen();
    const cs = [];
    for (let i3 = 0; i3 < len; i3++) {
      const c3 = decoder.readString();
      if (c3 === "undefined") {
        cs.push(void 0);
      } else {
        cs.push(JSON.parse(c3));
      }
    }
    return new ContentJSON(cs);
  };
  var ContentAny = class {
    constructor(arr) {
      this.arr = arr;
    }
    getLength() {
      return this.arr.length;
    }
    getContent() {
      return this.arr;
    }
    isCountable() {
      return true;
    }
    copy() {
      return new ContentAny(this.arr);
    }
    splice(offset) {
      const right = new ContentAny(this.arr.slice(offset));
      this.arr = this.arr.slice(0, offset);
      return right;
    }
    mergeWith(right) {
      this.arr = this.arr.concat(right.arr);
      return true;
    }
    integrate(transaction, item) {
    }
    delete(transaction) {
    }
    gc(store2) {
    }
    write(encoder, offset) {
      const len = this.arr.length;
      encoder.writeLen(len - offset);
      for (let i3 = offset; i3 < len; i3++) {
        const c3 = this.arr[i3];
        encoder.writeAny(c3);
      }
    }
    getRef() {
      return 8;
    }
  };
  var readContentAny = (decoder) => {
    const len = decoder.readLen();
    const cs = [];
    for (let i3 = 0; i3 < len; i3++) {
      cs.push(decoder.readAny());
    }
    return new ContentAny(cs);
  };
  var ContentString = class {
    constructor(str) {
      this.str = str;
    }
    getLength() {
      return this.str.length;
    }
    getContent() {
      return this.str.split("");
    }
    isCountable() {
      return true;
    }
    copy() {
      return new ContentString(this.str);
    }
    splice(offset) {
      const right = new ContentString(this.str.slice(offset));
      this.str = this.str.slice(0, offset);
      const firstCharCode = this.str.charCodeAt(offset - 1);
      if (firstCharCode >= 55296 && firstCharCode <= 56319) {
        this.str = this.str.slice(0, offset - 1) + "\uFFFD";
        right.str = "\uFFFD" + right.str.slice(1);
      }
      return right;
    }
    mergeWith(right) {
      this.str += right.str;
      return true;
    }
    integrate(transaction, item) {
    }
    delete(transaction) {
    }
    gc(store2) {
    }
    write(encoder, offset) {
      encoder.writeString(offset === 0 ? this.str : this.str.slice(offset));
    }
    getRef() {
      return 4;
    }
  };
  var readContentString = (decoder) => new ContentString(decoder.readString());
  var getMovedCoords = (moved, tr2) => {
    let start;
    let end;
    if (moved.start.item) {
      if (moved.start.assoc < 0) {
        start = getItemCleanEnd(tr2, moved.start.item);
        start = start.right;
      } else {
        start = getItemCleanStart(tr2, moved.start.item);
      }
    } else if (moved.start.tname != null) {
      start = tr2.doc.get(moved.start.tname)._start;
    } else if (moved.start.type) {
      start = getItem(tr2.doc.store, moved.start.type).content.type._start;
    } else {
      unexpectedCase();
    }
    if (moved.end.item) {
      if (moved.end.assoc < 0) {
        end = getItemCleanEnd(tr2, moved.end.item);
        end = end.right;
      } else {
        end = getItemCleanStart(tr2, moved.end.item);
      }
    } else {
      end = null;
    }
    return { start, end };
  };
  var ContentMove = class {
    constructor(start, end, priority) {
      this.start = start;
      this.end = end;
      this.priority = priority;
      this.overrides = new Set();
    }
    getLength() {
      return 1;
    }
    getContent() {
      return [null];
    }
    isCountable() {
      return false;
    }
    copy() {
      return new ContentMove(this.start, this.end, this.priority);
    }
    splice(offset) {
      return this;
    }
    mergeWith(right) {
      return false;
    }
    integrate(transaction, item) {
      item.parent._searchMarker = [];
      let { start, end } = getMovedCoords(this, transaction);
      let maxPriority = 0;
      const adaptPriority = this.priority < 0;
      while (start !== end && start != null) {
        if (!start.deleted) {
          const currMoved = start.moved;
          const nextPrio = currMoved ? currMoved.content.priority : -1;
          if (currMoved === null || adaptPriority || nextPrio < this.priority || currMoved.id.client < item.id.client || currMoved.id.client === item.id.client && currMoved.id.clock < item.id.clock) {
            if (currMoved !== null) {
              this.overrides.add(currMoved);
            }
            maxPriority = max2(maxPriority, nextPrio);
            if (start.moved && !transaction.prevMoved.has(start)) {
              transaction.prevMoved.set(start, start.moved);
            }
            start.moved = item;
          } else {
            currMoved.content.overrides.add(item);
          }
        }
        start = start.right;
      }
      if (adaptPriority) {
        this.priority = maxPriority + 1;
      }
    }
    delete(transaction, item) {
      let { start, end } = getMovedCoords(this, transaction);
      while (start !== end && start != null) {
        if (start.moved === item) {
          start.moved = null;
        }
        start = start.right;
      }
      const reIntegrate = (reIntegrateItem) => {
        const content = reIntegrateItem.content;
        if (reIntegrateItem.deleted) {
          content.overrides.forEach(reIntegrate);
        } else {
          content.integrate(transaction, reIntegrateItem);
        }
      };
      this.overrides.forEach(reIntegrate);
    }
    gc(store2) {
    }
    write(encoder, offset) {
      const isCollapsed = this.isCollapsed();
      writeUint8(encoder.restEncoder, isCollapsed ? 1 : 0);
      encoder.writeBuf(encodeRelativePosition(this.start));
      if (!isCollapsed) {
        encoder.writeBuf(encodeRelativePosition(this.end));
      }
      writeVarUint(encoder.restEncoder, this.priority);
    }
    getRef() {
      return 11;
    }
    isCollapsed() {
      return this.start.item === this.end.item && this.start.item !== null;
    }
  };
  var readContentMove = (decoder) => {
    const isCollapsed = readUint8(decoder.restDecoder) === 1;
    const start = decodeRelativePosition(decoder.readBuf());
    const end = isCollapsed ? start.clone() : decodeRelativePosition(decoder.readBuf());
    if (isCollapsed) {
      end.assoc = -1;
    }
    return new ContentMove(start, end, readVarUint(decoder.restDecoder));
  };
  var typeRefs = [
    readYArray,
    readYMap,
    readYText,
    readYXmlElement,
    readYXmlFragment,
    readYXmlHook,
    readYXmlText
  ];
  var YArrayRefID = 0;
  var YMapRefID = 1;
  var YTextRefID = 2;
  var YXmlElementRefID = 3;
  var YXmlFragmentRefID = 4;
  var YXmlHookRefID = 5;
  var YXmlTextRefID = 6;
  var ContentType = class {
    constructor(type) {
      this.type = type;
    }
    getLength() {
      return 1;
    }
    getContent() {
      return [this.type];
    }
    isCountable() {
      return true;
    }
    copy() {
      return new ContentType(this.type._copy());
    }
    splice(offset) {
      throw methodUnimplemented();
    }
    mergeWith(right) {
      return false;
    }
    integrate(transaction, item) {
      this.type._integrate(transaction.doc, item);
    }
    delete(transaction) {
      let item = this.type._start;
      while (item !== null) {
        if (!item.deleted) {
          item.delete(transaction);
        } else {
          transaction._mergeStructs.push(item);
        }
        item = item.right;
      }
      this.type._map.forEach((item2) => {
        if (!item2.deleted) {
          item2.delete(transaction);
        } else {
          transaction._mergeStructs.push(item2);
        }
      });
      transaction.changed.delete(this.type);
    }
    gc(store2) {
      let item = this.type._start;
      while (item !== null) {
        item.gc(store2, true);
        item = item.right;
      }
      this.type._start = null;
      this.type._map.forEach((item2) => {
        while (item2 !== null) {
          item2.gc(store2, true);
          item2 = item2.left;
        }
      });
      this.type._map = new Map();
    }
    write(encoder, offset) {
      this.type._write(encoder);
    }
    getRef() {
      return 7;
    }
  };
  var readContentType = (decoder) => new ContentType(typeRefs[decoder.readTypeRef()](decoder));
  var splitItem = (transaction, leftItem, diff) => {
    const { client, clock } = leftItem.id;
    const rightItem = new Item(createID(client, clock + diff), leftItem, createID(client, clock + diff - 1), leftItem.right, leftItem.rightOrigin, leftItem.parent, leftItem.parentSub, leftItem.content.splice(diff));
    if (leftItem.deleted) {
      rightItem.markDeleted();
    }
    if (leftItem.keep) {
      rightItem.keep = true;
    }
    if (leftItem.redone !== null) {
      rightItem.redone = createID(leftItem.redone.client, leftItem.redone.clock + diff);
    }
    leftItem.right = rightItem;
    if (rightItem.right !== null) {
      rightItem.right.left = rightItem;
    }
    transaction._mergeStructs.push(rightItem);
    if (rightItem.parentSub !== null && rightItem.right === null) {
      rightItem.parent._map.set(rightItem.parentSub, rightItem);
    }
    leftItem.length = diff;
    if (leftItem.moved) {
      const m3 = transaction.prevMoved.get(leftItem);
      if (m3) {
        transaction.prevMoved.set(rightItem, m3);
      }
    }
    return rightItem;
  };
  var Item = class extends AbstractStruct {
    constructor(id2, left, origin, right, rightOrigin, parent, parentSub, content) {
      super(id2, content.getLength());
      this.origin = origin;
      this.left = left;
      this.right = right;
      this.rightOrigin = rightOrigin;
      this.parent = parent;
      this.parentSub = parentSub;
      this.redone = null;
      this.moved = null;
      this.content = content;
      this.info = this.content.isCountable() ? BIT2 : 0;
    }
    set marker(isMarked) {
      if ((this.info & BIT4) > 0 !== isMarked) {
        this.info ^= BIT4;
      }
    }
    get marker() {
      return (this.info & BIT4) > 0;
    }
    get keep() {
      return (this.info & BIT1) > 0;
    }
    set keep(doKeep) {
      if (this.keep !== doKeep) {
        this.info ^= BIT1;
      }
    }
    get countable() {
      return (this.info & BIT2) > 0;
    }
    get deleted() {
      return (this.info & BIT3) > 0;
    }
    set deleted(doDelete) {
      if (this.deleted !== doDelete) {
        this.info ^= BIT3;
      }
    }
    markDeleted() {
      this.info |= BIT3;
    }
    getMissing(transaction, store2) {
      if (this.origin && this.origin.client !== this.id.client && this.origin.clock >= getState(store2, this.origin.client)) {
        return this.origin.client;
      }
      if (this.rightOrigin && this.rightOrigin.client !== this.id.client && this.rightOrigin.clock >= getState(store2, this.rightOrigin.client)) {
        return this.rightOrigin.client;
      }
      if (this.parent && this.parent.constructor === ID && this.id.client !== this.parent.client && this.parent.clock >= getState(store2, this.parent.client)) {
        return this.parent.client;
      }
      if (this.content.constructor === ContentMove) {
        const c3 = this.content;
        const start = c3.start.item;
        const end = c3.isCollapsed() ? null : c3.end.item;
        if (start && start.clock >= getState(store2, start.client)) {
          return start.client;
        }
        if (end && end.clock >= getState(store2, end.client)) {
          return end.client;
        }
      }
      if (this.origin) {
        this.left = getItemCleanEnd(transaction, this.origin);
        this.origin = this.left.lastId;
      }
      if (this.rightOrigin) {
        this.right = getItemCleanStart(transaction, this.rightOrigin);
        this.rightOrigin = this.right.id;
      }
      if (this.left && this.left.constructor === GC || this.right && this.right.constructor === GC) {
        this.parent = null;
      }
      if (!this.parent) {
        if (this.left && this.left.constructor === Item) {
          this.parent = this.left.parent;
          this.parentSub = this.left.parentSub;
        }
        if (this.right && this.right.constructor === Item) {
          this.parent = this.right.parent;
          this.parentSub = this.right.parentSub;
        }
      } else if (this.parent.constructor === ID) {
        const parentItem = getItem(store2, this.parent);
        if (parentItem.constructor === GC) {
          this.parent = null;
        } else {
          this.parent = parentItem.content.type;
        }
      }
      return null;
    }
    integrate(transaction, offset) {
      if (offset > 0) {
        this.id.clock += offset;
        this.left = getItemCleanEnd(transaction, createID(this.id.client, this.id.clock - 1));
        this.origin = this.left.lastId;
        this.content = this.content.splice(offset);
        this.length -= offset;
      }
      if (this.parent) {
        if (!this.left && (!this.right || this.right.left !== null) || this.left && this.left.right !== this.right) {
          let left = this.left;
          let o3;
          if (left !== null) {
            o3 = left.right;
          } else if (this.parentSub !== null) {
            o3 = this.parent._map.get(this.parentSub) || null;
            while (o3 !== null && o3.left !== null) {
              o3 = o3.left;
            }
          } else {
            o3 = this.parent._start;
          }
          const conflictingItems = new Set();
          const itemsBeforeOrigin = new Set();
          while (o3 !== null && o3 !== this.right) {
            itemsBeforeOrigin.add(o3);
            conflictingItems.add(o3);
            if (compareIDs(this.origin, o3.origin)) {
              if (o3.id.client < this.id.client) {
                left = o3;
                conflictingItems.clear();
              } else if (compareIDs(this.rightOrigin, o3.rightOrigin)) {
                break;
              }
            } else if (o3.origin !== null && itemsBeforeOrigin.has(getItem(transaction.doc.store, o3.origin))) {
              if (!conflictingItems.has(getItem(transaction.doc.store, o3.origin))) {
                left = o3;
                conflictingItems.clear();
              }
            } else {
              break;
            }
            o3 = o3.right;
          }
          this.left = left;
        }
        if (this.left !== null) {
          const right = this.left.right;
          this.right = right;
          this.left.right = this;
        } else {
          let r2;
          if (this.parentSub !== null) {
            r2 = this.parent._map.get(this.parentSub) || null;
            while (r2 !== null && r2.left !== null) {
              r2 = r2.left;
            }
          } else {
            r2 = this.parent._start;
            this.parent._start = this;
          }
          this.right = r2;
        }
        if (this.right !== null) {
          this.right.left = this;
        } else if (this.parentSub !== null) {
          this.parent._map.set(this.parentSub, this);
          if (this.left !== null) {
            this.left.delete(transaction);
          }
        }
        if (this.parentSub === null && this.countable && !this.deleted) {
          this.parent._length += this.length;
        }
        addStruct(transaction.doc.store, this);
        this.content.integrate(transaction, this);
        addChangedTypeToTransaction(transaction, this.parent, this.parentSub);
        if (this.parent._item !== null && this.parent._item.deleted || this.parentSub !== null && this.right !== null) {
          this.delete(transaction);
        }
      } else {
        new GC(this.id, this.length).integrate(transaction, 0);
      }
    }
    get next() {
      let n2 = this.right;
      while (n2 !== null && n2.deleted) {
        n2 = n2.right;
      }
      return n2;
    }
    get prev() {
      let n2 = this.left;
      while (n2 !== null && n2.deleted) {
        n2 = n2.left;
      }
      return n2;
    }
    get lastId() {
      return this.length === 1 ? this.id : createID(this.id.client, this.id.clock + this.length - 1);
    }
    mergeWith(right) {
      if (this.constructor === right.constructor && compareIDs(right.origin, this.lastId) && this.right === right && compareIDs(this.rightOrigin, right.rightOrigin) && this.id.client === right.id.client && this.id.clock + this.length === right.id.clock && this.deleted === right.deleted && this.redone === null && right.redone === null && this.moved === right.moved && this.content.constructor === right.content.constructor && this.content.mergeWith(right.content)) {
        if (right.marker) {
          const searchMarker = this.parent._searchMarker;
          if (searchMarker) {
            for (let i3 = searchMarker.length - 1; i3 >= 0; i3--) {
              if (searchMarker[i3].nextItem === right) {
                searchMarker.splice(i3, 1);
              }
            }
          }
        }
        if (right.keep) {
          this.keep = true;
        }
        this.right = right.right;
        if (this.right !== null) {
          this.right.left = this;
        }
        this.length += right.length;
        return true;
      }
      return false;
    }
    delete(transaction) {
      if (!this.deleted) {
        const parent = this.parent;
        if (this.countable && this.parentSub === null) {
          parent._length -= this.length;
        }
        this.markDeleted();
        addToDeleteSet(transaction.deleteSet, this.id.client, this.id.clock, this.length);
        addChangedTypeToTransaction(transaction, parent, this.parentSub);
        this.content.delete(transaction, this);
      }
    }
    gc(store2, parentGCd) {
      if (!this.deleted) {
        throw unexpectedCase();
      }
      this.moved = null;
      this.content.gc(store2);
      if (parentGCd) {
        replaceStruct(store2, this, new GC(this.id, this.length));
      } else {
        this.content = new ContentDeleted(this.length);
      }
    }
    write(encoder, offset) {
      const origin = offset > 0 ? createID(this.id.client, this.id.clock + offset - 1) : this.origin;
      const rightOrigin = this.rightOrigin;
      const parentSub = this.parentSub;
      const info = this.content.getRef() & BITS5 | (origin === null ? 0 : BIT8) | (rightOrigin === null ? 0 : BIT7) | (parentSub === null ? 0 : BIT6);
      encoder.writeInfo(info);
      if (origin !== null) {
        encoder.writeLeftID(origin);
      }
      if (rightOrigin !== null) {
        encoder.writeRightID(rightOrigin);
      }
      if (origin === null && rightOrigin === null) {
        const parent = this.parent;
        if (parent._item !== void 0) {
          const parentItem = parent._item;
          if (parentItem === null) {
            const ykey = findRootTypeKey(parent);
            encoder.writeParentInfo(true);
            encoder.writeString(ykey);
          } else {
            encoder.writeParentInfo(false);
            encoder.writeLeftID(parentItem.id);
          }
        } else if (parent.constructor === String) {
          encoder.writeParentInfo(true);
          encoder.writeString(parent);
        } else if (parent.constructor === ID) {
          encoder.writeParentInfo(false);
          encoder.writeLeftID(parent);
        } else {
          unexpectedCase();
        }
        if (parentSub !== null) {
          encoder.writeString(parentSub);
        }
      }
      this.content.write(encoder, offset);
    }
  };
  var readItemContent = (decoder, info) => contentRefs[info & BITS5](decoder);
  var contentRefs = [
    () => {
      unexpectedCase();
    },
    readContentDeleted,
    readContentJSON,
    readContentBinary,
    readContentString,
    readContentEmbed,
    readContentFormat,
    readContentType,
    readContentAny,
    readContentDoc,
    () => {
      unexpectedCase();
    },
    readContentMove
  ];
  var structSkipRefNumber = 10;
  var Skip = class extends AbstractStruct {
    get deleted() {
      return true;
    }
    delete() {
    }
    mergeWith(right) {
      if (this.constructor !== right.constructor) {
        return false;
      }
      this.length += right.length;
      return true;
    }
    integrate(transaction, offset) {
      unexpectedCase();
    }
    write(encoder, offset) {
      encoder.writeInfo(structSkipRefNumber);
      writeVarUint(encoder.restEncoder, this.length - offset);
    }
    getMissing(transaction, store2) {
      return null;
    }
  };
  var glo = typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {};
  var importIdentifier = "__ $YJS$ __";
  if (glo[importIdentifier] === true) {
    console.warn("Yjs was already imported. Importing different versions of Yjs often leads to issues.");
  }
  glo[importIdentifier] = true;

  // node_modules/lib0/broadcastchannel.js
  var channels = new Map();
  var LocalStoragePolyfill = class {
    constructor(room) {
      this.room = room;
      this.onmessage = null;
      onChange((e4) => e4.key === room && this.onmessage !== null && this.onmessage({ data: fromBase64(e4.newValue || "") }));
    }
    postMessage(buf) {
      varStorage.setItem(this.room, toBase64(createUint8ArrayFromArrayBuffer(buf)));
    }
  };
  var BC = typeof BroadcastChannel === "undefined" ? LocalStoragePolyfill : BroadcastChannel;
  var getChannel = (room) => setIfUndefined(channels, room, () => {
    const subs = new Set();
    const bc2 = new BC(room);
    bc2.onmessage = (e4) => subs.forEach((sub) => sub(e4.data, "broadcastchannel"));
    return {
      bc: bc2,
      subs
    };
  });
  var subscribe = (room, f5) => getChannel(room).subs.add(f5);
  var unsubscribe = (room, f5) => getChannel(room).subs.delete(f5);
  var publish = (room, data2, origin = null) => {
    const c3 = getChannel(room);
    c3.bc.postMessage(data2);
    c3.subs.forEach((sub) => sub(data2, origin));
  };

  // node_modules/y-protocols/sync.js
  var messageYjsSyncStep1 = 0;
  var messageYjsSyncStep2 = 1;
  var messageYjsUpdate = 2;
  var writeSyncStep1 = (encoder, doc3) => {
    writeVarUint(encoder, messageYjsSyncStep1);
    const sv = encodeStateVector(doc3);
    writeVarUint8Array(encoder, sv);
  };
  var writeSyncStep2 = (encoder, doc3, encodedStateVector) => {
    writeVarUint(encoder, messageYjsSyncStep2);
    writeVarUint8Array(encoder, encodeStateAsUpdate(doc3, encodedStateVector));
  };
  var readSyncStep1 = (decoder, encoder, doc3) => writeSyncStep2(encoder, doc3, readVarUint8Array(decoder));
  var readSyncStep2 = (decoder, doc3, transactionOrigin) => {
    try {
      applyUpdate(doc3, readVarUint8Array(decoder), transactionOrigin);
    } catch (error2) {
      console.error("Caught error while handling a Yjs update", error2);
    }
  };
  var writeUpdate = (encoder, update) => {
    writeVarUint(encoder, messageYjsUpdate);
    writeVarUint8Array(encoder, update);
  };
  var readUpdate = readSyncStep2;
  var readSyncMessage = (decoder, encoder, doc3, transactionOrigin) => {
    const messageType = readVarUint(decoder);
    switch (messageType) {
      case messageYjsSyncStep1:
        readSyncStep1(decoder, encoder, doc3);
        break;
      case messageYjsSyncStep2:
        readSyncStep2(decoder, doc3, transactionOrigin);
        break;
      case messageYjsUpdate:
        readUpdate(decoder, doc3, transactionOrigin);
        break;
      default:
        throw new Error("Unknown message type");
    }
    return messageType;
  };

  // node_modules/y-protocols/auth.js
  var messagePermissionDenied = 0;
  var readAuthMessage = (decoder, y2, permissionDeniedHandler2) => {
    switch (readVarUint(decoder)) {
      case messagePermissionDenied:
        permissionDeniedHandler2(y2, readVarString(decoder));
    }
  };

  // node_modules/y-protocols/awareness.js
  var outdatedTimeout = 3e4;
  var Awareness = class extends Observable {
    constructor(doc3) {
      super();
      this.doc = doc3;
      this.clientID = doc3.clientID;
      this.states = new Map();
      this.meta = new Map();
      this._checkInterval = setInterval(() => {
        const now = getUnixTime();
        if (this.getLocalState() !== null && outdatedTimeout / 2 <= now - this.meta.get(this.clientID).lastUpdated) {
          this.setLocalState(this.getLocalState());
        }
        const remove = [];
        this.meta.forEach((meta, clientid) => {
          if (clientid !== this.clientID && outdatedTimeout <= now - meta.lastUpdated && this.states.has(clientid)) {
            remove.push(clientid);
          }
        });
        if (remove.length > 0) {
          removeAwarenessStates(this, remove, "timeout");
        }
      }, floor2(outdatedTimeout / 10));
      doc3.on("destroy", () => {
        this.destroy();
      });
      this.setLocalState({});
    }
    destroy() {
      this.emit("destroy", [this]);
      this.setLocalState(null);
      super.destroy();
      clearInterval(this._checkInterval);
    }
    getLocalState() {
      return this.states.get(this.clientID) || null;
    }
    setLocalState(state2) {
      const clientID = this.clientID;
      const currLocalMeta = this.meta.get(clientID);
      const clock = currLocalMeta === void 0 ? 0 : currLocalMeta.clock + 1;
      const prevState = this.states.get(clientID);
      if (state2 === null) {
        this.states.delete(clientID);
      } else {
        this.states.set(clientID, state2);
      }
      this.meta.set(clientID, {
        clock,
        lastUpdated: getUnixTime()
      });
      const added = [];
      const updated = [];
      const filteredUpdated = [];
      const removed = [];
      if (state2 === null) {
        removed.push(clientID);
      } else if (prevState == null) {
        if (state2 != null) {
          added.push(clientID);
        }
      } else {
        updated.push(clientID);
        if (!equalityDeep(prevState, state2)) {
          filteredUpdated.push(clientID);
        }
      }
      if (added.length > 0 || filteredUpdated.length > 0 || removed.length > 0) {
        this.emit("change", [{ added, updated: filteredUpdated, removed }, "local"]);
      }
      this.emit("update", [{ added, updated, removed }, "local"]);
    }
    setLocalStateField(field, value) {
      const state2 = this.getLocalState();
      if (state2 !== null) {
        this.setLocalState(__spreadProps(__spreadValues({}, state2), {
          [field]: value
        }));
      }
    }
    getStates() {
      return this.states;
    }
  };
  var removeAwarenessStates = (awareness2, clients, origin) => {
    const removed = [];
    for (let i3 = 0; i3 < clients.length; i3++) {
      const clientID = clients[i3];
      if (awareness2.states.has(clientID)) {
        awareness2.states.delete(clientID);
        if (clientID === awareness2.clientID) {
          const curMeta = awareness2.meta.get(clientID);
          awareness2.meta.set(clientID, {
            clock: curMeta.clock + 1,
            lastUpdated: getUnixTime()
          });
        }
        removed.push(clientID);
      }
    }
    if (removed.length > 0) {
      awareness2.emit("change", [{ added: [], updated: [], removed }, origin]);
      awareness2.emit("update", [{ added: [], updated: [], removed }, origin]);
    }
  };
  var encodeAwarenessUpdate = (awareness2, clients, states = awareness2.states) => {
    const len = clients.length;
    const encoder = createEncoder();
    writeVarUint(encoder, len);
    for (let i3 = 0; i3 < len; i3++) {
      const clientID = clients[i3];
      const state2 = states.get(clientID) || null;
      const clock = awareness2.meta.get(clientID).clock;
      writeVarUint(encoder, clientID);
      writeVarUint(encoder, clock);
      writeVarString(encoder, JSON.stringify(state2));
    }
    return toUint8Array(encoder);
  };
  var applyAwarenessUpdate = (awareness2, update, origin) => {
    const decoder = createDecoder(update);
    const timestamp = getUnixTime();
    const added = [];
    const updated = [];
    const filteredUpdated = [];
    const removed = [];
    const len = readVarUint(decoder);
    for (let i3 = 0; i3 < len; i3++) {
      const clientID = readVarUint(decoder);
      let clock = readVarUint(decoder);
      const state2 = JSON.parse(readVarString(decoder));
      const clientMeta = awareness2.meta.get(clientID);
      const prevState = awareness2.states.get(clientID);
      const currClock = clientMeta === void 0 ? 0 : clientMeta.clock;
      if (currClock < clock || currClock === clock && state2 === null && awareness2.states.has(clientID)) {
        if (state2 === null) {
          if (clientID === awareness2.clientID && awareness2.getLocalState() != null) {
            clock++;
          } else {
            awareness2.states.delete(clientID);
          }
        } else {
          awareness2.states.set(clientID, state2);
        }
        awareness2.meta.set(clientID, {
          clock,
          lastUpdated: timestamp
        });
        if (clientMeta === void 0 && state2 !== null) {
          added.push(clientID);
        } else if (clientMeta !== void 0 && state2 === null) {
          removed.push(clientID);
        } else if (state2 !== null) {
          if (!equalityDeep(state2, prevState)) {
            filteredUpdated.push(clientID);
          }
          updated.push(clientID);
        }
      }
    }
    if (added.length > 0 || filteredUpdated.length > 0 || removed.length > 0) {
      awareness2.emit("change", [{
        added,
        updated: filteredUpdated,
        removed
      }, origin]);
    }
    if (added.length > 0 || updated.length > 0 || removed.length > 0) {
      awareness2.emit("update", [{
        added,
        updated,
        removed
      }, origin]);
    }
  };

  // node_modules/lib0/mutex.js
  var createMutex = () => {
    let token = true;
    return (f5, g2) => {
      if (token) {
        token = false;
        try {
          f5();
        } finally {
          token = true;
        }
      } else if (g2 !== void 0) {
        g2();
      }
    };
  };

  // node_modules/lib0/url.js
  var encodeQueryParams = (params2) => map5(params2, (val, key) => `${encodeURIComponent(key)}=${encodeURIComponent(val)}`).join("&");

  // node_modules/y-websocket/src/y-websocket.js
  var messageSync = 0;
  var messageQueryAwareness = 3;
  var messageAwareness = 1;
  var messageAuth = 2;
  var messageHandlers = [];
  messageHandlers[messageSync] = (encoder, decoder, provider2, emitSynced, messageType) => {
    writeVarUint(encoder, messageSync);
    const syncMessageType = readSyncMessage(decoder, encoder, provider2.doc, provider2);
    if (emitSynced && syncMessageType === messageYjsSyncStep2 && !provider2.synced) {
      provider2.synced = true;
    }
  };
  messageHandlers[messageQueryAwareness] = (encoder, decoder, provider2, emitSynced, messageType) => {
    writeVarUint(encoder, messageAwareness);
    writeVarUint8Array(encoder, encodeAwarenessUpdate(provider2.awareness, Array.from(provider2.awareness.getStates().keys())));
  };
  messageHandlers[messageAwareness] = (encoder, decoder, provider2, emitSynced, messageType) => {
    applyAwarenessUpdate(provider2.awareness, readVarUint8Array(decoder), provider2);
  };
  messageHandlers[messageAuth] = (encoder, decoder, provider2, emitSynced, messageType) => {
    readAuthMessage(decoder, provider2.doc, permissionDeniedHandler);
  };
  var messageReconnectTimeout = 3e4;
  var permissionDeniedHandler = (provider2, reason) => console.warn(`Permission denied to access ${provider2.url}.
${reason}`);
  var readMessage = (provider2, buf, emitSynced) => {
    const decoder = createDecoder(buf);
    const encoder = createEncoder();
    const messageType = readVarUint(decoder);
    const messageHandler = provider2.messageHandlers[messageType];
    if (messageHandler) {
      messageHandler(encoder, decoder, provider2, emitSynced, messageType);
    } else {
      console.error("Unable to compute message");
    }
    return encoder;
  };
  var setupWS = (provider2) => {
    if (provider2.shouldConnect && provider2.ws === null) {
      const websocket = new provider2._WS(provider2.url);
      websocket.binaryType = "arraybuffer";
      provider2.ws = websocket;
      provider2.wsconnecting = true;
      provider2.wsconnected = false;
      provider2.synced = false;
      websocket.onmessage = (event) => {
        provider2.wsLastMessageReceived = getUnixTime();
        const encoder = readMessage(provider2, new Uint8Array(event.data), true);
        if (length(encoder) > 1) {
          websocket.send(toUint8Array(encoder));
        }
      };
      websocket.onerror = (event) => {
        provider2.emit("connection-error", [event, provider2]);
      };
      websocket.onclose = (event) => {
        provider2.emit("connection-close", [event, provider2]);
        provider2.ws = null;
        provider2.wsconnecting = false;
        if (provider2.wsconnected) {
          provider2.wsconnected = false;
          provider2.synced = false;
          removeAwarenessStates(provider2.awareness, Array.from(provider2.awareness.getStates().keys()).filter((client) => client !== provider2.doc.clientID), provider2);
          provider2.emit("status", [{
            status: "disconnected"
          }]);
        } else {
          provider2.wsUnsuccessfulReconnects++;
        }
        setTimeout(setupWS, min2(pow(2, provider2.wsUnsuccessfulReconnects) * 100, provider2.maxBackoffTime), provider2);
      };
      websocket.onopen = () => {
        provider2.wsLastMessageReceived = getUnixTime();
        provider2.wsconnecting = false;
        provider2.wsconnected = true;
        provider2.wsUnsuccessfulReconnects = 0;
        provider2.emit("status", [{
          status: "connected"
        }]);
        const encoder = createEncoder();
        writeVarUint(encoder, messageSync);
        writeSyncStep1(encoder, provider2.doc);
        websocket.send(toUint8Array(encoder));
        if (provider2.awareness.getLocalState() !== null) {
          const encoderAwarenessState = createEncoder();
          writeVarUint(encoderAwarenessState, messageAwareness);
          writeVarUint8Array(encoderAwarenessState, encodeAwarenessUpdate(provider2.awareness, [provider2.doc.clientID]));
          websocket.send(toUint8Array(encoderAwarenessState));
        }
      };
      provider2.emit("status", [{
        status: "connecting"
      }]);
    }
  };
  var broadcastMessage = (provider2, buf) => {
    if (provider2.wsconnected) {
      provider2.ws.send(buf);
    }
    if (provider2.bcconnected) {
      provider2.mux(() => {
        publish(provider2.bcChannel, buf);
      });
    }
  };
  var WebsocketProvider = class extends Observable {
    constructor(serverUrl, roomname, doc3, { connect = true, awareness: awareness2 = new Awareness(doc3), params: params2 = {}, WebSocketPolyfill = WebSocket, resyncInterval = -1, maxBackoffTime = 2500 } = {}) {
      super();
      while (serverUrl[serverUrl.length - 1] === "/") {
        serverUrl = serverUrl.slice(0, serverUrl.length - 1);
      }
      const encodedParams = encodeQueryParams(params2);
      this.maxBackoffTime = maxBackoffTime;
      this.bcChannel = serverUrl + "/" + roomname;
      this.url = serverUrl + "/" + roomname + (encodedParams.length === 0 ? "" : "?" + encodedParams);
      this.roomname = roomname;
      this.doc = doc3;
      this._WS = WebSocketPolyfill;
      this.awareness = awareness2;
      this.wsconnected = false;
      this.wsconnecting = false;
      this.bcconnected = false;
      this.wsUnsuccessfulReconnects = 0;
      this.messageHandlers = messageHandlers.slice();
      this.mux = createMutex();
      this._synced = false;
      this.ws = null;
      this.wsLastMessageReceived = 0;
      this.shouldConnect = connect;
      this._resyncInterval = 0;
      if (resyncInterval > 0) {
        this._resyncInterval = setInterval(() => {
          if (this.ws) {
            const encoder = createEncoder();
            writeVarUint(encoder, messageSync);
            writeSyncStep1(encoder, doc3);
            this.ws.send(toUint8Array(encoder));
          }
        }, resyncInterval);
      }
      this._bcSubscriber = (data2) => {
        this.mux(() => {
          const encoder = readMessage(this, new Uint8Array(data2), false);
          if (length(encoder) > 1) {
            publish(this.bcChannel, toUint8Array(encoder));
          }
        });
      };
      this._updateHandler = (update, origin) => {
        if (origin !== this) {
          const encoder = createEncoder();
          writeVarUint(encoder, messageSync);
          writeUpdate(encoder, update);
          broadcastMessage(this, toUint8Array(encoder));
        }
      };
      this.doc.on("update", this._updateHandler);
      this._awarenessUpdateHandler = ({ added, updated, removed }, origin) => {
        const changedClients = added.concat(updated).concat(removed);
        const encoder = createEncoder();
        writeVarUint(encoder, messageAwareness);
        writeVarUint8Array(encoder, encodeAwarenessUpdate(awareness2, changedClients));
        broadcastMessage(this, toUint8Array(encoder));
      };
      this._beforeUnloadHandler = () => {
        removeAwarenessStates(this.awareness, [doc3.clientID], "window unload");
      };
      if (typeof window !== "undefined") {
        window.addEventListener("beforeunload", this._beforeUnloadHandler);
      } else if (typeof process !== "undefined") {
        process.on("exit", () => this._beforeUnloadHandler);
      }
      awareness2.on("update", this._awarenessUpdateHandler);
      this._checkInterval = setInterval(() => {
        if (this.wsconnected && messageReconnectTimeout < getUnixTime() - this.wsLastMessageReceived) {
          this.ws.close();
        }
      }, messageReconnectTimeout / 10);
      if (connect) {
        this.connect();
      }
    }
    get synced() {
      return this._synced;
    }
    set synced(state2) {
      if (this._synced !== state2) {
        this._synced = state2;
        this.emit("synced", [state2]);
        this.emit("sync", [state2]);
      }
    }
    destroy() {
      if (this._resyncInterval !== 0) {
        clearInterval(this._resyncInterval);
      }
      clearInterval(this._checkInterval);
      this.disconnect();
      if (typeof window !== "undefined") {
        window.removeEventListener("beforeunload", this._beforeUnloadHandler);
      } else if (typeof process !== "undefined") {
        process.off("exit", () => this._beforeUnloadHandler);
      }
      this.awareness.off("update", this._awarenessUpdateHandler);
      this.doc.off("update", this._updateHandler);
      super.destroy();
    }
    connectBc() {
      if (!this.bcconnected) {
        subscribe(this.bcChannel, this._bcSubscriber);
        this.bcconnected = true;
      }
      this.mux(() => {
        const encoderSync = createEncoder();
        writeVarUint(encoderSync, messageSync);
        writeSyncStep1(encoderSync, this.doc);
        publish(this.bcChannel, toUint8Array(encoderSync));
        const encoderState = createEncoder();
        writeVarUint(encoderState, messageSync);
        writeSyncStep2(encoderState, this.doc);
        publish(this.bcChannel, toUint8Array(encoderState));
        const encoderAwarenessQuery = createEncoder();
        writeVarUint(encoderAwarenessQuery, messageQueryAwareness);
        publish(this.bcChannel, toUint8Array(encoderAwarenessQuery));
        const encoderAwarenessState = createEncoder();
        writeVarUint(encoderAwarenessState, messageAwareness);
        writeVarUint8Array(encoderAwarenessState, encodeAwarenessUpdate(this.awareness, [this.doc.clientID]));
        publish(this.bcChannel, toUint8Array(encoderAwarenessState));
      });
    }
    disconnectBc() {
      const encoder = createEncoder();
      writeVarUint(encoder, messageAwareness);
      writeVarUint8Array(encoder, encodeAwarenessUpdate(this.awareness, [this.doc.clientID], new Map()));
      broadcastMessage(this, toUint8Array(encoder));
      if (this.bcconnected) {
        unsubscribe(this.bcChannel, this._bcSubscriber);
        this.bcconnected = false;
      }
    }
    disconnect() {
      this.shouldConnect = false;
      this.disconnectBc();
      if (this.ws !== null) {
        this.ws.close();
      }
    }
    connect() {
      this.shouldConnect = true;
      if (!this.wsconnected && this.ws === null) {
        setupWS(this);
        this.connectBc();
      }
    }
  };

  // src/store.ts
  var doc2 = new Doc();
  var provider = new WebsocketProvider("wss://demos.yjs.dev", "y-presence-live-cursors", doc2);
  var awareness = provider.awareness;

  // src/app.tsx
  var import_react66 = __toModule(require_react());

  // src/constants.ts
  var USER_COLORS = [
    "#1a1c2c",
    "#E57373",
    "#9575CD",
    "#4FC3F7",
    "#81C784",
    "#144cb5",
    "#FF8A65",
    "#F06292",
    "#7986CB"
  ];
  var USER_NAMES = [
    "Daniel",
    "John",
    "Mary",
    "Harry",
    "Nico",
    "Ricky",
    "Sam",
    "Tom"
  ];

  // src/app.tsx
  var onPointShape = (info, e4) => {
    state.send("POINTED_SHAPE", info);
  };
  var onPointCanvas = (info, e4) => {
    state.send("POINTED_CANVAS", info);
  };
  var onPointBounds = (info, e4) => {
    state.send("POINTED_BOUNDS", info);
  };
  var onPointerDown = (info, e4) => {
    state.send("STARTED_POINTING", info);
  };
  var onPointerUp = (info, e4) => {
    state.send("STOPPED_POINTING", info);
  };
  var onPointerMove = (info, e4) => {
    state.send("MOVED_POINTER", info);
  };
  var onPan = (info, e4) => {
    state.send("PANNED", info);
  };
  var onPinchStart = (info, e4) => {
    state.send("STARTED_PINCHING", info);
  };
  var onPinch = (info, e4) => {
    state.send("PINCHED", info);
  };
  var onPinchEnd = (info, e4) => {
    state.send("STOPPED_PINCHING", info);
  };
  var onPointBoundsHandle = (info, e4) => {
    state.send("POINTED_BOUNDS_HANDLE", info);
  };
  var onKeyDown = (key, info, e4) => {
    switch (key) {
      case "altKey":
      case "metaKey":
      case "ctrlKey":
      case "shiftKey": {
        state.send("TOGGLED_MODIFIER", info);
        break;
      }
      case "Backspace": {
        state.send("DELETED", info);
        break;
      }
      case "Escape": {
        state.send("CANCELLED", info);
        break;
      }
      case "0": {
        state.send("ZOOMED_TO_ACTUAL", info);
        break;
      }
      case "1": {
        state.send("ZOOMED_TO_FIT", info);
        break;
      }
      case "2": {
        state.send("ZOOMED_TO_SELECTION", info);
        break;
      }
      case "+": {
        state.send("ZOOMED_IN", info);
        break;
      }
      case "-": {
        state.send("ZOOMED_OUT", info);
        break;
      }
    }
  };
  var onKeyUp = (key, info, e4) => {
    switch (key) {
      case "altKey":
      case "metaKey":
      case "ctrlKey":
      case "shiftKey": {
        state.send("TOGGLED_MODIFIER", info);
        break;
      }
    }
  };
  var random2 = (arr) => {
    return arr[Math.floor(Math.random() * arr.length)];
  };
  var name = random2(USER_NAMES);
  var color = random2(USER_COLORS);
  function App({ roomId }) {
    const appState = useStateDesigner(state);
    const [loading, setLoading] = (0, import_react66.useState)(true);
    (0, import_react66.useEffect)(() => {
      const onSync = (isSynced) => {
        if (isSynced) {
          setLoading(false);
        }
      };
      provider.on("sync", onSync);
      return () => provider.off("sync", onSync);
    }, []);
    if (loading)
      return /* @__PURE__ */ React8.createElement("p", null, "Loading...");
    return /* @__PURE__ */ React8.createElement(AppContainer, null, /* @__PURE__ */ React8.createElement(RoomProvider, {
      awareness,
      initialPresence: { name, color }
    }, /* @__PURE__ */ React8.createElement("div", {
      className: "info"
    }, "Number of connected users: ", others.length + 1), /* @__PURE__ */ React8.createElement(Ru, {
      shapeUtils,
      page: appState.data.page,
      pageState: appState.data.pageState,
      meta: appState.data.meta,
      onPointShape,
      onPointBounds,
      onPointCanvas,
      onPointerDown,
      onPointerMove,
      onPointBoundsHandle,
      onPan,
      onPinchStart,
      onPinchEnd,
      onPinch,
      onPointerUp,
      onBoundsChange: setBounds,
      onKeyDown,
      onKeyUp,
      onMount
    }), /* @__PURE__ */ React8.createElement(Toolbar, {
      activeStates: state.active,
      lastEvent: state.log[0]
    }), /* @__PURE__ */ React8.createElement(Room, null)));
  }
  var AppContainer = stitches_config_default("div", {
    position: "fixed",
    top: "0px",
    left: "0px",
    right: "0px",
    bottom: "0px",
    width: "100%",
    height: "100%"
  });

  // src/index.tsx
  import_react_dom.default.render(/* @__PURE__ */ import_react67.default.createElement(import_react67.default.StrictMode, null, /* @__PURE__ */ import_react67.default.createElement(App, null)), document.getElementById("root"));
})();
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
/**
 * String.prototype.replaceAll() polyfill
 * https://gomakethings.com/how-to-replace-a-section-of-a-string-with-another-one-with-vanilla-js/
 * @author Chris Ferdinandi
 * @license MIT
 */
/** @license React v0.20.2
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v0.20.2
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
//# sourceMappingURL=bundle.js.map
